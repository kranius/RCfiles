Index: assembly-tests/product-lifecycle/pom.xml
===================================================================
--- assembly-tests/product-lifecycle/pom.xml	(revision 84474)
+++ assembly-tests/product-lifecycle/pom.xml	(working copy)
@@ -86,12 +86,6 @@
 		
 		<dependency>
 			<groupId>com.dgp.anthologic</groupId>
-			<artifactId>anthologic-products-risk-management-services</artifactId>
-			<version>${pom.version}</version>
-		</dependency>
-		
-		<dependency>
-			<groupId>com.dgp.anthologic</groupId>
 			<artifactId>anthologic-products-distribution-view-services</artifactId>
 			<version>${pom.version}</version>
 		</dependency>
Index: clients/webapps/src/test/java/com/dgp/anthologic/web/operations/service/distribution/impl/DistributionUIServiceImplTest.java
===================================================================
--- clients/webapps/src/test/java/com/dgp/anthologic/web/operations/service/distribution/impl/DistributionUIServiceImplTest.java	(revision 84474)
+++ clients/webapps/src/test/java/com/dgp/anthologic/web/operations/service/distribution/impl/DistributionUIServiceImplTest.java	(working copy)
@@ -36,7 +36,6 @@
 import com.dgp.anthologic.bpcfg.exception.ExportPluginDoesNotExistException;
 import com.dgp.anthologic.bpcfg.exception.PTTAlreadyExistsException;
 import com.dgp.anthologic.commons.usermgt.dto.UserDTO;
-import com.dgp.anthologic.core.enums.EBatchPriority;
 import com.dgp.anthologic.core.model.domain.producttype.EProductType;
 import com.dgp.anthologic.core.model.domain.resourcetype.EComponentType;
 import com.dgp.anthologic.distribution.application.batch.BatchSupervisable;
@@ -45,12 +44,8 @@
 import com.dgp.anthologic.distribution.application.operation.audit.dto.AuditDetailDTO;
 import com.dgp.anthologic.distribution.application.operation.batch.BatchOperationService;
 import com.dgp.anthologic.distribution.application.operation.deliveryitem.DeliveryItemOperationService;
-import com.dgp.anthologic.distribution.application.risk.metrics.DistributionMetricsDto;
-import com.dgp.anthologic.distribution.application.risk.metrics.DistributionMetricsServiceUI;
 import com.dgp.anthologic.distribution.batch.Batch;
 import com.dgp.anthologic.distribution.batch.BatchService;
-import com.dgp.anthologic.distribution.batch.risk.metrics.enums.EDeliveryKind;
-import com.dgp.anthologic.distribution.batch.risk.metrics.enums.EDistributionStep;
 import com.dgp.anthologic.exception.functional.distribution.bpcfg.PTTPublishNotAllowedException;
 import com.dgp.anthologic.exception.functional.distribution.delivery.DeliveryException;
 import com.dgp.anthologic.exception.functional.usermanagement.UserEditFunctionalException;
@@ -104,10 +99,6 @@
 
     @Mock
     @InjectIntoByType
-    private DistributionMetricsServiceUI distributionMetricsServiceUI;
-
-    @Mock
-    @InjectIntoByType
     private DeliveryItemOperationService deliveryItemOperationService;
 
     @Mock
@@ -291,28 +282,6 @@
     }
 
     @Test
-    public void testloadDistributionMetrics() {
-        DistributionMetricsDto distributionMetricsDto = new DistributionMetricsDto();
-        Map<EDeliveryKind, Long> inLeadContingencyMap = new HashMap<EDeliveryKind, Long>();
-        Map<EDeliveryKind, Map<EDistributionStep, Long>> inProcessingTimeMap = new HashMap<EDeliveryKind, Map<EDistributionStep, Long>>();
-        Map<EBatchPriority, Long> inSecurityMarginMap = new HashMap<EBatchPriority, Long>();
-        Map<EDistributionStep, Long> inEDistributionStepMap = new HashMap<EDistributionStep, Long>();
-
-        inEDistributionStepMap.put(EDistributionStep.DELIVERING, 100L);
-        inProcessingTimeMap.put(EDeliveryKind.UCS, inEDistributionStepMap);
-        inProcessingTimeMap.put(EDeliveryKind.ITUNES, inEDistributionStepMap);
-        inProcessingTimeMap.put(EDeliveryKind.MOBILE, inEDistributionStepMap);
-
-        distributionMetricsDto.setLeadContingencyMap(inLeadContingencyMap);
-        distributionMetricsDto.setProcessingTimeMap(inProcessingTimeMap);
-        distributionMetricsDto.setSecurityMarginMap(inSecurityMarginMap);
-
-        expect(distributionMetricsServiceUI.loadDistributionMetrics()).andReturn(distributionMetricsDto);
-        EasyMockUnitils.replay();
-        distributionUIServiceImpl.loadDistributionMetrics();
-    }
-
-    @Test
     public void testResetBatches() throws BusinessException {
         Long batchId = 100L;
         List<Long> batchIds = new ArrayList<Long>();
Index: clients/webapps/src/test/java/com/dgp/anthologic/web/operations/controller/distribution/OrderSearchResultGridControllertest.java
===================================================================
--- clients/webapps/src/test/java/com/dgp/anthologic/web/operations/controller/distribution/OrderSearchResultGridControllertest.java	(revision 84474)
+++ clients/webapps/src/test/java/com/dgp/anthologic/web/operations/controller/distribution/OrderSearchResultGridControllertest.java	(working copy)
@@ -134,8 +134,8 @@
     @Test
     public void testGetColumnsProperties() {
 
-        String[] strArray = new String[] { ORDER_ID, "orderType.meaning", "atRisk", "nbBpOrders", "nbBatches",
-                "percentageFinishedBpOrders", "orderStatus", "nbProducts", "startDate", "endDate", "creationDate", "userName" };
+        String[] strArray = new String[] { ORDER_ID, "orderType.meaning", "nbBpOrders", "nbBatches", "percentageFinishedBpOrders",
+                "orderStatus", "nbProducts", "startDate", "endDate", "creationDate", "userName" };
         String[] expectedResult = ordersearchresultgridcontroller.getColumnsProperties();
         ReflectionAssert.assertRefEquals(strArray, expectedResult);
 
@@ -161,25 +161,24 @@
         boolean isExport = true;
         titles.put(Integer.valueOf("0"), "Order ID");
         titles.put(Integer.valueOf("1"), "Type");
-        titles.put(Integer.valueOf("2"), "Risk");
         if (!isExport) {
-            titles.put(Integer.valueOf("3"), ordersearchresultgridcontroller.getColumnHeaderTooltip("# BP Order",
-                    "# BP Orders(# Finished BP Orders)"));
-            titles.put(Integer.valueOf("4"), ordersearchresultgridcontroller.getColumnHeaderTooltip("# Batches",
-                    "# Batches(# Notified Batches)"));
-            titles.put(Integer.valueOf("5"), ordersearchresultgridcontroller.getColumnHeaderTooltip("Progress",
-                    "% calculated upon BP Orders"));
+            titles.put(Integer.valueOf("2"),
+                    ordersearchresultgridcontroller.getColumnHeaderTooltip("# BP Order", "# BP Orders(# Finished BP Orders)"));
+            titles.put(Integer.valueOf("3"),
+                    ordersearchresultgridcontroller.getColumnHeaderTooltip("# Batches", "# Batches(# Notified Batches)"));
+            titles.put(Integer.valueOf("4"),
+                    ordersearchresultgridcontroller.getColumnHeaderTooltip("Progress", "% calculated upon BP Orders"));
         } else {
-            titles.put(Integer.valueOf("3"), "# BP Order");
-            titles.put(Integer.valueOf("4"), "# Batches");
-            titles.put(Integer.valueOf("5"), "Progress");
+            titles.put(Integer.valueOf("2"), "# BP Order");
+            titles.put(Integer.valueOf("3"), "# Batches");
+            titles.put(Integer.valueOf("4"), "Progress");
         }
-        titles.put(Integer.valueOf("6"), "Status");
-        titles.put(Integer.valueOf("7"), "# Products");
-        titles.put(Integer.valueOf("8"), "Start");
-        titles.put(Integer.valueOf("9"), "End");
-        titles.put(Integer.valueOf("10"), "Creation");
-        titles.put(Integer.valueOf("11"), "User");
+        titles.put(Integer.valueOf("5"), "Status");
+        titles.put(Integer.valueOf("6"), "# Products");
+        titles.put(Integer.valueOf("7"), "Start");
+        titles.put(Integer.valueOf("8"), "End");
+        titles.put(Integer.valueOf("9"), "Creation");
+        titles.put(Integer.valueOf("10"), "User");
 
         Map<Integer, String> expectedResult = ordersearchresultgridcontroller.getColumnsTitlesForIndex(isExport);
         ReflectionAssert.assertRefEquals(titles, expectedResult);
Index: clients/webapps/src/test/java/com/dgp/anthologic/web/operations/controller/distribution/BatchSearchResultGridControllerTest.java
===================================================================
--- clients/webapps/src/test/java/com/dgp/anthologic/web/operations/controller/distribution/BatchSearchResultGridControllerTest.java	(revision 84474)
+++ clients/webapps/src/test/java/com/dgp/anthologic/web/operations/controller/distribution/BatchSearchResultGridControllerTest.java	(working copy)
@@ -139,10 +139,10 @@
 
     @Test
     public void testGetColumnsProperties() {
-        String[] strArray = new String[] { "checkbox", BATCH_ID, "businessPartner", "weighting", "batchStatus", "highVisible", "keyRelease", "versionMismatch", "watermark",
-                "batchStep", "errorCode", "errorMessage", "risk.meaning", "lastUpdate", "timeRemaining", "numberOfProducts",
-                "newRelease", "weight", "priority.meaning", "batchType", "orderingVersion", "deliveryVersion", "orderIds",
-                "firstOrderDate", "batchStartDate", "DI" };
+        String[] strArray = new String[] { "checkbox", BATCH_ID, "businessPartner", "weighting", "batchStatus", "highVisible",
+                "keyRelease", "versionMismatch", "watermark", "batchStep", "errorCode", "errorMessage", "lastUpdate", "timeRemaining",
+                "numberOfProducts", "newRelease", "weight", "priority.meaning", "batchType", "orderingVersion", "deliveryVersion",
+                "orderIds", "firstOrderDate", "batchStartDate", "DI" };
 
         String[] expectedResult = batchSearchResultGridController.getColumnsProperties(false);
         ReflectionAssert.assertRefEquals(strArray, expectedResult);
@@ -175,7 +175,6 @@
         titles.put("batchStep", "Action");
         titles.put("errorCode", "Error Code");
         titles.put("errorMessage", "Error Message");
-        titles.put("risk.meaning", "Risk");
         if (!isExport) {
             titles.put("timeRemaining", "Time Remaining");
             titles.put("numberOfProducts", batchSearchResultGridController.getColumnHeaderTooltip("#Prod",
Index: clients/webapps/src/test/java/com/dgp/anthologic/web/operations/controller/distribution/DistributionControllerTest.java
===================================================================
--- clients/webapps/src/test/java/com/dgp/anthologic/web/operations/controller/distribution/DistributionControllerTest.java	(revision 84474)
+++ clients/webapps/src/test/java/com/dgp/anthologic/web/operations/controller/distribution/DistributionControllerTest.java	(working copy)
@@ -46,11 +46,9 @@
 import com.dgp.anthologic.distribution.bporder.BpOrderFacade;
 import com.dgp.anthologic.distribution.instruction.SyncInstruction.EBpDeliveryType;
 import com.dgp.anthologic.exception.functional.usermanagement.UserEditFunctionalException;
-import com.dgp.anthologic.exception.technical.CreateZipFileTechnicalException;
 import com.dgp.anthologic.view.domain.batch.BatchesOverviewDTO;
 import com.dgp.anthologic.view.domain.batch.SearchDistributionOverviewRequestDto;
 import com.dgp.anthologic.view.domain.order.OrdersOverviewDTO;
-import com.dgp.anthologic.web.operations.dto.DistributionMetricsUIDto;
 import com.dgp.anthologic.web.operations.service.ICommonUIService;
 import com.dgp.anthologic.web.operations.service.distribution.IDistributionUIService;
 import com.dgp.anthologic.web.operations.service.distribution.IKeyReleaseUploadHistoryUIService;
@@ -990,35 +988,6 @@
     }
 
     @Test
-    public void testRenderDistributionMetrics() {
-        //DATA
-        DistributionMetricsUIDto distributionMetricsUIDto = new DistributionMetricsUIDto();
-        //MOCK
-        expect(distributionUIService.loadDistributionMetrics()).andReturn(distributionMetricsUIDto);
-        EasyMockUnitils.replay();
-        // TEST
-        String view = distributionController.renderDistributionMetrics(request, model, request.getLocale());
-
-        // VERIFY
-        assertNotNull(view);
-        assertEquals("distribution/distributionSettings", view);
-        assertTrue(model.containsAttribute("distributionMetrics"));
-    }
-
-    @Test
-    public void testUpdateDistributionMetrics() {
-        //MOCK
-        distributionUIService.updateDistributionMetrics(request);
-        EasyMockUnitils.replay();
-        // TEST
-        String view = distributionController.updateDistributionMetrics(request, model, request.getLocale());
-
-        // VERIFY
-        assertNotNull(view);
-        assertEquals("common/actionResponse", view);
-    }
-
-    @Test
     public void testRenderBpOrders() {
         //DATA
         List<Item> usersList = new ArrayList<Item>();
@@ -1057,7 +1026,6 @@
         request.setParameter("status", "DELIVERED");
         request.setParameter("bpNames", "Apple,7Digital");
         request.setParameter("fromBatches", "true");
-        request.setParameter("bpOrderRisk", "HIGH");
         request.setParameter("bpOrderStatuses", "FINISHED");
         request.setParameter("bpOrderFinishedStatuses", "DELIVERED");
 
Index: clients/webapps/src/test/java/com/dgp/anthologic/web/operations/controller/distribution/BPOrderSearchResultGridControllertest.java
===================================================================
--- clients/webapps/src/test/java/com/dgp/anthologic/web/operations/controller/distribution/BPOrderSearchResultGridControllertest.java	(revision 84474)
+++ clients/webapps/src/test/java/com/dgp/anthologic/web/operations/controller/distribution/BPOrderSearchResultGridControllertest.java	(working copy)
@@ -121,8 +121,8 @@
 
     @Test
     public void testGetColumnsProperties() {
-        String[] strArray = new String[] { "orderId", "bpCode", "creationDate", "startDate", "dueDate", "status", "risk",
-                "productReallyOrdered", "batches", "progress" };
+        String[] strArray = new String[] { "orderId", "bpCode", "creationDate", "startDate", "dueDate", "status", "productReallyOrdered",
+                "batches", "progress" };
         String[] expectedResult = bpordersearchresultgridcontroller.getColumnsProperties(false);
         ReflectionAssert.assertRefEquals(strArray, expectedResult);
 
@@ -147,14 +147,12 @@
         Map<String, String> titles = new HashMap<String, String>();
         titles.put("bpCode", "BP");
         if (!isExport) {
-            titles.put("risk", "Risk");
-            titles.put("productReallyOrdered", bpordersearchresultgridcontroller.getColumnHeaderTooltip("# Products",
-                    "#Products to be Delivered (ordered)"));
+            titles.put("productReallyOrdered",
+                    bpordersearchresultgridcontroller.getColumnHeaderTooltip("# Products", "#Products to be Delivered (ordered)"));
             titles.put("batches", bpordersearchresultgridcontroller.getColumnHeaderTooltip("# Batches", "# of Batches (notified)"));
             titles.put("progress", bpordersearchresultgridcontroller.getColumnHeaderTooltip("progress", "% Upon SI Calculation"));
         } else {
             titles.put("isError", "Error");
-            titles.put("risk", "Risk");
             titles.put("productReallyOrdered", "# Products");
             titles.put("batches", "# Batches");
             titles.put("progress", "progress");
Index: clients/webapps/src/main/webapp/WEB-INF/views/operations/distribution/batchDetails.jspx
===================================================================
--- clients/webapps/src/main/webapp/WEB-INF/views/operations/distribution/batchDetails.jspx	(revision 84474)
+++ clients/webapps/src/main/webapp/WEB-INF/views/operations/distribution/batchDetails.jspx	(working copy)
@@ -854,14 +854,6 @@
 							   </core:choose>
 					       	</div>
 					       	<div class="divLabel">
-					           <label>
-							    	<fmt:message key="operations.distribution.batches.riskLevel" />								
-							   </label>
-					       	</div>  
-					       	<div class="divFieldArea">
-					            ${batchDetails.risk.meaning}
-					       	</div>
-					       	<div class="divLabel">
 					          	<label>
 							    	<fmt:message key="operations.distribution.batches.inVis" />								
 							  	</label>	
Index: clients/webapps/src/main/webapp/WEB-INF/views/operations/distribution/orders.jspx
===================================================================
--- clients/webapps/src/main/webapp/WEB-INF/views/operations/distribution/orders.jspx	(revision 84474)
+++ clients/webapps/src/main/webapp/WEB-INF/views/operations/distribution/orders.jspx	(working copy)
@@ -222,7 +222,6 @@
 	    	var inHighVisibility = "${highVis}";
  			var inhighPriority = "${highpriority}";
  			var inError = "${inError}";
- 			var inRisky = "${inRisky}";
  			var scopeVlue = "${scope}";
  			var bpNamesVal = "${bpNames}";
  			var userNamesVal = "${userName}";
@@ -236,9 +235,6 @@
 		  	if (inError){
 		     	document.getElementById('inError').setAttribute("checked","checked");
 		   	}
-		   	if (inRisky){
-		     	document.getElementById('inRisky').setAttribute("checked","checked");
-		   	}
 		   	if (scopeVlue == "on" || scopeVlue == "true"){
  		    	document.getElementById('bpNames').disabled=true;
 				document.getElementById('OrderBpAdd').disabled=true;
@@ -600,13 +596,6 @@
 										<fmt:message key="operations.distribution.orders.inError" />
 									</label>
 								</div>
-									
-								<div>
-									<input type="checkbox" id="inRisky" name="inRisky" value="true" />
-									<label for="inRisky" class="normalLabel">
-										<fmt:message key="operations.distribution.orders.risky" />
-									</label>
-								</div>
 								    
 								<div>
 									<input type="checkbox" id="highVis" name="highVis" value="true" />
Index: clients/webapps/src/main/webapp/WEB-INF/views/operations/distribution/batchesSearchResult.jspx
===================================================================
--- clients/webapps/src/main/webapp/WEB-INF/views/operations/distribution/batchesSearchResult.jspx	(revision 84474)
+++ clients/webapps/src/main/webapp/WEB-INF/views/operations/distribution/batchesSearchResult.jspx	(working copy)
@@ -59,7 +59,6 @@
  				var archived = "${archived}";
  				var plugInNamesVal = "${plugInNames}";
  				var batchAfterActionVal = "${batchAfterAction}";
- 				var riskLevelVal = "${riskLevel}";
  				var sortBp = "${sortBp}";
  				if (haveIssues){
 			    	document.getElementById('haveIssues').setAttribute("checked","checked");
@@ -129,14 +128,6 @@
 						index++;
 					});
 				}
-				if(riskLevelVal!=null){
-					var riskLevel= riskLevelVal.substring(1).split(",");
-					var index=0;
-	 				$(riskLevel).each(function(){
-	 					$('#riskLevel' +' option[value='+riskLevel[index]+']').attr('selected',true);
-						index++;
-					});
-				}
 				if(batchPriorityVal!=null){
 					var batchPriority= batchPriorityVal.substring(1).split(",");
 					var index=0;
Index: clients/webapps/src/main/webapp/WEB-INF/views/operations/distribution/batchesSearch.jspx
===================================================================
--- clients/webapps/src/main/webapp/WEB-INF/views/operations/distribution/batchesSearch.jspx	(revision 84474)
+++ clients/webapps/src/main/webapp/WEB-INF/views/operations/distribution/batchesSearch.jspx	(working copy)
@@ -1030,20 +1030,6 @@
 		
 					  		  	<!--  Column 2 - XX,YY - SearchBlockX style -->
 					  			<div class="searchBlock2">	
-					  				<div class="divLabel" >
-										<label for="riskLevel">
-											<fmt:message key="operations.distribution.batches.riskLevel" />
-										</label>
-									</div>
-									<div class="divFieldArea">
-									   <select name="riskLevel" id="riskLevel" class="standardInput" multiple="multiple" >
-										 <core:forEach items="${riskLevelList}" var="riskLevel">
-											<option value="${riskLevel}">
-												<core:out value="${riskLevel.meaning}"/>
-											</option>
-										 </core:forEach>
-										</select> 
-									</div>
 									<div class="divLabel" >
 										<label for="batchType">
 											<fmt:message key="operations.distribution.batches.batchType" />
Index: clients/webapps/src/main/java/com/dgp/anthologic/web/operations/service/distribution/IDistributionUIService.java
===================================================================
--- clients/webapps/src/main/java/com/dgp/anthologic/web/operations/service/distribution/IDistributionUIService.java	(revision 84474)
+++ clients/webapps/src/main/java/com/dgp/anthologic/web/operations/service/distribution/IDistributionUIService.java	(working copy)
@@ -7,8 +7,6 @@
 import java.util.Map;
 import java.util.Set;
 
-import javax.servlet.http.HttpServletRequest;
-
 import com.dgp.anthologic.am.dto.keyrelease.KeyReleaseResultDto;
 import com.dgp.anthologic.bpcfg.application.ops.ptt.dto.ComponentTypeDto;
 import com.dgp.anthologic.bpcfg.application.ops.ptt.dto.PTTOverviewDto;
@@ -30,7 +28,6 @@
 import com.dgp.anthologic.view.domain.batch.BatchesOverviewDTO;
 import com.dgp.anthologic.view.domain.batch.SearchDistributionOverviewRequestDto;
 import com.dgp.anthologic.view.domain.order.OrdersOverviewDTO;
-import com.dgp.anthologic.web.operations.dto.DistributionMetricsUIDto;
 import com.dgp.commons.exception.BusinessException;
 
 /**
@@ -64,10 +61,6 @@
 
     Map<String,String> buildDiLogs(Long batchId, List<Long> deliveryItemIds);
 
-    DistributionMetricsUIDto loadDistributionMetrics();
-
-    void updateDistributionMetrics(HttpServletRequest inRequest);
-
     Map<String, List<String>> resetBatches(List<Long> batchIDs) throws BusinessException;
 
     Map<Long, String> putOnTopOfQueueBatch(List<Long> batchID, Long userID);
Index: clients/webapps/src/main/java/com/dgp/anthologic/web/operations/service/distribution/impl/DistributionUIServiceImpl.java
===================================================================
--- clients/webapps/src/main/java/com/dgp/anthologic/web/operations/service/distribution/impl/DistributionUIServiceImpl.java	(revision 84474)
+++ clients/webapps/src/main/java/com/dgp/anthologic/web/operations/service/distribution/impl/DistributionUIServiceImpl.java	(working copy)
@@ -41,12 +41,8 @@
 import com.dgp.anthologic.distribution.application.operation.audit.dto.AuditDetailDTO;
 import com.dgp.anthologic.distribution.application.operation.batch.BatchOperationService;
 import com.dgp.anthologic.distribution.application.operation.deliveryitem.DeliveryItemOperationService;
-import com.dgp.anthologic.distribution.application.risk.metrics.DistributionMetricsDto;
-import com.dgp.anthologic.distribution.application.risk.metrics.DistributionMetricsServiceUI;
 import com.dgp.anthologic.distribution.batch.Batch;
 import com.dgp.anthologic.distribution.batch.BatchService;
-import com.dgp.anthologic.distribution.batch.risk.metrics.enums.EDeliveryKind;
-import com.dgp.anthologic.distribution.batch.risk.metrics.enums.EDistributionStep;
 import com.dgp.anthologic.distribution.bporder.BpOrderFacade;
 import com.dgp.anthologic.exception.functional.distribution.bpcfg.PTTPublishNotAllowedException;
 import com.dgp.anthologic.exception.functional.distribution.delivery.DeliveryException;
@@ -97,9 +93,6 @@
     private PTTOperationsService pttOperationsService;
 
     @Resource
-    private DistributionMetricsServiceUI distributionMetricsServiceUI;
-
-    @Resource
     private DeliveryItemOperationService deliveryItemOperationService;
 
     @Resource
@@ -276,28 +269,6 @@
     }
 
     /**
-     * Loads Distribution Metrics
-     * 
-     * @return DistributionMetricsDto
-     */
-    public DistributionMetricsUIDto loadDistributionMetrics() {
-        DistributionMetricsDto distributionMetricsDto = distributionMetricsServiceUI.loadDistributionMetrics();
-        DistributionMetricsUIDto distributionMetricsUIDto = mapDistributionMetricsToDistributionMetricsUI(distributionMetricsDto);
-        return distributionMetricsUIDto;
-    }
-
-    /**
-     * Updates Distribution Metrics
-     * 
-     * @param DistributionMetricsDto
-     * 
-     */
-    public void updateDistributionMetrics(HttpServletRequest inRequest) {
-        DistributionMetricsDto distributionMetricsDto = mapRequestToDistributionMetricsDto(inRequest);
-        distributionMetricsServiceUI.updateDistributionMetrics(distributionMetricsDto);
-    }
-
-    /**
      * Reset Batch
      * 
      * @param List<Long> batchIds
@@ -332,91 +303,6 @@
         return batchStatusList;
     }
 
-    private DistributionMetricsDto mapRequestToDistributionMetricsDto(HttpServletRequest inRequest) {
-        DistributionMetricsDto distributionMetricsDto = new DistributionMetricsDto();
-
-        Map<EDeliveryKind, Long> leadContigencyMap = new HashMap<EDeliveryKind, Long>();
-        leadContigencyMap.put(EDeliveryKind.UCS, Long.valueOf(inRequest.getParameter("ucsLeadContingency")));
-        leadContigencyMap.put(EDeliveryKind.ITUNES, Long.valueOf(inRequest.getParameter("iTunesLeadContingency")));
-        leadContigencyMap.put(EDeliveryKind.MOBILE, Long.valueOf(inRequest.getParameter("mobileLeadContingency")));
-        distributionMetricsDto.setLeadContingencyMap(leadContigencyMap);
-
-        Map<EBatchPriority, Long> securityMarginMap = new HashMap<EBatchPriority, Long>();
-        securityMarginMap.put(EBatchPriority.TOP, Long.valueOf(inRequest.getParameter("highSecurityMargin")));
-        securityMarginMap.put(EBatchPriority.STANDARD, Long.valueOf(inRequest.getParameter("mediumSecurityMargin")));
-        securityMarginMap.put(EBatchPriority.LOW, Long.valueOf(inRequest.getParameter("lowSecurityMargin")));
-        distributionMetricsDto.setSecurityMarginMap(securityMarginMap);
-
-        Map<EDeliveryKind, Map<EDistributionStep, Long>> processingTimeMap = new HashMap<EDeliveryKind, Map<EDistributionStep, Long>>();
-        Map<EDistributionStep, Long> ucsMap = new HashMap<EDistributionStep, Long>();
-        ucsMap.put(EDistributionStep.PROVISIONING, Long.valueOf(inRequest.getParameter("ucsPRVProcessingTime")));
-        ucsMap.put(EDistributionStep.PACKAGING, Long.valueOf(inRequest.getParameter("ucsPCKProcessingTime")));
-        ucsMap.put(EDistributionStep.DELIVERING, Long.valueOf(inRequest.getParameter("ucsDELProcessingTime")));
-
-        Map<EDistributionStep, Long> iTunesMap = new HashMap<EDistributionStep, Long>();
-        iTunesMap.put(EDistributionStep.PROVISIONING, Long.valueOf(inRequest.getParameter("iTunesPRVProcessingTime")));
-        iTunesMap.put(EDistributionStep.PACKAGING, Long.valueOf(inRequest.getParameter("iTunesPCKProcessingTime")));
-        iTunesMap.put(EDistributionStep.DELIVERING, Long.valueOf(inRequest.getParameter("iTunesDELProcessingTime")));
-
-        Map<EDistributionStep, Long> mobileMap = new HashMap<EDistributionStep, Long>();
-        mobileMap.put(EDistributionStep.PROVISIONING, Long.valueOf(inRequest.getParameter("mobilePRVProcessingTime")));
-        mobileMap.put(EDistributionStep.PACKAGING, Long.valueOf(inRequest.getParameter("mobilePCKProcessingTime")));
-        mobileMap.put(EDistributionStep.DELIVERING, Long.valueOf(inRequest.getParameter("mobileDELProcessingTime")));
-
-        processingTimeMap.put(EDeliveryKind.UCS, ucsMap);
-        processingTimeMap.put(EDeliveryKind.ITUNES, iTunesMap);
-        processingTimeMap.put(EDeliveryKind.MOBILE, mobileMap);
-        distributionMetricsDto.setProcessingTimeMap(processingTimeMap);
-        return distributionMetricsDto;
-    }
-
-    private DistributionMetricsUIDto mapDistributionMetricsToDistributionMetricsUI(DistributionMetricsDto distributionMetrics) {
-        DistributionMetricsUIDto distributionMetricsUIDto = new DistributionMetricsUIDto();
-
-        Map<String, Long> leadContigencyUIMap = new HashMap<String, Long>();
-        leadContigencyUIMap.put(EDeliveryKind.UCS.name(), distributionMetrics.getLeadContingencyMap().get(EDeliveryKind.UCS));
-        leadContigencyUIMap.put(EDeliveryKind.ITUNES.name(), distributionMetrics.getLeadContingencyMap().get(EDeliveryKind.ITUNES));
-        leadContigencyUIMap.put(EDeliveryKind.MOBILE.name(), distributionMetrics.getLeadContingencyMap().get(EDeliveryKind.MOBILE));
-        distributionMetricsUIDto.setLeadContingencyUIMap(leadContigencyUIMap);
-
-        Map<String, Long> securityMarginUIMap = new HashMap<String, Long>();
-        securityMarginUIMap.put(EBatchPriority.TOP.name(), distributionMetrics.getSecurityMarginMap().get(EBatchPriority.TOP));
-        securityMarginUIMap.put(EBatchPriority.STANDARD.name(), distributionMetrics.getSecurityMarginMap().get(EBatchPriority.STANDARD));
-        securityMarginUIMap.put(EBatchPriority.LOW.name(), distributionMetrics.getSecurityMarginMap().get(EBatchPriority.LOW));
-        distributionMetricsUIDto.setSecurityMarginUIMap(securityMarginUIMap);
-
-        Map<String, Map<String, Long>> processingTimeUIMap = new HashMap<String, Map<String, Long>>();
-        Map<String, Long> ucsUIMap = new HashMap<String, Long>();
-        ucsUIMap.put(EDistributionStep.PROVISIONING.name(), distributionMetrics.getProcessingTimeMap().get(EDeliveryKind.UCS).get(
-                EDistributionStep.PROVISIONING));
-        ucsUIMap.put(EDistributionStep.PACKAGING.name(), distributionMetrics.getProcessingTimeMap().get(EDeliveryKind.UCS).get(
-                EDistributionStep.PACKAGING));
-        ucsUIMap.put(EDistributionStep.DELIVERING.name(), distributionMetrics.getProcessingTimeMap().get(EDeliveryKind.UCS).get(
-                EDistributionStep.DELIVERING));
-
-        Map<String, Long> iTunesUIMap = new HashMap<String, Long>();
-        iTunesUIMap.put(EDistributionStep.PROVISIONING.name(), distributionMetrics.getProcessingTimeMap().get(EDeliveryKind.ITUNES).get(
-                EDistributionStep.PROVISIONING));
-        iTunesUIMap.put(EDistributionStep.PACKAGING.name(), distributionMetrics.getProcessingTimeMap().get(EDeliveryKind.ITUNES).get(
-                EDistributionStep.PACKAGING));
-        iTunesUIMap.put(EDistributionStep.DELIVERING.name(), distributionMetrics.getProcessingTimeMap().get(EDeliveryKind.ITUNES).get(
-                EDistributionStep.DELIVERING));
-
-        Map<String, Long> mobileUIMap = new HashMap<String, Long>();
-        mobileUIMap.put(EDistributionStep.PROVISIONING.name(), distributionMetrics.getProcessingTimeMap().get(EDeliveryKind.MOBILE).get(
-                EDistributionStep.PROVISIONING));
-        mobileUIMap.put(EDistributionStep.PACKAGING.name(), distributionMetrics.getProcessingTimeMap().get(EDeliveryKind.MOBILE).get(
-                EDistributionStep.PACKAGING));
-        mobileUIMap.put(EDistributionStep.DELIVERING.name(), distributionMetrics.getProcessingTimeMap().get(EDeliveryKind.MOBILE).get(
-                EDistributionStep.DELIVERING));
-
-        processingTimeUIMap.put(EDeliveryKind.UCS.name(), ucsUIMap);
-        processingTimeUIMap.put(EDeliveryKind.ITUNES.name(), iTunesUIMap);
-        processingTimeUIMap.put(EDeliveryKind.MOBILE.name(), mobileUIMap);
-        distributionMetricsUIDto.setProcessingTimeUIMap(processingTimeUIMap);
-        return distributionMetricsUIDto;
-    }
-
     public List<PTTOverviewDto> getPlatformTechtemplate() {
         return pttOperationsService.getPlatformTechtemplate();
     }
Index: clients/webapps/src/main/java/com/dgp/anthologic/web/operations/controller/distribution/BPOrderSearchResultGridController.java
===================================================================
--- clients/webapps/src/main/java/com/dgp/anthologic/web/operations/controller/distribution/BPOrderSearchResultGridController.java	(revision 84474)
+++ clients/webapps/src/main/java/com/dgp/anthologic/web/operations/controller/distribution/BPOrderSearchResultGridController.java	(working copy)
@@ -28,7 +28,6 @@
 import com.dgp.anthologic.commons.usermgt.utils.UserContextUtils;
 import com.dgp.anthologic.core.utils.PaginatedRequest;
 import com.dgp.anthologic.distribution.bporder.BpOrderFacade;
-import com.dgp.anthologic.risk.domain.shared.ERisk;
 import com.dgp.anthologic.view.domain.bporder.BOrderOpsDTO;
 import com.dgp.anthologic.view.domain.bporder.BpOrderOpsRequestDto;
 import com.dgp.anthologic.view.domain.bporder.BpOrderOpsRequestDto.EBpOrderFinishedStatus;
@@ -110,8 +109,9 @@
      * @throws PaginationControllerException
      */
     @RequestMapping("/distribution/bpOrdersSearchRefresh.view")
-    public String refreshSearchBPOrders(HttpServletRequest inRequest, HttpServletResponse inResponse, Model inModel, @RequestParam
-    String id, Locale inLocale) throws IllegalAccessException, InvocationTargetException, PaginationControllerException {
+    public String refreshSearchBPOrders(HttpServletRequest inRequest, HttpServletResponse inResponse, Model inModel,
+            @RequestParam String id, Locale inLocale) throws IllegalAccessException, InvocationTargetException,
+            PaginationControllerException {
         // Get cache
         DistributionCache distributionCache = (DistributionCache) beanFactory.getBean(DistributionCache.MODEL_ID);
         refreshGrid(inModel, inRequest, inResponse, id, distributionCache.getBpOrderSearchRequest());
@@ -132,8 +132,8 @@
      * @throws PaginationControllerException
      */
     @RequestMapping("/distribution/bpOrdersSearchExport.view")
-    public void exportSearchBPOrders(HttpServletRequest inRequest, HttpServletResponse inResponse, Model inModel, @RequestParam
-    String id, Locale inLocale) throws IllegalAccessException, InvocationTargetException, PaginationControllerException {
+    public void exportSearchBPOrders(HttpServletRequest inRequest, HttpServletResponse inResponse, Model inModel, @RequestParam String id,
+            Locale inLocale) throws IllegalAccessException, InvocationTargetException, PaginationControllerException {
         // Get cache
         DistributionCache distributionCache = (DistributionCache) beanFactory.getBean(DistributionCache.MODEL_ID);
         exportGrid(inModel, inRequest, inResponse, id, distributionCache.getBpOrderSearchRequest());
@@ -143,10 +143,10 @@
     protected String[] getColumnsProperties(boolean isExport) {
         String[] colProp = null;
         if (isExport) {
-            colProp = new String[] { "orderId", "bpCode", "creationDate", "startDate", "dueDate", "status", "isError", "risk",
+            colProp = new String[] { "orderId", "bpCode", "creationDate", "startDate", "dueDate", "status", "isError",
                     "productReallyOrdered", "batches", "progress" };
         } else {
-            colProp = new String[] { "orderId", "bpCode", "creationDate", "startDate", "dueDate", "status", "risk", "productReallyOrdered",
+            colProp = new String[] { "orderId", "bpCode", "creationDate", "startDate", "dueDate", "status", "productReallyOrdered",
                     "batches", "progress" };
         }
         return colProp;
@@ -178,13 +178,11 @@
         titles.put("bpCode", "BP");
 
         if (!isExport) {
-            titles.put("risk", "Risk");
             titles.put("productReallyOrdered", getColumnHeaderTooltip("# Products", "#Products to be Delivered (ordered)"));
             titles.put("batches", getColumnHeaderTooltip("# Batches", "# of Batches (notified)"));
             titles.put("progress", getColumnHeaderTooltip("progress", "% Upon SI Calculation"));
         } else {
             titles.put("isError", "Error");
-            titles.put("risk", "Risk");
             titles.put("productReallyOrdered", "# Products");
             titles.put("batches", "# Batches");
             titles.put("progress", "progress");
@@ -301,7 +299,6 @@
     protected Map<String, Boolean> getColumnsSortDisabledForProperty() {
         Map<String, Boolean> columnSortDisabled = new HashMap<String, Boolean>();
         columnSortDisabled.put("dueDate", Boolean.TRUE);
-        columnSortDisabled.put("risk", Boolean.TRUE);
         columnSortDisabled.put("productReallyOrdered", Boolean.TRUE);
         columnSortDisabled.put("batches", Boolean.TRUE);
         columnSortDisabled.put("progress", Boolean.TRUE);
@@ -372,17 +369,6 @@
 
         }
 
-        String[] risks = request.getParameterValues("bpOrderRisk");
-        if (null != risks && risks.length > 0) {
-            List<ERisk> bpOrderRiskLevelList = new ArrayList<ERisk>();
-            for (String bpOrderRiskLevel : risks) {
-                if (!"".equals(bpOrderRiskLevel)) {
-                    bpOrderRiskLevelList.add(ERisk.valueOf(bpOrderRiskLevel));
-                }
-            }
-            bpOrderOpsRequestDto.setRisks(bpOrderRiskLevelList);
-        }
-
         String fromCreationDate = request.getParameter("fromCreationDate");
         if (StringUtil.checkNotNullAndEmpty(fromCreationDate)) {
             try {
Index: clients/webapps/src/main/java/com/dgp/anthologic/web/operations/controller/distribution/OrderSearchResultGridController.java
===================================================================
--- clients/webapps/src/main/java/com/dgp/anthologic/web/operations/controller/distribution/OrderSearchResultGridController.java	(revision 84474)
+++ clients/webapps/src/main/java/com/dgp/anthologic/web/operations/controller/distribution/OrderSearchResultGridController.java	(working copy)
@@ -186,15 +186,6 @@
                 }
             }
 
-            String inRisk = request.getParameter("inRisky");
-            if (StringUtil.checkNotNullAndEmpty(inRisk)) {
-                if ("true".equals(inRisk) || "on".equals(inRisk)) {
-                    ordersOpsSearchParameters.setBatchInOrderRisky(Boolean.TRUE);
-                } else {
-                    ordersOpsSearchParameters.setBatchInOrderRisky(Boolean.FALSE);
-                }
-            }
-
             String startDateFrom = request.getParameter("startDateFrom");
             if (StringUtil.checkNotNullAndEmpty(startDateFrom)) {
                 SimpleDateFormat dateFormat = new SimpleDateFormat(DDMM_DATE_FORMAT_KEY);
@@ -333,8 +324,8 @@
     }
 
     @RequestMapping("/distribution/orderSearchRefresh.view")
-    public String refreshSearchOrderRequests(HttpServletRequest request, HttpServletResponse response, Model model, @RequestParam
-    String id, Locale locale) throws IllegalAccessException, InvocationTargetException, PaginationControllerException {
+    public String refreshSearchOrderRequests(HttpServletRequest request, HttpServletResponse response, Model model,
+            @RequestParam String id, Locale locale) throws IllegalAccessException, InvocationTargetException, PaginationControllerException {
 
         // Get cache
         DistributionCache distributionCache = (DistributionCache) beanFactory.getBean(DistributionCache.MODEL_ID);
@@ -345,8 +336,8 @@
     }
 
     @RequestMapping("/distribution/orderSearchExport.view")
-    public void exportSearchOrderRequests(HttpServletRequest request, HttpServletResponse response, Model model, @RequestParam
-    String id, Locale locale) throws IllegalAccessException, InvocationTargetException, PaginationControllerException {
+    public void exportSearchOrderRequests(HttpServletRequest request, HttpServletResponse response, Model model, @RequestParam String id,
+            Locale locale) throws IllegalAccessException, InvocationTargetException, PaginationControllerException {
 
         // Get cache
         DistributionCache distributionCache = (DistributionCache) beanFactory.getBean(DistributionCache.MODEL_ID);
@@ -358,8 +349,8 @@
     @Override
     protected String[] getColumnsProperties() {
 
-        return new String[] { ORDER_ID, "orderType.meaning", "atRisk", "nbBpOrders", "nbBatches", "percentageFinishedBpOrders",
-                "orderStatus", "nbProducts", "startDate", "endDate", "creationDate", "userName" };
+        return new String[] { ORDER_ID, "orderType.meaning", "nbBpOrders", "nbBatches", "percentageFinishedBpOrders", "orderStatus",
+                "nbProducts", "startDate", "endDate", "creationDate", "userName" };
     }
 
     @Override
@@ -378,22 +369,21 @@
 
         titles.put(Integer.valueOf("0"), "Order ID");
         titles.put(Integer.valueOf("1"), "Type");
-        titles.put(Integer.valueOf("2"), "Risk");
         if (!isExport) {
-            titles.put(Integer.valueOf("3"), getColumnHeaderTooltip("# BP Order", "# BP Orders(# Finished BP Orders)"));
-            titles.put(Integer.valueOf("4"), getColumnHeaderTooltip("# Batches", "# Batches(# Notified Batches)"));
-            titles.put(Integer.valueOf("5"), getColumnHeaderTooltip("Progress", "% calculated upon BP Orders"));
+            titles.put(Integer.valueOf("2"), getColumnHeaderTooltip("# BP Order", "# BP Orders(# Finished BP Orders)"));
+            titles.put(Integer.valueOf("3"), getColumnHeaderTooltip("# Batches", "# Batches(# Notified Batches)"));
+            titles.put(Integer.valueOf("4"), getColumnHeaderTooltip("Progress", "% calculated upon BP Orders"));
         } else {
-            titles.put(Integer.valueOf("3"), "# BP Order");
-            titles.put(Integer.valueOf("4"), "# Batches");
-            titles.put(Integer.valueOf("5"), "Progress");
+            titles.put(Integer.valueOf("2"), "# BP Order");
+            titles.put(Integer.valueOf("3"), "# Batches");
+            titles.put(Integer.valueOf("4"), "Progress");
         }
-        titles.put(Integer.valueOf("6"), "Status");
-        titles.put(Integer.valueOf("7"), "# Products");
-        titles.put(Integer.valueOf("8"), "Start");
-        titles.put(Integer.valueOf("9"), "End");
-        titles.put(Integer.valueOf("10"), "Creation");
-        titles.put(Integer.valueOf("11"), "User");
+        titles.put(Integer.valueOf("5"), "Status");
+        titles.put(Integer.valueOf("6"), "# Products");
+        titles.put(Integer.valueOf("7"), "Start");
+        titles.put(Integer.valueOf("8"), "End");
+        titles.put(Integer.valueOf("9"), "Creation");
+        titles.put(Integer.valueOf("10"), "User");
 
         return titles;
     }
Index: clients/webapps/src/main/java/com/dgp/anthologic/web/operations/controller/distribution/BatchSearchResultGridController.java
===================================================================
--- clients/webapps/src/main/java/com/dgp/anthologic/web/operations/controller/distribution/BatchSearchResultGridController.java	(revision 84474)
+++ clients/webapps/src/main/java/com/dgp/anthologic/web/operations/controller/distribution/BatchSearchResultGridController.java	(working copy)
@@ -46,7 +46,6 @@
 import com.dgp.anthologic.distribution.order.bulk.BatchResultDto;
 import com.dgp.anthologic.distribution.order.bulk.SearchBatchesRequestDto;
 import com.dgp.anthologic.exception.functional.usermanagement.UserEditFunctionalException;
-import com.dgp.anthologic.risk.domain.shared.ERisk;
 import com.dgp.anthologic.web.operations.enums.EUIBatchStatus;
 import com.dgp.anthologic.web.operations.enums.EUIStatus;
 import com.dgp.anthologic.web.operations.service.distribution.IBatchSearchResultGridUIService;
@@ -487,18 +486,6 @@
             }
         }
 
-        //Risk Level
-        String[] riskLevels = request.getParameterValues("riskLevel");
-        if (riskLevels != null && riskLevels.length > 0) {
-            List<ERisk> riskList = new ArrayList<ERisk>();
-            for (String riskLevel : riskLevels) {
-                if (!"".equals(riskLevel)) {
-                    riskList.add(ERisk.valueOf(riskLevel));
-                }
-            }
-            searchBatchRequestDto.setRiskLevelList(riskList);
-        }
-
         //Plug-in
         String[] plugins = request.getParameterValues("plugInNames");
         if (plugins != null && plugins.length > 0) {
@@ -565,8 +552,8 @@
     }
 
     @RequestMapping("/distribution/batchesSearchRefresh.view")
-    public String refreshSearchBatchesRequests(HttpServletRequest request, HttpServletResponse response, Model model, @RequestParam
-    String id, Locale locale) throws IllegalAccessException, InvocationTargetException, PaginationControllerException {
+    public String refreshSearchBatchesRequests(HttpServletRequest request, HttpServletResponse response, Model model,
+            @RequestParam String id, Locale locale) throws IllegalAccessException, InvocationTargetException, PaginationControllerException {
 
         // Get cache
         DistributionCache distributionCache = (DistributionCache) beanFactory.getBean(DistributionCache.MODEL_ID);
@@ -577,8 +564,8 @@
     }
 
     @RequestMapping("/distribution/batchesSearchExport.view")
-    public void exportSearchBatchesRequests(HttpServletRequest request, HttpServletResponse response, Model model, @RequestParam
-    String id, Locale locale) throws IllegalAccessException, InvocationTargetException, PaginationControllerException {
+    public void exportSearchBatchesRequests(HttpServletRequest request, HttpServletResponse response, Model model, @RequestParam String id,
+            Locale locale) throws IllegalAccessException, InvocationTargetException, PaginationControllerException {
 
         // Get cache
         DistributionCache distributionCache = (DistributionCache) beanFactory.getBean(DistributionCache.MODEL_ID);
@@ -592,14 +579,14 @@
         String[] colProp = null;
         if (isExport) {
             colProp = new String[] { BATCH_ID, "businessPartner", "weighting", "batchStatus", "highVisible", "keyRelease",
-                    "versionMismatch", "watermark", "batchStep", "error", "errorCode", "errorMessage", "risk.meaning", "lastUpdate",
-                    "timeRemaining", "numberOfProducts", "newRelease", "weight", "priority.meaning", "batchType", "orderingVersion",
-                    "deliveryVersion", "orderIds", "firstOrderDate", "batchStartDate" };
+                    "versionMismatch", "watermark", "batchStep", "error", "errorCode", "errorMessage", "lastUpdate", "timeRemaining",
+                    "numberOfProducts", "newRelease", "weight", "priority.meaning", "batchType", "orderingVersion", "deliveryVersion",
+                    "orderIds", "firstOrderDate", "batchStartDate" };
         } else {
             colProp = new String[] { "checkbox", BATCH_ID, "businessPartner", "weighting", "batchStatus", "highVisible", "keyRelease",
-                    "versionMismatch", "watermark", "batchStep", "errorCode", "errorMessage", "risk.meaning", "lastUpdate",
-                    "timeRemaining", "numberOfProducts", "newRelease", "weight", "priority.meaning", "batchType", "orderingVersion",
-                    "deliveryVersion", "orderIds", "firstOrderDate", "batchStartDate", "DI" };
+                    "versionMismatch", "watermark", "batchStep", "errorCode", "errorMessage", "lastUpdate", "timeRemaining",
+                    "numberOfProducts", "newRelease", "weight", "priority.meaning", "batchType", "orderingVersion", "deliveryVersion",
+                    "orderIds", "firstOrderDate", "batchStartDate", "DI" };
         }
 
         return colProp;
@@ -627,7 +614,6 @@
         titles.put("batchStep", "Action");
         titles.put("errorCode", "Error Code");
         titles.put("errorMessage", "Error Message");
-        titles.put("risk.meaning", "Risk");
 
         if (isExport) {
             titles.put("timeRemaining", "Due");
@@ -641,8 +627,8 @@
             titles.put("error", "Error");
         } else {
             titles.put("timeRemaining", "Time Remaining");
-            titles.put("numberOfProducts", getColumnHeaderTooltip("#Prod",
-                    "Number of products in the batch<br>(Number of products in error)"));
+            titles.put("numberOfProducts",
+                    getColumnHeaderTooltip("#Prod", "Number of products in the batch<br>(Number of products in error)"));
             titles.put("newRelease", getColumnHeaderTooltip("NR", "New Release"));
             titles.put("keyRelease", getColumnHeaderTooltip("KR", "Key Release"));
             titles.put("versionMismatch", getColumnHeaderTooltip("VM", "Version Mismatch"));
@@ -681,8 +667,9 @@
                 }
                 HtmlBuilder html = new HtmlBuilder();
                 if (error != null && deliveryResumable != null) {
-                    html.input().type("checkbox").id(
-                            value.toString() + '_' + error.toString() + '_' + deliveryResumable.toString() + "-"
+                    html.input()
+                            .type("checkbox")
+                            .id(value.toString() + '_' + error.toString() + '_' + deliveryResumable.toString() + "-"
                                     + (batchStatus == null ? "" : batchStatus.toString()) + "-" + deliveryQaStatus.toString());
                     html.onclick(
                             "BatchIdClickAction(" + "'" + value.toString() + '_' + error.toString() + '_' + deliveryResumable.toString()
@@ -746,8 +733,8 @@
                             html.spanEnd();
 
                             String tooltipText = "QA Required";
-                            html.div().style("align:right;float:right;white-space: normal;").styleClass("colQAStatusTooltip").title(
-                                    "" + tooltipText);
+                            html.div().style("align:right;float:right;white-space: normal;").styleClass("colQAStatusTooltip")
+                                    .title("" + tooltipText);
                             html.close();
                             html.img().src(qaErrorImagePath);
                             html.align("middle");
@@ -883,8 +870,8 @@
                     } else {
                         html.div().style("align:center;float:center;width:80px;white-space: normal;");
                         html.close();
-                        html.div().style("align:left;float:left;white-space: normal;padding:2px 2px 0px 1px").styleClass(
-                                "colGridActionTooltip").title("" + tooltipTextSB.toString());
+                        html.div().style("align:left;float:left;white-space: normal;padding:2px 2px 0px 1px")
+                                .styleClass("colGridActionTooltip").title("" + tooltipTextSB.toString());
                         html.close();
                         html.append(actionType);
                         html.nbsp();
@@ -1245,7 +1232,6 @@
         columnSortDisabled.put("batchStep", Boolean.TRUE);
         columnSortDisabled.put("errorCode", Boolean.TRUE);
         columnSortDisabled.put("errorMessage", Boolean.TRUE);
-        columnSortDisabled.put("risk.meaning", Boolean.TRUE);
         columnSortDisabled.put("numberOfProducts", Boolean.TRUE);
         columnSortDisabled.put("timeRemaining", Boolean.TRUE);
         columnSortDisabled.put("newRelease", Boolean.TRUE);
@@ -1307,16 +1293,6 @@
         }
         model.addAttribute("businessPartnerNames", bpNamesSB.toString());
         model.addAttribute("batchType", batchTypeSB.toString());
-        String[] riskLevelArr = request.getParameterValues("riskLevel");
-        StringBuffer riskLevelSB = new StringBuffer();
-        if (riskLevelArr != null) {
-            int riskLevelArrLeng = riskLevelArr.length;
-            for (int i = 0; i < riskLevelArrLeng; i++) {
-                riskLevelSB.append(',');
-                riskLevelSB.append(riskLevelArr[i]);
-            }
-        }
-        model.addAttribute("riskLevel", riskLevelSB.toString());
         model.addAttribute("orderId", request.getParameter("orderId"));
         model.addAttribute("errCode", request.getParameter("errCode"));
         String[] batchPriorityArr = request.getParameterValues("batchPriority");
Index: clients/webapps/src/main/java/com/dgp/anthologic/web/operations/controller/distribution/DistributionController.java
===================================================================
--- clients/webapps/src/main/java/com/dgp/anthologic/web/operations/controller/distribution/DistributionController.java	(revision 84474)
+++ clients/webapps/src/main/java/com/dgp/anthologic/web/operations/controller/distribution/DistributionController.java	(working copy)
@@ -18,7 +18,6 @@
 import javax.servlet.http.HttpServletResponse;
 
 import com.google.gson.Gson;
-import com.google.gson.GsonBuilder;
 import org.springframework.beans.factory.BeanFactory;
 import org.springframework.context.MessageSource;
 import org.springframework.stereotype.Controller;
@@ -65,14 +64,12 @@
 import com.dgp.anthologic.exception.functional.distribution.bpcfg.PTTPublishNotAllowedException;
 import com.dgp.anthologic.exception.functional.usermanagement.UserEditFunctionalException;
 import com.dgp.anthologic.exception.technical.CreateZipFileTechnicalException;
-import com.dgp.anthologic.risk.domain.shared.ERisk;
 import com.dgp.anthologic.view.domain.batch.BatchesOverviewDTO;
 import com.dgp.anthologic.view.domain.batch.BatchesOverviewDetailDTO;
 import com.dgp.anthologic.view.domain.batch.SearchDistributionOverviewRequestDto;
 import com.dgp.anthologic.view.domain.bporder.BpOrderOpsRequestDto;
 import com.dgp.anthologic.view.domain.order.OrdersOverviewDTO;
 import com.dgp.anthologic.view.domain.order.OrdersOverviewDetailDTO;
-import com.dgp.anthologic.web.operations.dto.DistributionMetricsUIDto;
 import com.dgp.anthologic.web.operations.dto.ErrorMessageUIDTO;
 import com.dgp.anthologic.web.operations.dto.MessageUIDTO;
 import com.dgp.anthologic.web.operations.dto.MessageUIDTO.MessageUIDTOMessage;
@@ -396,8 +393,8 @@
      * @throws BusinessException
      */
     @RequestMapping("/distribution/splitBatches.action")
-    public String splitBatch(@RequestParam(BATCH_IDS)
-    String inBatchIds, HttpServletRequest request, Model model, Locale inLocale) throws BusinessException {
+    public String splitBatch(@RequestParam(BATCH_IDS) String inBatchIds, HttpServletRequest request, Model model, Locale inLocale)
+            throws BusinessException {
 
         // Split id string
         List<Long> batchIds = StringUtil.getLongList(inBatchIds);
@@ -445,8 +442,8 @@
     }
 
     @RequestMapping("/distribution/keyReleaseSubmit.action")
-    public String keyReleaseSubmit(@RequestParam("keyReleaseIds")
-    String keyReleaseIds, HttpServletRequest request, Model model, Locale inLocale) {
+    public String keyReleaseSubmit(@RequestParam("keyReleaseIds") String keyReleaseIds, HttpServletRequest request, Model model,
+            Locale inLocale) {
         List<String> keyReleaseList = new ArrayList<String>();
         List<String> keyReleaseValues = new ArrayList<String>();
         List<KeyReleaseResultDto> keyReleaseResultDtoList = new ArrayList<KeyReleaseResultDto>();
@@ -475,8 +472,8 @@
      * @throws BusinessException
      */
     @RequestMapping("/distribution/retryBatches.action")
-    public String retryBatch(@RequestParam(BATCH_IDS)
-    String inBatchIds, HttpServletRequest request, Model model, Locale inLocale) throws BusinessException {
+    public String retryBatch(@RequestParam(BATCH_IDS) String inBatchIds, HttpServletRequest request, Model model, Locale inLocale)
+            throws BusinessException {
 
         // Split id string
         List<Long> batchIds = StringUtil.getLongList(inBatchIds);
@@ -527,9 +524,8 @@
      * @throws BusinessException
      */
     @RequestMapping("/distribution/qaValidateBatches.action")
-    public String qaValidateBatch(@RequestParam(BATCH_IDS)
-    String inBatchIds, @RequestParam("nonQABatchIds")
-    String nonQABatchIds, HttpServletRequest request, Model model, Locale inLocale) throws BusinessException {
+    public String qaValidateBatch(@RequestParam(BATCH_IDS) String inBatchIds, @RequestParam("nonQABatchIds") String nonQABatchIds,
+            HttpServletRequest request, Model model, Locale inLocale) throws BusinessException {
 
         // Split id string
         List<Long> batchIds = StringUtil.getLongList(inBatchIds);
@@ -660,7 +656,6 @@
         model.addAttribute("bpList", commonUIService.getBusinessPartners());
         model.addAttribute("batchTypeList", commonUIService.getBatchTypes());
         model.addAttribute("deliveryTypeList", EDeliveryType.values());
-        model.addAttribute("riskLevelList", ERisk.values());
         model.addAttribute("pluginList", commonUIService.getPlugins());
         model.addAttribute("bpWaterMarkList", commonUIService.getWatermark());
 
@@ -750,7 +745,6 @@
         model.addAttribute("bpList", commonUIService.getBusinessPartners());
         model.addAttribute("batchTypeList", commonUIService.getBatchTypes());
         model.addAttribute("deliveryTypeList", EDeliveryType.values());
-        model.addAttribute("riskLevelList", ERisk.values());
         model.addAttribute("pluginList", commonUIService.getPlugins());
         String scope = DEFAULT_SCOPE;
         if (getDistributionCache().getScope() != null) {
@@ -926,7 +920,6 @@
         }
         model.addAttribute("orderTypes", orderTypeSB.toString());
         model.addAttribute("inError", request.getParameter("inError"));
-        model.addAttribute("inRisky", request.getParameter("inRisky"));
         model.addAttribute("highVis", request.getParameter("highVis"));
         model.addAttribute("highpriority", request.getParameter("highpriority"));
         String[] orderStatus = request.getParameterValues("orderStatus");
@@ -1050,8 +1043,8 @@
      * @throws BusinessException
      */
     @RequestMapping("/distribution/resetBatchUCSStatus.action")
-    public String resetUcsForBatchDetails(@RequestParam("batchId")
-    String inBatchId, HttpServletRequest request, Model model) throws BusinessException {
+    public String resetUcsForBatchDetails(@RequestParam("batchId") String inBatchId, HttpServletRequest request, Model model)
+            throws BusinessException {
 
         distributionService.resetBatchDownloadStatus(Long.valueOf(inBatchId));
 
@@ -1088,8 +1081,8 @@
      * @throws BusinessException
      */
     @RequestMapping("/distribution/resetDeliveryItemUCSStatus.action")
-    public String resetUcsForDeliveryItems(@RequestParam("deliveryItemIds")
-    String deliveryItemIds, HttpServletRequest request, Model model) throws BusinessException {
+    public String resetUcsForDeliveryItems(@RequestParam("deliveryItemIds") String deliveryItemIds, HttpServletRequest request, Model model)
+            throws BusinessException {
         long batchId = getDistributionCache().getBatchId();
         List<Long> resetUcsBatchIdsList = StringUtil.getLongList(deliveryItemIds);
         distributionService.resetDeliveryItemDowloadStatus(batchId, resetUcsBatchIdsList);
@@ -1098,8 +1091,8 @@
     }
 
     @RequestMapping("/distribution/deliveryItemsstopautoretry.action")
-    public String stopAutoRetryForDeliveryItems(@RequestParam("deliveryItemIds")
-    String deliveryItemIds, HttpServletRequest request, Model model, Locale inLocale) throws BusinessException {
+    public String stopAutoRetryForDeliveryItems(@RequestParam("deliveryItemIds") String deliveryItemIds, HttpServletRequest request,
+            Model model, Locale inLocale) throws BusinessException {
 
         List<Long> autoRetryBatchIdsList = StringUtil.getLongList(deliveryItemIds);
         distributionService.deliveryItemsStopAutoRetry(autoRetryBatchIdsList);
@@ -1114,8 +1107,8 @@
     }
 
     @RequestMapping("/distribution/deliveryItemsretry.action")
-    public String retryForDeliveryItems(@RequestParam("deliveryItemIds")
-    String deliveryItemIds, HttpServletRequest request, Model model, Locale inLocale) throws BusinessException {
+    public String retryForDeliveryItems(@RequestParam("deliveryItemIds") String deliveryItemIds, HttpServletRequest request, Model model,
+            Locale inLocale) throws BusinessException {
 
         List<Long> retryBatchIdsList = StringUtil.getLongList(deliveryItemIds);
         Map<String, List<Long>> retryStatus = distributionService.deliveryItemsRetry(retryBatchIdsList);
@@ -1158,9 +1151,8 @@
     }
 
     @RequestMapping("/distribution/fileDownload.action")
-    public void importDeliveryItemFromRepository(@RequestParam("repositoryEntityId")
-    Long inRepositoryEntityId, @RequestParam("filename")
-    String inFilename, HttpServletResponse response) throws Exception {
+    public void importDeliveryItemFromRepository(@RequestParam("repositoryEntityId") Long inRepositoryEntityId,
+            @RequestParam("filename") String inFilename, HttpServletResponse response) throws Exception {
         response.setContentType(XML_CONTENT_TYPE);
         response.setHeader("Content-Disposition", "attachment;filename=\"" + inFilename + "\"");
         // Fix for IE download through HTTPS, cache control and Pragma needs
@@ -1172,8 +1164,7 @@
     }
 
     @RequestMapping("/distribution/binaryFileDownload.action")
-    public String downloadDeliveryItem(@RequestParam("deliveryItemIds")
-    String inDeliveryItemIds, Model model, Locale inLocale) {
+    public String downloadDeliveryItem(@RequestParam("deliveryItemIds") String inDeliveryItemIds, Model model, Locale inLocale) {
         List<Long> deliveryItems = StringUtil.getLongList(inDeliveryItemIds);
         Map<String, List<Long>> downloadStatus = distributionService.downloadDeliveryItems(deliveryItems);
         List<Long> downloadSuccess = downloadStatus.get("deliveryItemDownloadSuccess");
@@ -1220,8 +1211,8 @@
      * @return Distribution BP Catalog Search results
      */
     @RequestMapping("/distribution/BPCatalogs/territories.view")
-    public String renderBPCatalogsTerritories(@RequestParam("catalogProductId")
-    String inCatalogProductId, HttpServletRequest request, Model model) {
+    public String renderBPCatalogsTerritories(@RequestParam("catalogProductId") String inCatalogProductId, HttpServletRequest request,
+            Model model) {
 
         List<CatalogItemDTO> catalogItem = getDistributionCache().getBpCatalogsSearchResult().getResults();
 
@@ -1245,8 +1236,7 @@
      * @throws BusinessException
      */
     @RequestMapping("/distribution/resumeDelivery.action")
-    public String resumeDelivery(@RequestParam("batchId")
-    Long batchId) throws BusinessException {
+    public String resumeDelivery(@RequestParam("batchId") Long batchId) throws BusinessException {
 
         BatchSupervisable batch = distributionService.getBatchSupervisable(batchId);
         distributionService.resumeDelivery(batch);
@@ -1261,8 +1251,7 @@
      * @throws BusinessException
      */
     @RequestMapping("/distribution/resumeDeliveries.action")
-    public String resumeDeliveries(@RequestParam(BATCH_IDS)
-    String inBatchIds, Model model, Locale inLocale) throws BusinessException {
+    public String resumeDeliveries(@RequestParam(BATCH_IDS) String inBatchIds, Model model, Locale inLocale) throws BusinessException {
         List<Long> batchIds = StringUtil.getLongList(inBatchIds);
         String messageTitle = messageSource.getMessage("operations.distribution.batches.resumeBatches", null, inLocale);
         MessageUIDTO errorMessage = null;
@@ -1358,9 +1347,8 @@
      * Download Excel for KeyRelease
      */
     @RequestMapping("/distribution/downloadExcel.action")
-    public void downloadKeyReleaseExcel(@RequestParam("fileId")
-    Long fileId, @RequestParam("fileName")
-    String fileName, HttpServletResponse response, Model model, Locale locale) throws Exception {
+    public void downloadKeyReleaseExcel(@RequestParam("fileId") Long fileId, @RequestParam("fileName") String fileName,
+            HttpServletResponse response, Model model, Locale locale) throws Exception {
 
         StringBuffer sb = new StringBuffer();
         sb.append("attachment;filename=\"");
@@ -1394,9 +1382,8 @@
      * @return
      */
     @RequestMapping("/distribution/auditTrailEventDetails.view")
-    public String renderAuditTrailEventDetails(@RequestParam("auditId")
-    Long inAuditId, @RequestParam("actionType")
-    String actionType, HttpServletRequest request, Model inModel) {
+    public String renderAuditTrailEventDetails(@RequestParam("auditId") Long inAuditId, @RequestParam("actionType") String actionType,
+            HttpServletRequest request, Model inModel) {
         AuditDetailDTO auditDetailDTO = distributionService.getAuditDetails(inAuditId);
 
         List<String> actionTypeList = StringUtil.getStringList(messageSource.getMessage(actionType, null, request.getLocale()));
@@ -1432,8 +1419,7 @@
      * @throws IOException
      */
     @RequestMapping("/distribution/searchBPs.action")
-    public String searchBPs(@RequestParam("q")
-    String inQuery, Model inModel, HttpServletResponse inResponse) throws IOException {
+    public String searchBPs(@RequestParam("q") String inQuery, Model inModel, HttpServletResponse inResponse) throws IOException {
         List<Item> selectedBPsList = commonUIService.retrieveBPs(inQuery);
         String jsonString = commonUIService.mapListToJSONStringWithName(selectedBPsList);
         inResponse.setCharacterEncoding("UTF-8");
@@ -1472,8 +1458,7 @@
     }
 
     @RequestMapping("/distribution/retrieveEventTypesByCategory.action")
-    public String retrieveEventTypesByCategory(@RequestParam("eventCategory")
-    String inEventCategory, Model inModel) {
+    public String retrieveEventTypesByCategory(@RequestParam("eventCategory") String inEventCategory, Model inModel) {
         if ("".equals(inEventCategory)) {
             inModel.addAttribute("eventTypes", EActionType.values());
         } else {
@@ -1490,8 +1475,7 @@
      * @return actionResponse page
      */
     @RequestMapping("/distribution/cancelBatches.action")
-    public String cancelBatches(@RequestParam(BATCH_IDS)
-    String inBatchIds, Model inModel, Locale inLocale) {
+    public String cancelBatches(@RequestParam(BATCH_IDS) String inBatchIds, Model inModel, Locale inLocale) {
         List<Long> batchIds = StringUtil.getLongList(inBatchIds);
         Map<Long, Exception> cancelledBatches = distributionService.cancelBatches(batchIds);
         String messageTitle = messageSource.getMessage("operations.distribution.batches.cancelBatch", null, inLocale);
@@ -1517,17 +1501,15 @@
 
     /**
      * the DI Logs in JSON format from batch Details Screen.
-     *
+     * 
      * @param batchId
      * @param response
      * @throws IOException
      * @throws CreateZipFileTechnicalException
      */
-    @RequestMapping("/distribution/displayDILogs.action")
-    public void displayDILogsFromBatchDetails(@RequestParam("batchId")
-                                             Long batchId, @RequestParam("bpCode")
-                                             String bpCode, @RequestParam("dueDate")
-                                             String dueDateStr, HttpServletResponse response) throws CreateZipFileTechnicalException, IOException {
+    @RequestMapping("/distribution/importDILogs.action")
+    public void importDILogsFromBatchDetails(@RequestParam("batchId") Long batchId, @RequestParam("bpCode") String bpCode,
+            @RequestParam("dueDate") String dueDateStr, HttpServletResponse response) throws CreateZipFileTechnicalException, IOException {
         SimpleDateFormat inDateFormat = new SimpleDateFormat(DDMM_DATE_FORMAT_KEY);
         Date dueDate = new Date();
         try {
@@ -1552,12 +1534,10 @@
      * @throws IOException
      * @throws CreateZipFileTechnicalException
      */
-    @RequestMapping("/distribution/deliveryItems/displayDILogs.action")
-    public void displayDILogsFromDIScreen(@RequestParam("deliveryItemIds")
-    String inDeliveryItemIds, @RequestParam("batchId")
-    Long batchId, @RequestParam("bpCode")
-    String bpCode, @RequestParam("dueDate")
-    String dueDateStr, HttpServletResponse response) throws CreateZipFileTechnicalException, IOException {
+    @RequestMapping("/distribution/deliveryItems/importDILogs.action")
+    public void importDILogsFromDIScreen(@RequestParam("deliveryItemIds") String inDeliveryItemIds, @RequestParam("batchId") Long batchId,
+            @RequestParam("bpCode") String bpCode, @RequestParam("dueDate") String dueDateStr, HttpServletResponse response)
+            throws CreateZipFileTechnicalException, IOException {
 
         List<Long> deliveryItems = StringUtil.getLongList(inDeliveryItemIds);
 
@@ -1580,31 +1560,6 @@
     }
 
     /**
-     * Render Distribution Settings
-     * 
-     * @param inRequest
-     * @return
-     */
-    @RequestMapping("/distribution/renderDistributionMetrics.view")
-    public String renderDistributionMetrics(HttpServletRequest inRequest, Model inModel, Locale inLocale) {
-        DistributionMetricsUIDto distributionMetricsUIDto = distributionService.loadDistributionMetrics();
-        inModel.addAttribute("distributionMetrics", distributionMetricsUIDto);
-        return "distribution/distributionSettings";
-    }
-
-    /**
-     * Update Distribution Metics
-     * 
-     * @param inRequest
-     * @return
-     */
-    @RequestMapping("/distribution/updateDistributionMetrics.action")
-    public String updateDistributionMetrics(HttpServletRequest inRequest, Model inModel, Locale inLocale) {
-        distributionService.updateDistributionMetrics(inRequest);
-        return ACTION_RESPONSE_PAGE;
-    }
-
-    /**
      * Render BP Orders
      * 
      * @param inRequest
@@ -1704,7 +1659,6 @@
     public String renderOldBpOrders(HttpServletRequest inRequest, Model inModel, Locale inLocale) {
         inModel.addAttribute("bpOrderStatusList", BpOrderOpsRequestDto.EBpOrderStatus.values());
         inModel.addAttribute("bpOrderFinishedStatusList", BpOrderOpsRequestDto.EBpOrderFinishedStatus.values());
-        inModel.addAttribute("riskLevelList", ERisk.values());
         List<Item> usersList = commonUIService.getUserList();
         inModel.addAttribute("usersList", usersList);
         inModel.addAttribute("currentUserId", userContextUtils.getCurrentUser().getId());
@@ -1745,17 +1699,6 @@
                 inModel.addAttribute("statusFromOrderDelivered", enumList.get(1));
             }
 
-            String[] bpOrderRisksArr = inRequest.getParameterValues("bpOrderRisk");
-            StringBuffer bpOrderRisksSB = new StringBuffer();
-            if (bpOrderRisksArr != null) {
-                int bpNamesArrLeng = bpOrderRisksArr.length;
-                for (int i = 0; i < bpNamesArrLeng; i++) {
-                    bpOrderRisksSB.append(',');
-                    bpOrderRisksSB.append(bpOrderRisksArr[i]);
-                }
-            }
-            inModel.addAttribute("bpOrderRisks", bpOrderRisksSB.toString());
-
             String[] bpOrderStatusArr = inRequest.getParameterValues("bpOrderStatuses");
             StringBuffer bpOrderStatusSB = new StringBuffer();
             if (bpOrderStatusArr != null) {
@@ -1810,8 +1753,8 @@
      * 
      */
     @RequestMapping("/distribution/retryBpOrders.action")
-    public String retryBpOrders(@RequestParam("Ids")
-    String inIds, HttpServletRequest inRequest, HttpServletResponse inResponse, Model model, Locale inLocale) {
+    public String retryBpOrders(@RequestParam("Ids") String inIds, HttpServletRequest inRequest, HttpServletResponse inResponse,
+            Model model, Locale inLocale) {
         List<Long> idsList = StringUtil.getLongList(inIds);
 
         // Split id string
@@ -1867,8 +1810,7 @@
      * @throws IOException
      */
     @RequestMapping("/distribution/searchBPsInBpOrders.action")
-    public String searchBPsInBpOrders(@RequestParam("q")
-    String inQuery, Model inModel, HttpServletResponse inResponse) throws IOException {
+    public String searchBPsInBpOrders(@RequestParam("q") String inQuery, Model inModel, HttpServletResponse inResponse) throws IOException {
         List<Item> selectedBPsList = commonUIService.retrieveBPs(inQuery);
         String jsonString = commonUIService.mapListToJSONString(selectedBPsList);
         inResponse.setCharacterEncoding("UTF-8");
@@ -1881,8 +1823,8 @@
      * @throws BusinessException
      */
     @RequestMapping("/distribution/resetBatches.action")
-    public String resetBatch(@RequestParam(BATCH_IDS)
-    String inBatchIds, HttpServletRequest request, Model model, Locale inLocale) throws BusinessException {
+    public String resetBatch(@RequestParam(BATCH_IDS) String inBatchIds, HttpServletRequest request, Model model, Locale inLocale)
+            throws BusinessException {
 
         // Split id string
         List<Long> batchIds = StringUtil.getLongList(inBatchIds);
@@ -1953,8 +1895,8 @@
      * @throws BusinessException
      */
     @RequestMapping("/distribution/putOnTopOfQueueBatches.action")
-    public String putOnTopOfQueueBatch(@RequestParam(BATCH_IDS)
-    String inBatchIds, HttpServletRequest request, Model model, Locale inLocale) throws BusinessException {
+    public String putOnTopOfQueueBatch(@RequestParam(BATCH_IDS) String inBatchIds, HttpServletRequest request, Model model, Locale inLocale)
+            throws BusinessException {
 
         // Split id string
         List<Long> batchIds = StringUtil.getLongList(inBatchIds);
@@ -2048,8 +1990,7 @@
      * @return
      */
     @RequestMapping("/distribution/ptt/detailsView.view")
-    public String renderPTTViewDetails(@RequestParam("pttViewId")
-    String pttIdString, HttpServletRequest request, Model model) {
+    public String renderPTTViewDetails(@RequestParam("pttViewId") String pttIdString, HttpServletRequest request, Model model) {
         PTTsCache pttsCache = (PTTsCache) beanFactory.getBean(PTTsCache.MODEL_ID);
 
         Long pttId = Long.valueOf(pttIdString);
@@ -2208,9 +2149,8 @@
      * @return
      */
     @RequestMapping("/distribution/ptt/detailsComponentView.view")
-    public String renderPTTComponentViewDetails(@RequestParam("productType")
-    String productTypeId, @RequestParam("componentType")
-    String componentTypeId, HttpServletRequest request, Model model) {
+    public String renderPTTComponentViewDetails(@RequestParam("productType") String productTypeId,
+            @RequestParam("componentType") String componentTypeId, HttpServletRequest request, Model model) {
         PTTsCache pttsCache = (PTTsCache) beanFactory.getBean(PTTsCache.MODEL_ID);
 
         PTTVersionDto activePTT = pttsCache.getPlateformTechnicalTemplate().getActivePTT();
@@ -2248,8 +2188,8 @@
      * @param response
      */
     @RequestMapping("/distribution/ptt/saveNamePTT.action")
-    public String saveNamePTT(@RequestParam("pttNewName")
-    String pttNewNameString, HttpServletRequest request, HttpServletResponse response, Model model, Locale locale) {
+    public String saveNamePTT(@RequestParam("pttNewName") String pttNewNameString, HttpServletRequest request,
+            HttpServletResponse response, Model model, Locale locale) {
         PTTsCache pttsCache = (PTTsCache) beanFactory.getBean(PTTsCache.MODEL_ID);
 
         PlatformTechnicalTemplateDto ptt = pttsCache.getPlateformTechnicalTemplate();
@@ -2277,8 +2217,8 @@
      * @param response
      */
     @RequestMapping("/distribution/ptt/overviewExtract.action")
-    public void exportAllPTTsExcel(@RequestParam("selectedPTTs")
-    String selectedPTTsString, HttpServletRequest request, HttpServletResponse response, Model model, Locale locale) {
+    public void exportAllPTTsExcel(@RequestParam("selectedPTTs") String selectedPTTsString, HttpServletRequest request,
+            HttpServletResponse response, Model model, Locale locale) {
         SimpleDateFormat dateFormat = new SimpleDateFormat(YMD_ML_EXPORT_DATE_FORMAT_KEY);
         Calendar calendar = Calendar.getInstance();
 
@@ -2313,8 +2253,8 @@
      * @param response
      */
     @RequestMapping("/distribution/ptt/overviewDelete.action")
-    public String deleteSelectedPTTs(@RequestParam("selectedPTTs")
-    String selectedPTTsString, HttpServletRequest request, HttpServletResponse response, Model model, Locale locale) {
+    public String deleteSelectedPTTs(@RequestParam("selectedPTTs") String selectedPTTsString, HttpServletRequest request,
+            HttpServletResponse response, Model model, Locale locale) {
         PTTsCache pttsCache = (PTTsCache) beanFactory.getBean(PTTsCache.MODEL_ID);
 
         List<String> selectedPTTs = StringUtil.getSeparatedStringList(selectedPTTsString);
@@ -2368,8 +2308,8 @@
      */
 
     @RequestMapping("/distribution/ptt/overviewCreate.action")
-    public String createPTT(@RequestParam("pttNewName")
-    String pttNewName, HttpServletRequest request, HttpServletResponse response, Model model, Locale locale) {
+    public String createPTT(@RequestParam("pttNewName") String pttNewName, HttpServletRequest request, HttpServletResponse response,
+            Model model, Locale locale) {
         try {
             distributionService.createPTT(pttNewName);
 
@@ -2395,8 +2335,8 @@
      * @param response
      */
     @RequestMapping("/distribution/ptt/overviewEditNew.action")
-    public String editNewPTT(@RequestParam("pttNewName")
-    String pttNewName, HttpServletRequest request, HttpServletResponse response, Model model, Locale locale) {
+    public String editNewPTT(@RequestParam("pttNewName") String pttNewName, HttpServletRequest request, HttpServletResponse response,
+            Model model, Locale locale) {
         PTTsCache pttsCache = (PTTsCache) beanFactory.getBean(PTTsCache.MODEL_ID);
 
         for (PTTOverviewDto pttOverviewDto : pttsCache.getPlateformTechnicalTemplatesList()) {
@@ -2420,8 +2360,7 @@
      * @throws IOException
      */
     @RequestMapping("/distribution/searchProducts.action")
-    public String searchProducts(@RequestParam("q")
-    String inQuery, Model inModel, HttpServletResponse inResponse) throws IOException {
+    public String searchProducts(@RequestParam("q") String inQuery, Model inModel, HttpServletResponse inResponse) throws IOException {
         Set<ProductTypeTechnicalTemplateDto> pttProductsTemplateList = new HashSet<ProductTypeTechnicalTemplateDto>();
         PTTsCache pttsCache = (PTTsCache) beanFactory.getBean(PTTsCache.MODEL_ID);
         List<Item> selectedProductList = commonUIService.retrieveProductsIds(inQuery);
@@ -2455,8 +2394,7 @@
      * @throws IOException
      */
     @RequestMapping("/distribution/searchMainMLs.action")
-    public String searchMainMLs(@RequestParam("q")
-    String inQuery, Model inModel, HttpServletResponse inResponse) throws IOException {
+    public String searchMainMLs(@RequestParam("q") String inQuery, Model inModel, HttpServletResponse inResponse) throws IOException {
         PTTsCache pttsCache = (PTTsCache) beanFactory.getBean(PTTsCache.MODEL_ID);
         List<Item> selectedMLsList = commonUIService.retrieveMLs(pttsCache, inQuery);
         String jsonString = commonUIService.mapListToJSONStringWithId(selectedMLsList);
@@ -2475,8 +2413,7 @@
      * @throws IOException
      */
     @RequestMapping("/distribution/searchOptionalMLs.action")
-    public String searchOptionalMLs(@RequestParam("q")
-    String inQuery, Model inModel, HttpServletResponse inResponse) throws IOException {
+    public String searchOptionalMLs(@RequestParam("q") String inQuery, Model inModel, HttpServletResponse inResponse) throws IOException {
         PTTsCache pttsCache = (PTTsCache) beanFactory.getBean(PTTsCache.MODEL_ID);
         List<Item> selectedMLsList = commonUIService.retrieveExistingMLs(pttsCache, inQuery);
         String jsonString = commonUIService.mapListToJSONStringWithId(selectedMLsList);
@@ -2699,8 +2636,7 @@
      * @throws IOException
      */
     @RequestMapping("/distribution/searchSharedMLs.action")
-    public String searchSharedMLs(@RequestParam("q")
-    String inQuery, Model inModel, HttpServletResponse inResponse) throws IOException {
+    public String searchSharedMLs(@RequestParam("q") String inQuery, Model inModel, HttpServletResponse inResponse) throws IOException {
         PTTsCache pttsCache = (PTTsCache) beanFactory.getBean(PTTsCache.MODEL_ID);
         List<Item> selectedMLsList = commonUIService.retrieveMLs(pttsCache, inQuery);
         String jsonString = commonUIService.mapListToJSONStringWithName(selectedMLsList);
@@ -2783,8 +2719,8 @@
      * @throws IOException
      */
     @RequestMapping("/distribution/ptt/pluginChange.action")
-    public String pluginChange(@RequestParam("pluginId")
-    String pluginId, Model model, HttpServletRequest inRequest, HttpServletResponse inResponse) throws IOException {
+    public String pluginChange(@RequestParam("pluginId") String pluginId, Model model, HttpServletRequest inRequest,
+            HttpServletResponse inResponse) throws IOException {
 
         PTTsCache pttsCache = (PTTsCache) beanFactory.getBean(PTTsCache.MODEL_ID);
 
@@ -3085,8 +3021,7 @@
      * @return
      */
     @RequestMapping("/distribution/ptt/publish.action")
-    public String publishPTTDetails(@RequestParam("pttId")
-    String pttIdString, HttpServletRequest request, Model model, Locale inLocale) {
+    public String publishPTTDetails(@RequestParam("pttId") String pttIdString, HttpServletRequest request, Model model, Locale inLocale) {
         String pttName = request.getParameter("name");
 
         Long pttId = Long.valueOf(pttIdString);
@@ -3121,8 +3056,8 @@
      * @return
      */
     @RequestMapping("/distribution/ptt/saveandValidateptt.action")
-    public String saveAndValidatePTTDetails(@RequestParam("pttValidateId")
-    String pttIdString, HttpServletRequest request, Model model, Locale inLocale) {
+    public String saveAndValidatePTTDetails(@RequestParam("pttValidateId") String pttIdString, HttpServletRequest request, Model model,
+            Locale inLocale) {
 
         Long pttId = Long.valueOf(pttIdString);
 
@@ -3453,8 +3388,7 @@
      * @param stackTrace
      */
     @RequestMapping("/distribution/messagePopUp.view")
-    public String renderbatchDetailsStackTrace(@RequestParam("upc")
-    String upc, Model model) {
+    public String renderbatchDetailsStackTrace(@RequestParam("upc") String upc, Model model) {
 
         String errorMessage = null;
         List<ErrorMessageUIDTO> resultList = getDistributionCache().getErrorBatchDetails();
@@ -3500,9 +3434,8 @@
      * @param Long BatchId
      */
     @RequestMapping("/distribution/selectiveBatchSplit.do")
-    public String selectiveBatchSplit(@RequestParam("syncIds")
-    String syncIds, @RequestParam("batchId")
-    Long batchId, Model model, HttpServletRequest request) {
+    public String selectiveBatchSplit(@RequestParam("syncIds") String syncIds, @RequestParam("batchId") Long batchId, Model model,
+            HttpServletRequest request) {
 
         MessageUIDTO errorMsg = null;
         String message;
@@ -3514,16 +3447,16 @@
             distributionService.selectiveBatchSplit(bacthSupervisable, syncInstrIdList);
         } catch (BusinessException e) {
             StringBuilder sb = new StringBuilder();
-            sb.append(messageSource.getMessage("operations.distribution.batcheDetails.product.splitBatch.failure", null, request
-                    .getLocale()));
+            sb.append(messageSource.getMessage("operations.distribution.batcheDetails.product.splitBatch.failure", null,
+                    request.getLocale()));
             sb.append(e.getMessage());
             errorMsg = new MessageUIDTO(MessageUIDTO.Type.ERROR, msgTitle, sb.toString());
             isError = true;
         }
 
         if (!isError) {
-            message = messageSource.getMessage("operations.distribution.batcheDetails.product.splitBatch.success", null, request
-                    .getLocale());
+            message = messageSource.getMessage("operations.distribution.batcheDetails.product.splitBatch.success", null,
+                    request.getLocale());
             errorMsg = new MessageUIDTO(MessageUIDTO.Type.CONFIRMATION, msgTitle, message);
         }
         model.addAttribute(OpsConstants.ERRORMSG, errorMsg);
Index: clients/webapps/src/main/resources/META-INF/management/jobs.cfg.xml
===================================================================
--- clients/webapps/src/main/resources/META-INF/management/jobs.cfg.xml	(revision 84474)
+++ clients/webapps/src/main/resources/META-INF/management/jobs.cfg.xml	(working copy)
@@ -19,9 +19,6 @@
 	
 	<job enabled="true" transactional="false"  group="am" name="refreshProductTasksSearchView" cron="0 0 */1 * * ?" beanName="refreshProductTasksSearchMaterializedViewJob" />
 
-	<!-- risk jobs -->
-	<job enabled="true" transactional="false" group="risk" name="riskComupation" cron="0 */1 * * * ?" beanName="riskComupationJob" maxInstancesHistory="10" />
-	
 	<job enabled="true" transactional="false" group="batchPrv" 	name="batchPrvUpdateBatchSyncStatus" cron="*/30 * * * * ?" beanName="batchProvisioningJob" maxDuration="110000"/>
 	<job enabled="true" transactional="false" group="batchPrv" 	name="mlUpdateEventReportProcessingJob" cron="0 */1 * * * ?" beanName="mlUpdateEventReportProcessingJob" />
 	<job enabled="true" transactional="false" group="batchPrv"  name="orphanSIPRCanceller" cron="0 0 */12 * * ?" beanName="orphanSIPRCancellerJob" />
@@ -53,9 +50,6 @@
 	<job enabled="true" transactional="true" group="distribution" name="ucsOrderExpiry" priority="1" cron="0 */2 * * * ?" beanName="orderExpirationJob" maxInstancesHistory="10" />
 	<job enabled="true" transactional="true" group="distribution" name="ucsPurgeRepo" priority="1" cron="0 */2 * * * ?" beanName="purgeRepoJob" maxInstancesHistory="10" />
 
-	<job enabled="true" transactional="false" group="risk" name="highRiskUpdater" cron="0 */30 * * * ?" beanName="highPriorityBatchRiskUpdaterJob" maxInstancesHistory="10" />
-	<job enabled="true" transactional="false" group="risk" name="mediumAndLowRiskUpdater" cron="0 0 * * * ?" beanName="mediumAndLowPriorityBatchRiskUpdaterJob" maxInstancesHistory="10" />
-	
 	<job enabled="true" transactional="true" group="orderprocess" name="orderProcessMessage2" cron="0 */5 * * * ?" beanName="orderProcessMessageJob"  />
 
 	<job enabled="true" transactional="false" group="pricing" name="gpsSyncJob" cron="*/5 * * * * ?" beanName="gpsSyncJob"/>
Index: clients/webapps/src/main/resources/beanRefContext.xml
===================================================================
--- clients/webapps/src/main/resources/beanRefContext.xml	(revision 84474)
+++ clients/webapps/src/main/resources/beanRefContext.xml	(working copy)
@@ -21,7 +21,6 @@
                 <value>classpath*:META-INF/spring/assetmgt-beans.xml</value>
                 <value>classpath*:META-INF/spring/usermgt-beans.xml</value>
                 <value>classpath*:META-INF/spring/environmentmgt-beans.xml</value>
-                <value>classpath*:META-INF/spring/risk/beans.xml</value>
                 <value>classpath*:META-INF/spring/distribution-view/beans.xml</value>
                 <value>classpath*:META-INF/spring/provisioning-beans.xml</value>
                 <!--  
Index: products/bp-config/integration-tests/src/test/resources/com/dgp/anthologic/bpcfg/services/DefaultBPPlatformServiceTest.xml
===================================================================
--- products/bp-config/integration-tests/src/test/resources/com/dgp/anthologic/bpcfg/services/DefaultBPPlatformServiceTest.xml	(revision 84474)
+++ products/bp-config/integration-tests/src/test/resources/com/dgp/anthologic/bpcfg/services/DefaultBPPlatformServiceTest.xml	(working copy)
@@ -181,6 +181,4 @@
 	<DST_DELIVERY_TRANSACTION/>
 	<DST_AUDIT_TRAIL/>	
 	
-	<RSK_BATCH_RISK/>
-	<RSK_REQUEST/>	
 </dataset>
Index: products/batch-provisioning/services/src/test/resources/application-config.xml
===================================================================
--- products/batch-provisioning/services/src/test/resources/application-config.xml	(revision 84474)
+++ products/batch-provisioning/services/src/test/resources/application-config.xml	(working copy)
@@ -37,7 +37,6 @@
 				<value>classpath*:META-INF/persistence/transcoder/hibernate.cfg.xml</value>                  
 				<value>classpath*:META-INF/persistence/ingestion/hibernate.cfg.xml</value>
 				<value>classpath:/com/dgp/anthologic/batch/prv/dao/hibernate/hibernate.cfg.xml</value>
-                <value>classpath*:META-INF/persistence/risk/hibernate.cfg.xml</value>
                 <value>classpath*:META-INF/persistence/distribution/hibernate.cfg.xml</value>
                 <value>classpath*:META-INF/persistence/transfert/hibernate.cfg.xml</value>
             </list>
Index: products/distribution/api/src/main/java/com/dgp/anthologic/distribution/order/bulk/SearchBatchesRequestDto.java
===================================================================
--- products/distribution/api/src/main/java/com/dgp/anthologic/distribution/order/bulk/SearchBatchesRequestDto.java	(revision 84474)
+++ products/distribution/api/src/main/java/com/dgp/anthologic/distribution/order/bulk/SearchBatchesRequestDto.java	(working copy)
@@ -13,7 +13,6 @@
 import com.dgp.anthologic.core.model.domain.deliveryItem.EDownloadStatus;
 import com.dgp.anthologic.distribution.application.operation.batch.dto.enums.EOpsOverviewScope;
 import com.dgp.anthologic.distribution.delivery.dto.EDeliveryType;
-import com.dgp.anthologic.risk.domain.shared.ERisk;
 
 import edu.emory.mathcs.backport.java.util.Arrays;
 
@@ -79,7 +78,6 @@
     private Boolean isNewRelease;
     private Long numProductFrom;
     private Long numProductTo;
-    private List<ERisk> riskLevelList;
     private Boolean haveIssues;
     private Date orderDateFrom;
     private Date orderDateTo;
@@ -458,14 +456,6 @@
         return useMyBps;
     }
 
-    public List<ERisk> getRiskLevelList() {
-        return riskLevelList;
-    }
-
-    public void setRiskLevelList(List<ERisk> inRiskLevelList) {
-        this.riskLevelList = inRiskLevelList;
-    }
-
     public Boolean getHaveIssues() {
         return haveIssues;
     }
Index: products/distribution/api/src/main/java/com/dgp/anthologic/distribution/order/bulk/BatchResultDto.java
===================================================================
--- products/distribution/api/src/main/java/com/dgp/anthologic/distribution/order/bulk/BatchResultDto.java	(revision 84474)
+++ products/distribution/api/src/main/java/com/dgp/anthologic/distribution/order/bulk/BatchResultDto.java	(working copy)
@@ -12,7 +12,6 @@
 import com.dgp.anthologic.core.enums.EBatchStatus.ClientState;
 import com.dgp.anthologic.core.enums.EBatchStatus.TechnicalState;
 import com.dgp.anthologic.core.model.domain.deliveryItem.EDownloadStatus;
-import com.dgp.anthologic.risk.domain.shared.ERisk;
 
 public class BatchResultDto {
 
@@ -55,7 +54,6 @@
     private boolean deliveryResumable;
     // deliveryStartDate
     private Date batchStartDate;
-    private ERisk risk;
     private int weighting;
     private int bpRanking;
     // FIX TASK AB-12660 : Add plugin Name in Batch Details
@@ -435,14 +433,6 @@
         this.ucsStatus = ucsStatus;
     }
 
-    public void setRisk(ERisk inRisk) {
-        this.risk = inRisk;
-    }
-
-    public ERisk getRisk() {
-        return risk;
-    }
-
     public void setStartDate(Date inStartDate) {
         this.startDate = inStartDate;
     }
Index: products/distribution/api/pom.xml
===================================================================
--- products/distribution/api/pom.xml	(revision 84474)
+++ products/distribution/api/pom.xml	(working copy)
@@ -40,11 +40,6 @@
 		</dependency>
 		<dependency>
 			<groupId>com.dgp.anthologic</groupId>
-			<artifactId>anthologic-products-risk-management-services</artifactId>
-			<version>${pom.version}</version>
-		</dependency>			
-		<dependency>
-			<groupId>com.dgp.anthologic</groupId>
 			<artifactId>anthologic-commons-error-logging-api</artifactId>
 			<version>${pom.version}</version>
 		</dependency>
Index: products/distribution/integration-tests/src/main/java/com/dgp/anthologic/risk/domain/request/impl/stub/MockRiskRequestService.java
===================================================================
--- products/distribution/integration-tests/src/main/java/com/dgp/anthologic/risk/domain/request/impl/stub/MockRiskRequestService.java	(revision 84474)
+++ products/distribution/integration-tests/src/main/java/com/dgp/anthologic/risk/domain/request/impl/stub/MockRiskRequestService.java	(working copy)
@@ -1,18 +0,0 @@
-package com.dgp.anthologic.risk.domain.request.impl.stub;
-
-import java.util.List;
-
-import com.dgp.anthologic.risk.domain.request.RiskRequest;
-import com.dgp.anthologic.risk.domain.request.impl.DefaultRiskRequestService;
-
-public class MockRiskRequestService extends DefaultRiskRequestService {
-
-    @Override
-    public void submitRequests(List<? extends RiskRequest> in_requests) {
-    }
-
-    @Override
-    public void submitRequest(RiskRequest request) {
-    }
-
-}
Index: products/distribution/integration-tests/src/test/resources/risk/application-config.xml
===================================================================
--- products/distribution/integration-tests/src/test/resources/risk/application-config.xml	(revision 84474)
+++ products/distribution/integration-tests/src/test/resources/risk/application-config.xml	(working copy)
@@ -17,7 +17,6 @@
    <import resource="classpath:META-INF/spring/transfert/beans.xml"/>
    <import resource="classpath:META-INF/spring/cache/beans.xml"/>
    
-	<!-- risk management beans -->
 	<bean id="userContextUtils" class="com.dgp.anthologic.bpcfg.utils.validation.misc.MockUserContextUtils" >
 		<property name="authenticationService" ref="authenticationService" />
 	</bean>
@@ -26,12 +25,10 @@
 	<bean id="abstractServiceImpl" class="com.dgp.anthologic.distribution.shared.AbstractServiceImpl" abstract="true" >
 		<property name="serviceLogger" ref="distributionServiceLogger" />
 	</bean>
-	<import resource="classpath*:META-INF/spring/batch-risk-services.xml" />
-	<import resource="classpath*:META-INF/spring/risk/beans.xml"/>
-	
+
 	<!-- Internal Test services -->
 	<!-- import resource="classpath:com/dgp/anthologic/distribution/internal-test-services.xml"/-->
-	
+
 	<!-- You may choose stub or real services, depending on you want to test with real services or fake ones (mocks). -->
 	<!--  Stub external services -->
 	<!--import resource="classpath:com/dgp/anthologic/distribution/external-stub-services.xml"/-->
Index: products/distribution/integration-tests/src/test/resources/com/dgp/anthologic/distribution/bporder/impl/ProcessBpConfigBulkHardUpgradeIntegrationTest.xml
===================================================================
--- products/distribution/integration-tests/src/test/resources/com/dgp/anthologic/distribution/bporder/impl/ProcessBpConfigBulkHardUpgradeIntegrationTest.xml	(revision 84474)
+++ products/distribution/integration-tests/src/test/resources/com/dgp/anthologic/distribution/bporder/impl/ProcessBpConfigBulkHardUpgradeIntegrationTest.xml	(working copy)
@@ -2,44 +2,42 @@
 <dataset>
 	<!-- COR_GLOBAL_CONFIG ID="1" PARTNER_CODE="TESTAppleEuropeV1" DELIVERY_CONFIG_ID="20000000277" ORDER_CONFIG_ID="20000000044" CREATION_DATE="2008-10-22 12:00:00.0" VERSION="2"/-->
 	<!-- COR_GLOBAL_CONFIG ID="2" PARTNER_CODE="TESTAppleEuropeV2" DELIVERY_CONFIG_ID="20000000171" ORDER_CONFIG_ID="20000000044" CREATION_DATE="2008-10-22 12:00:00.0" VERSION="3"/-->
-	
+
 	<COR_GLOBAL_CONFIG ID="1" PARTNER_CODE="TESTAppleEuropeV1" DELIVERY_CONFIG_ID="14691" ORDER_CONFIG_ID="1666" CREATION_DATE="2008-10-22 12:00:00.0" VERSION="2"/>
-	<COR_GLOBAL_CONFIG ID="2" PARTNER_CODE="TESTAppleEuropeV2" DELIVERY_CONFIG_ID="14877" ORDER_CONFIG_ID="1666" CREATION_DATE="2008-10-22 12:00:00.0" VERSION="3"/>	
-			
-	<COR_CURRENT_CONFIG/>		
-	
-	<!-- distribution -->		
+	<COR_GLOBAL_CONFIG ID="2" PARTNER_CODE="TESTAppleEuropeV2" DELIVERY_CONFIG_ID="14877" ORDER_CONFIG_ID="1666" CREATION_DATE="2008-10-22 12:00:00.0" VERSION="3"/>
+
+	<COR_CURRENT_CONFIG/>
+
+	<!-- distribution -->
 	<DST_SELECTION id="210683" SELECTION_STATUS="CREATED" PARTNER_CONFIG_ID="380202"/>
 	<DST_PRODUCT_LIST ID="140385" SELECTION_ID="210683" INDX="0" NAME="POP_UK" />
-	
+
 	<DST_ORDER />
-	<DST_ORDER_CONFIG_SET />	
-	<DST_SELECTED_PRODUCT /> 	
+	<DST_ORDER_CONFIG_SET />
+	<DST_SELECTED_PRODUCT />
 	<DST_DAILY_PLANNING />
 	<DST_PARTNER_ORDER />
 	<DST_CATALOG_ITEM />
 	<DST_CATALOG_ITEM_COUNTRY_R/>
-	<DST_CATALOG_ITEM_HISTORY/>  
+	<DST_CATALOG_ITEM_HISTORY/>
 	<DST_BATCH />
-	<DST_BATCH_ACTION />	
-	<DST_CAPACITY_LEASE/>  
+	<DST_BATCH_ACTION />
+	<DST_CAPACITY_LEASE/>
 	<DST_SYNC_INSTRUCTION />
 	<DST_SYNC_INSTRUCTION_LOG />
 	<DST_SI_PRICE_DATA/>
 	<DST_PROVISIONING_DIRECTIVE />
-	<DST_PACKAGING_DIRECTIVE />   
-	<DST_SYNC_INSTR_COUNTRY_R/>	
-	<DST_RIGHT_PKG_DIRECTIVE /> 
-	<DST_SYNC_INSTR_PARTNER_ORDER/>		 
-    
+	<DST_PACKAGING_DIRECTIVE />
+	<DST_SYNC_INSTR_COUNTRY_R/>
+	<DST_RIGHT_PKG_DIRECTIVE />
+	<DST_SYNC_INSTR_PARTNER_ORDER/>
+
 	<DST_DELIVERY_PROD_ARTIFACT/>
 	<DST_DELIVERY_ITEMS_GROUP/>
-	<DST_DELIVERY_ITEM/>	
+	<DST_DELIVERY_ITEM/>
 	<DST_DELIVERY_TRANSACTION/>
-	<DST_AUDIT_TRAIL/>	
-	
-	<RSK_BATCH_RISK/>
-	<RSK_REQUEST/>	
-	
+	<DST_AUDIT_TRAIL/>
+
+
 	<RKG_BATCH_WEIGHTING />
-</dataset>
\ No newline at end of file
+</dataset>
Index: products/distribution/integration-tests/src/test/resources/com/dgp/anthologic/distribution/utils/snapshotDBBeforeIntegrationTest.xml
===================================================================
--- products/distribution/integration-tests/src/test/resources/com/dgp/anthologic/distribution/utils/snapshotDBBeforeIntegrationTest.xml	(revision 84474)
+++ products/distribution/integration-tests/src/test/resources/com/dgp/anthologic/distribution/utils/snapshotDBBeforeIntegrationTest.xml	(working copy)
@@ -6,89 +6,87 @@
 	<REP_FILE/-->
 
 	<!--  core config -->
-	<!-- removed by PB 
+	<!-- removed by PB
 	<COR_TECHNICAL_PLATFORM/>
-	
+
 	<COR_DELIVERY_PLATFORM/>
-	
+
 	<COR_DELIVERY_CHANNEL/>
 	-->
 	<COR_CHANNEL_PROPERTY/>
 	<COR_DELIVERY_END_POINT/>
 	<COR_END_POINT_PROPERTY/>
 	<COR_NOTIF_CHANNEL_PROPERTY/>
-	<!-- removed by PB 
+	<!-- removed by PB
 	<COR_DELIVERY_PLATFORM/>
-	
-		
+
+
 	<COR_PLATFORM_PRD_TYPE/>
 	-->
 	<!--COR_PLATFORM_RES_TYPE/-->
-	
-	<!-- removed by PB 
+
+	<!-- removed by PB
 	<COR_PLATFORM_MNG_LINE/>
-	
+
 	-->
-	<!--COR_MNG_ASSOCIATION/-->	
-	<!-- removed by PB 
-	<COR_PARTNER_PLF_ML_SET/>	
-		
+	<!--COR_MNG_ASSOCIATION/-->
+	<!-- removed by PB
+	<COR_PARTNER_PLF_ML_SET/>
+
 	<COR_PARTNER_PLF_PRD_TYPE/>
 	<COR_PARTNER_PLF_RES_TYPE/>
-	<COR_PARTNER_PLF_CUS_PROFILE/>	
-	
-	<COR_PARTNER_PLF_MNG_LINE/>	
+	<COR_PARTNER_PLF_CUS_PROFILE/>
+
+	<COR_PARTNER_PLF_MNG_LINE/>
 	-->
-	<!-- removed by PB 
+	<!-- removed by PB
 	<COR_PLATFORM_HANDSET/>
-	 
-	<COR_DELIVERY_PLF_HANDSET/>	
-	
+
+	<COR_DELIVERY_PLF_HANDSET/>
+
 	<COR_PLATFORM_HANDSET_ML/>
 	<COR_PARTNER_HANDSET_MNG_LINE/>
 	-->
 
-	<!-- distribution -->	
+	<!-- distribution -->
 	<DST_SELECTION/>
 	<DST_PRODUCT_LIST/>
 	<DST_ORDER/>
-	<DST_ORDER_CONFIG_SET/>	
+	<DST_ORDER_CONFIG_SET/>
 	<DST_SELECTED_PRODUCT/>
-	<DST_SELECTED_PRODUCT_DIFF /> 	
+	<DST_SELECTED_PRODUCT_DIFF />
 	<DST_DAILY_PLANNING/>
 	<DST_PARTNER_ORDER/>
 	<DST_CATALOG_ITEM/>
 	<DST_CATALOG_ITEM_COUNTRY_R/>
-	<DST_CATALOG_ITEM_HISTORY/>	  
+	<DST_CATALOG_ITEM_HISTORY/>
 	<DST_BATCH/>
-	<DST_BATCH_ACTION />	
-	<DST_CAPACITY_LEASE/>  
+	<DST_BATCH_ACTION />
+	<DST_CAPACITY_LEASE/>
 	<DST_SYNC_INSTRUCTION/>
-	<DST_SYNC_INSTRUCTION_LOG />	
+	<DST_SYNC_INSTRUCTION_LOG />
 	<DST_SI_PRICE_DATA/>
 	<DST_PROVISIONING_DIRECTIVE/>
-	<DST_PACKAGING_DIRECTIVE/>   
+	<DST_PACKAGING_DIRECTIVE/>
 	<DST_SYNC_INSTR_COUNTRY_R/>
-	<DST_RIGHT_PKG_DIRECTIVE/> 	 
-	<DST_SYNC_INSTR_PARTNER_ORDER/>	
-    
-	<!-- DST_DELIVERY_ITEMPART/>  
+	<DST_RIGHT_PKG_DIRECTIVE/>
+	<DST_SYNC_INSTR_PARTNER_ORDER/>
+
+	<!-- DST_DELIVERY_ITEMPART/>
 	<DST_SYNCINS_ITEMPART/-->
 	<DST_DELIVERY_PROD_ARTIFACT/>
 	<DST_DELIVERY_ITEMS_GROUP/>
 	<DST_DELIVERY_ITEM/>
 	<DST_DELIVERY_TRANSACTION/>
 	<DST_AUDIT_TRAIL/>
-	<RSK_BATCH_RISK/>
-	<RSK_REQUEST/>
-	
+
 	<RKG_BATCH_WEIGHTING />
-	
+
 	<!-- UCS -->
-	
+
 	<UCS_ORDER />
 	<UCS_ORDER_METRICS />
 	<UCS_PRODUCT />
-	<UCS_PRODUCT_METRICS />	
+	<UCS_PRODUCT_METRICS />
 	<UCS_ASSET />
-</dataset>
\ No newline at end of file
+</dataset>
Index: products/distribution/integration-tests/src/test/resources/com/dgp/anthologic/distribution/utils/cleanDBAfterRealIntegrationTest.xml
===================================================================
--- products/distribution/integration-tests/src/test/resources/com/dgp/anthologic/distribution/utils/cleanDBAfterRealIntegrationTest.xml	(revision 84474)
+++ products/distribution/integration-tests/src/test/resources/com/dgp/anthologic/distribution/utils/cleanDBAfterRealIntegrationTest.xml	(working copy)
@@ -1,46 +1,43 @@
 <?xml version='1.0' encoding='UTF-8'?>
 <dataset>
-	<!-- distribution -->	
+	<!-- distribution -->
 	<DST_SELECTION />
 	<DST_PRODUCT_LIST />
 	<DST_BATCH />
 	<DST_BATCH_ACTION />
 	<DST_ORDER />
-	<DST_ORDER_CONFIG_SET />	
+	<DST_ORDER_CONFIG_SET />
 	<DST_SELECTED_PRODUCT />
-	<DST_SELECTED_PRODUCT_DIFF /> 	
+	<DST_SELECTED_PRODUCT_DIFF />
 	<DST_DAILY_PLANNING />
 	<DST_PARTNER_ORDER />
 	<DST_CATALOG_ITEM />
-	<DST_CATALOG_ITEM_COUNTRY_R/>  
-	<DST_CATALOG_ITEM_HISTORY/>	
-	<DST_CAPACITY_LEASE/>  
+	<DST_CATALOG_ITEM_COUNTRY_R/>
+	<DST_CATALOG_ITEM_HISTORY/>
+	<DST_CAPACITY_LEASE/>
 
 	<DST_SYNC_INSTRUCTION />
 	<DST_SYNC_INSTRUCTION_LOG />
 	<DST_SI_PRICE_DATA/>
 	<DST_PROVISIONING_DIRECTIVE />
-	<DST_PACKAGING_DIRECTIVE />   
-	<DST_SYNC_INSTR_COUNTRY_R/>	
-	<DST_RIGHT_PKG_DIRECTIVE /> 
-	<DST_SYNC_INSTR_PARTNER_ORDER/>		 
-    
+	<DST_PACKAGING_DIRECTIVE />
+	<DST_SYNC_INSTR_COUNTRY_R/>
+	<DST_RIGHT_PKG_DIRECTIVE />
+	<DST_SYNC_INSTR_PARTNER_ORDER/>
+
 	<DST_DELIVERY_PROD_ARTIFACT/>
 	<DST_DELIVERY_ITEMS_GROUP/>
 	<DST_DELIVERY_ITEM/>
 	<DST_DELIVERY_TRANSACTION/>
-	<DST_AUDIT_TRAIL/>	
-	
-	<RSK_BATCH_RISK/>
-	<RSK_REQUEST/>
-	
+	<DST_AUDIT_TRAIL/>
+
 	<RKG_BATCH_WEIGHTING />
-	
+
 	<!-- UCS -->
 	<UCS_ORDER />
 	<UCS_ORDER_METRICS />
 	<UCS_PRODUCT />
-	<UCS_PRODUCT_METRICS />	
+	<UCS_PRODUCT_METRICS />
 	<UCS_ASSET />
-	
-</dataset>
\ No newline at end of file
+
+</dataset>
Index: products/distribution/integration-tests/src/test/resources/com/dgp/anthologic/distribution/external-stub-services.xml
===================================================================
--- products/distribution/integration-tests/src/test/resources/com/dgp/anthologic/distribution/external-stub-services.xml	(revision 84474)
+++ products/distribution/integration-tests/src/test/resources/com/dgp/anthologic/distribution/external-stub-services.xml	(working copy)
@@ -21,6 +21,5 @@
     <import resource="classpath:com/dgp/anthologic/distribution/external/pricing-stub-services.xml"/>
     <import resource="classpath:com/dgp/anthologic/distribution/external/notification-stub-services.xml"/>	
     <import resource="classpath:com/dgp/anthologic/distribution/external/manufacturing-stub-core.xml"/>	
-    <import resource="classpath:com/dgp/anthologic/distribution/external/risk-stub-services.xml"/>
     <import resource="classpath:com/dgp/anthologic/distribution/external/watermark-stub-services.xml"/>
-</beans>
\ No newline at end of file
+</beans>
Index: products/distribution/integration-tests/src/test/resources/com/dgp/anthologic/distribution/batch/risk/request/BatchRiskRequestHandlerTest_newBatchRisk.xml
===================================================================
--- products/distribution/integration-tests/src/test/resources/com/dgp/anthologic/distribution/batch/risk/request/BatchRiskRequestHandlerTest_newBatchRisk.xml	(revision 84474)
+++ products/distribution/integration-tests/src/test/resources/com/dgp/anthologic/distribution/batch/risk/request/BatchRiskRequestHandlerTest_newBatchRisk.xml	(working copy)
@@ -1,11 +0,0 @@
-<?xml version='1.0' encoding='UTF-8'?>
-<dataset>
-
-	<DST_BATCH DELIVERY_QA_STATUS="NONE" ID="111684564" WEIGHT="300" BATCH_STATUS="ACCEPTED" priority="LOW" START_DATE="2008-10-19 00:00:00.0" END_DATE="2008-10-22 00:00:00.0" PARTNER_CONFIG_ID="334" HOLD_DATE="2008-05-01 00:00:00.0" BATCH_TYPE="PRIVATE" DOWNLOAD_STATUS="NOT_ACCESSED" IS_ERROR="N" IS_OUT_OF_SYNC="N"/>
-	
-	<rsk_batch_risk />
-
-	<RSK_REQUEST ID="452435756" SOURCE_ID="111684564" CLASS="BC" RISK="H" STATUS="FINISHED" REQ_TYPE="A" CREATION_DATE="2008-10-18 01:00:00.0" LAST_UPDATE_DATE="2008-10-18 02:00:00.0" />
-	
-</dataset>
-
Index: products/distribution/integration-tests/src/test/resources/com/dgp/anthologic/distribution/batch/risk/request/BatchRiskRequestHandlerTest_doAfterExecute.xml
===================================================================
--- products/distribution/integration-tests/src/test/resources/com/dgp/anthologic/distribution/batch/risk/request/BatchRiskRequestHandlerTest_doAfterExecute.xml	(revision 84474)
+++ products/distribution/integration-tests/src/test/resources/com/dgp/anthologic/distribution/batch/risk/request/BatchRiskRequestHandlerTest_doAfterExecute.xml	(working copy)
@@ -1,10 +0,0 @@
-<?xml version='1.0' encoding='UTF-8'?>
-<dataset>
-
-	<DST_BATCH DELIVERY_QA_STATUS="NONE" ID="111684564" WEIGHT="300" BATCH_STATUS="ACCEPTED" priority="LOW" START_DATE="2008-10-19 00:00:00.0" END_DATE="2008-10-22 00:00:00.0" PARTNER_CONFIG_ID="334" HOLD_DATE="2008-05-01 00:00:00.0" BATCH_TYPE="PRIVATE" DOWNLOAD_STATUS="NOT_ACCESSED" IS_ERROR="N" IS_OUT_OF_SYNC="N"/>
-	
-	<rsk_batch_risk id="1784548748" BATCH_ID="111684564" RISK="LOW" CREATION_DATE="2008-10-18 01:00:00.0" UPDATE_DATE="2008-10-18 02:00:00.0"/>
-
-	<RSK_REQUEST ID="452435756" SOURCE_ID="111684564" BATCH_RISK_ID="1784548748" CLASS="BC" RISK="H" STATUS="FINISHED" REQ_TYPE="A" CREATION_DATE="2008-10-18 01:00:00.0" LAST_UPDATE_DATE="2008-10-18 02:00:00.0" />
-	
-</dataset>
\ No newline at end of file
Index: products/distribution/integration-tests/src/test/resources/com/dgp/anthologic/distribution/external/risk-stub-services.xml
===================================================================
--- products/distribution/integration-tests/src/test/resources/com/dgp/anthologic/distribution/external/risk-stub-services.xml	(revision 84474)
+++ products/distribution/integration-tests/src/test/resources/com/dgp/anthologic/distribution/external/risk-stub-services.xml	(working copy)
@@ -14,6 +14,5 @@
           http://www.digiplug.com/schema/sdk/commons/logging/dgp-log.xsd">
           	
         <!-- Risk external dependencies -->
-		<bean id="riskRequestService" class="com.dgp.anthologic.risk.domain.request.impl.stub.MockRiskRequestService"/>
 		<bean id="provisioningUiService" class="com.dgp.provisioning.internal.ui.mock.MockProvisioningUiService"/>     
-</beans>
\ No newline at end of file
+</beans>
Index: products/distribution/integration-tests/src/test/resources/com/dgp/anthologic/distribution/external-real-services.xml
===================================================================
--- products/distribution/integration-tests/src/test/resources/com/dgp/anthologic/distribution/external-real-services.xml	(revision 84474)
+++ products/distribution/integration-tests/src/test/resources/com/dgp/anthologic/distribution/external-real-services.xml	(working copy)
@@ -18,34 +18,32 @@
 	<import resource="classpath:META-INF/spring/assetmgt-beans.xml"/>
 	<import resource="classpath:META-INF/spring/bpconfig-beans.xml"/>
 	<!--
-	<import resource="classpath:com/dgp/anthologic/distribution/external/manufacturing-stub-core.xml"/>	
+	<import resource="classpath:com/dgp/anthologic/distribution/external/manufacturing-stub-core.xml"/>
 	 -->
 	<import resource="classpath:META-INF/spring/manufacturing/core/beans.xml"/>
 	<import resource="classpath:META-INF/spring/manufacturing/metamodel/beans.xml"/>
 	<import resource="classpath:META-INF/spring/manufacturing/facades.xml"/>
 	<import resource="classpath:META-INF/spring/manufacturing/service/beans.xml"/>
-	 
+
 	<import resource="classpath:META-INF/spring/provisioning/beans.xml"/>
 	<import resource="classpath:META-INF/spring/transcoder/core/beans.xml"/>
 	<import resource="classpath:META-INF/spring/media/beans.xml"/>
-	
-	<!--  Risk -->	
-    <import resource="classpath:com/dgp/anthologic/distribution/external/risk-stub-services.xml"/>
-    
+
+
 	<!--  Pricing -->
     <!--import resource="classpath:com/dgp/anthologic/distribution/external/pricing-stub-services.xml"/-->
     <import resource="classpath:META-INF/spring/price-management-beans.xml" />
-    
-	<!--  Notification -->    
+
+	<!--  Notification -->
     <import resource="classpath:com/dgp/anthologic/distribution/external/notification-stub-services.xml"/>
-		        
-	<!--  Provisioning -->  
+
+	<!--  Provisioning -->
 	<import resource="classpath:com/dgp/anthologic/distribution/external/provisioning-stub-services.xml"/>
-	
+
 	<!--  Watermark -->
 	<import resource="classpath:com/dgp/anthologic/distribution/external/watermark-stub-services.xml"/>
-	
-	<!--  
+
+	<!--
 	<bean id="defaultProductProvisioningRequestService" class="com.dgp.anthologic.provisioning.service.impl.stub.StubProvisioningRequestService" >
     	<property name="sessionFactory" ref="repositorySessionFactory"/>
 		<property name="productService" ref="productService"/>
@@ -54,24 +52,24 @@
     	<property name="technicalParametersService" ref="technicalParametersService"/>
     </bean>
     -->
-    
+
     <!--  REPLACE IT IF YOU WANT TO USE THE REAL PROVISIONING SERVICE-->
 	<!--bean id="defaultProductProvisioningRequestService" name="defaultProductProvisioningRequestService" class="com.dgp.anthologic.distribution.batch.provisioning.internal.service.BatchProvisioningServiceImpl" destroy-method="destroy">
 		<property name="provisioningService" ref="provisioningService" />
 		<property name="manufacturingCoreFacade" ref="manufacturingCoreFacade"/>
-	</bean>	
+	</bean>
 	<bean id="provisioningService" class="com.dgp.provisioning.internal.service.ProvisioningServiceImpl">
 		<property name="provisioningDao" ref="provisioningDao" />
 	</bean>
 	<bean id="provisioningDao" class="com.dgp.provisioning.internal.dao.impl.ProvisioningDaoImpl">
 		<property name="hibernateTemplate" ref="hibernateTemplate" />
-	</bean-->            
-    
+	</bean-->
+
     <!-- User management -->
     <bean id="userContextUtils" class="com.dgp.anthologic.commons.usermgt.service.impl.UserContextUtilsImpl">
     </bean>
-    
+
     <!-- SDK -->
     <bean id="transfertRequestService" class="com.dgp.anthologic.sdk.stub.MockTransferRequestService" />
-		
-</beans>
\ No newline at end of file
+
+</beans>
Index: products/distribution/integration-tests/src/test/java/com/dgp/anthologic/risk/RiskManagementIntegrationBaseTest.java
===================================================================
--- products/distribution/integration-tests/src/test/java/com/dgp/anthologic/risk/RiskManagementIntegrationBaseTest.java	(revision 84474)
+++ products/distribution/integration-tests/src/test/java/com/dgp/anthologic/risk/RiskManagementIntegrationBaseTest.java	(working copy)
@@ -1,36 +0,0 @@
-package com.dgp.anthologic.risk;
-
-import org.hibernate.SessionFactory;
-import org.junit.After;
-import org.unitils.UnitilsJUnit4;
-import org.unitils.orm.hibernate.annotation.HibernateSessionFactory;
-import org.unitils.spring.annotation.SpringApplicationContext;
-
-@SpringApplicationContext("/risk/application-config.xml")
-public abstract class RiskManagementIntegrationBaseTest extends UnitilsJUnit4 {
-
-    @HibernateSessionFactory
-    private static SessionFactory sessionFactory;
-
-    protected void flushHibernateCurrentSession() {
-        getSessionFactory().getCurrentSession().flush();
-    }
-
-    protected void flushAndClearHibernateCurrentSession() {
-        getSessionFactory().getCurrentSession().flush();
-        getSessionFactory().getCurrentSession().clear();
-    }
-
-    @After
-    public void afterTest() {
-        sessionFactory.getCurrentSession().clear();
-    }
-
-    protected static org.hibernate.classic.Session getCurrentSession() {
-        return getSessionFactory().getCurrentSession();
-    }
-
-    protected static SessionFactory getSessionFactory() {
-        return sessionFactory;
-    }
-}
Index: products/distribution/integration-tests/src/test/java/com/dgp/anthologic/risk/domain/request/DefaultRiskRequestServiceTest.java
===================================================================
--- products/distribution/integration-tests/src/test/java/com/dgp/anthologic/risk/domain/request/DefaultRiskRequestServiceTest.java	(revision 84474)
+++ products/distribution/integration-tests/src/test/java/com/dgp/anthologic/risk/domain/request/DefaultRiskRequestServiceTest.java	(working copy)
@@ -1,59 +0,0 @@
-package com.dgp.anthologic.risk.domain.request;
-
-import static org.hamcrest.CoreMatchers.equalTo;
-import static org.junit.Assert.assertNotNull;
-import static org.junit.Assert.assertThat;
-
-import java.util.Date;
-
-import org.junit.Test;
-import org.unitils.dbunit.annotation.DataSet;
-import org.unitils.inject.annotation.TestedObject;
-import org.unitils.spring.annotation.SpringBeanByName;
-
-import com.dgp.anthologic.distribution.batch.Batch;
-import com.dgp.anthologic.distribution.batch.risk.request.BatchRiskRequest;
-import com.dgp.anthologic.risk.RiskManagementIntegrationBaseTest;
-import com.dgp.anthologic.risk.domain.shared.ERisk;
-import com.dgp.integration.model.RequestStatus;
-
-public class DefaultRiskRequestServiceTest extends RiskManagementIntegrationBaseTest {
-
-    @TestedObject
-    @SpringBeanByName
-    private RiskRequestService riskRequestService;
-
-    @Test
-    @DataSet
-    public void testRequestBatchRiskComputation() {
-        // DATA
-        final Long batchID = 111684564L;
-        Date creationDate = new Date();
-        Batch batch = new Batch() {
-            @Override
-            public Long getId() {
-                return batchID;
-            }
-        };
-
-        BatchRiskRequest request = new BatchRiskRequest();
-        request.setSource(batch);
-        request.setRisk(ERisk.LOW);
-        request.setStatus(RequestStatus.PENDING);
-        request.getHeader().setCreationDate(creationDate);
-
-        // TEST
-        riskRequestService.submitRequest(request);
-
-        // VERIFY
-        flushAndClearHibernateCurrentSession();
-
-        BatchRiskRequest actualRiskRequest = (BatchRiskRequest) getCurrentSession().createSQLQuery("select {req.*} from RSK_REQUEST req")
-                .addEntity("req", BatchRiskRequest.class).uniqueResult();
-        assertNotNull(actualRiskRequest);
-
-        int actualNbDeletedBatchRisks = getCurrentSession().createQuery("delete from BatchRiskRequest").executeUpdate();
-        int expectedNbDeletedBatchRisks = 1;
-        assertThat(actualNbDeletedBatchRisks, equalTo(expectedNbDeletedBatchRisks));
-    }
-}
Index: products/distribution/integration-tests/src/test/java/com/dgp/anthologic/distribution/batch/risk/request/BatchRiskRequestHandlerTest.java
===================================================================
--- products/distribution/integration-tests/src/test/java/com/dgp/anthologic/distribution/batch/risk/request/BatchRiskRequestHandlerTest.java	(revision 84474)
+++ products/distribution/integration-tests/src/test/java/com/dgp/anthologic/distribution/batch/risk/request/BatchRiskRequestHandlerTest.java	(working copy)
@@ -1,67 +0,0 @@
-package com.dgp.anthologic.distribution.batch.risk.request;
-
-import static org.hamcrest.CoreMatchers.equalTo;
-import static org.junit.Assert.assertNotNull;
-import static org.junit.Assert.assertThat;
-
-import java.math.BigDecimal;
-
-import org.junit.Test;
-import org.unitils.dbunit.annotation.DataSet;
-import org.unitils.inject.annotation.TestedObject;
-import org.unitils.reflectionassert.ReflectionAssert;
-import org.unitils.reflectionassert.ReflectionComparatorMode;
-import org.unitils.spring.annotation.SpringBeanByName;
-
-import com.dgp.anthologic.distribution.batch.risk.batchrisk.BatchRisk;
-import com.dgp.anthologic.risk.RiskManagementIntegrationBaseTest;
-import com.dgp.anthologic.risk.domain.request.RiskRequestHandler;
-import com.dgp.anthologic.risk.domain.shared.ERisk;
-
-public class BatchRiskRequestHandlerTest extends RiskManagementIntegrationBaseTest {
-
-    @TestedObject
-    @SpringBeanByName
-    private RiskRequestHandler batchRiskRequestHandler;
-
-    @Test
-    @DataSet("/com/dgp/anthologic/distribution/batch/risk/request/BatchRiskRequestHandlerTest_newBatchRisk.xml")
-    public void testDoBeforeExecute_newBatchRisk() {
-        // DATA
-        long batchRiskRequestID = 452435756L;
-        BatchRiskRequest in_request = (BatchRiskRequest) getSessionFactory().getCurrentSession().createQuery(
-                "from RiskRequest rr where rr.id=" + batchRiskRequestID).uniqueResult();
-
-        // TEST
-        batchRiskRequestHandler.doBeforeExecute(in_request);
-        this.flushAndClearHibernateCurrentSession();
-
-        // VERIFY
-        BigDecimal actualBatchRiskID = (BigDecimal) getSessionFactory().getCurrentSession().createSQLQuery(
-                "select BATCH_RISK_ID from RSK_REQUEST where ID=" + batchRiskRequestID).uniqueResult();
-        assertNotNull(actualBatchRiskID);
-        BatchRisk actualBatchRisk = (BatchRisk) getSessionFactory().getCurrentSession().createSQLQuery(
-                "select {br.*} from rsk_batch_risk br").addEntity("br", BatchRisk.class).uniqueResult();
-        BatchRisk expectedBatchRisk = new BatchRisk(111684564L, ERisk.LOW, null, null);
-        ReflectionAssert.assertRefEquals(expectedBatchRisk, actualBatchRisk, ReflectionComparatorMode.IGNORE_DEFAULTS);
-    }
-
-    @Test
-    @DataSet("/com/dgp/anthologic/distribution/batch/risk/request/BatchRiskRequestHandlerTest_doAfterExecute.xml")
-    public void testDoAfterExecute_nominalCase() {
-        // DATA
-        long batchRiskRequestID = 452435756L;
-        long batchRiskID = 1784548748L;
-        BatchRiskRequest in_request = (BatchRiskRequest) getSessionFactory().getCurrentSession().createQuery(
-                "from RiskRequest rr where rr.id=" + batchRiskRequestID).uniqueResult();
-
-        // TEST
-        batchRiskRequestHandler.doAfterExecute(in_request);
-        this.flushAndClearHibernateCurrentSession();
-
-        // VERIFY
-        String actualBatchRiskRisk = (String) getSessionFactory().getCurrentSession().createSQLQuery(
-                "select RISK from RSK_BATCH_RISK where ID=" + batchRiskID).uniqueResult();
-        assertThat(actualBatchRiskRisk, equalTo(in_request.getRisk().name()));
-    }
-}
Index: products/distribution/services/src/test/java/com/dgp/anthologic/operation/batch/DefaultBatchOperationServiceTest.java
===================================================================
--- products/distribution/services/src/test/java/com/dgp/anthologic/operation/batch/DefaultBatchOperationServiceTest.java	(revision 84474)
+++ products/distribution/services/src/test/java/com/dgp/anthologic/operation/batch/DefaultBatchOperationServiceTest.java	(working copy)
@@ -47,8 +47,6 @@
 import com.dgp.anthologic.distribution.application.operation.batch.dto.enums.EOpsOverviewScope;
 import com.dgp.anthologic.distribution.batch.Batch;
 import com.dgp.anthologic.distribution.batch.BatchRepository;
-import com.dgp.anthologic.distribution.batch.risk.batchrisk.BatchRisk;
-import com.dgp.anthologic.distribution.batch.risk.batchrisk.BatchRiskRepository;
 import com.dgp.anthologic.distribution.instruction.SyncInstruction;
 import com.dgp.anthologic.distribution.instruction.SyncInstructionAudit;
 import com.dgp.anthologic.distribution.instruction.SyncInstructionAuditRepository;
@@ -59,7 +57,6 @@
 import com.dgp.anthologic.distribution.order.bulk.BatchResultDto;
 import com.dgp.anthologic.distribution.order.bulk.SearchBatchesRequestDto;
 import com.dgp.anthologic.exception.functional.distribution.ordering.OrderingException;
-import com.dgp.anthologic.risk.domain.shared.ERisk;
 import com.dgp.commons.exception.BusinessException;
 import com.dgp.security.model.UserRights;
 
@@ -89,9 +86,6 @@
 
     @Mock
     @InjectIntoByType
-    private BatchRiskRepository batchRiskRepository;
-    @Mock
-    @InjectIntoByType
     private ClearanceFacade clearanceFacade;
     @Mock
     @InjectIntoByType
@@ -447,11 +441,6 @@
         expect(orderRepository.findByBatchId((Long) anyObject())).andReturn(new ArrayList<Order>(Arrays.asList(order))).anyTimes();
         expect(batchRepository.searchBatchs(searchBatchRequestDto, paginatedRequest, Boolean.TRUE)).andReturn(searchResultsDto).anyTimes();
 
-        expect(bpRepository.findByGlobalConfig(null, true)).andReturn(new BP()).anyTimes();
-        expect(batchRiskRepository.findByBatchID(proBatch.getId())).andReturn(
-                new BatchRisk(proBatch.getId(), ERisk.HIGH, cal.getTime(), cal.getTime())).anyTimes();
-        expect(batchRiskRepository.findByBatchID(delivery.getId())).andReturn(null).anyTimes();
-
         EasyMockUnitils.replay();
 
         result = defaultBatchOperationService.searchBatches(searchBatchRequestDto, paginatedRequest);
Index: products/distribution/services/src/test/java/com/dgp/anthologic/risk/infrastructure/persistence/hibernate/DBHibernateRiskRequestRepositoryTest.java
===================================================================
--- products/distribution/services/src/test/java/com/dgp/anthologic/risk/infrastructure/persistence/hibernate/DBHibernateRiskRequestRepositoryTest.java	(revision 84474)
+++ products/distribution/services/src/test/java/com/dgp/anthologic/risk/infrastructure/persistence/hibernate/DBHibernateRiskRequestRepositoryTest.java	(working copy)
@@ -1,90 +0,0 @@
-package com.dgp.anthologic.risk.infrastructure.persistence.hibernate;
-
-import static org.hamcrest.CoreMatchers.equalTo;
-import static org.junit.Assert.assertThat;
-
-import java.util.Date;
-import java.util.List;
-
-import org.junit.Test;
-import org.unitils.dbunit.annotation.DataSet;
-import org.unitils.inject.annotation.TestedObject;
-import org.unitils.spring.annotation.SpringApplicationContext;
-import org.unitils.spring.annotation.SpringBeanByName;
-
-import com.dgp.anthologic.distribution.batch.Batch;
-import com.dgp.anthologic.distribution.batch.risk.request.BatchRiskRequest;
-import com.dgp.anthologic.distribution.hibernate.DBDistributionBaseTest;
-import com.dgp.anthologic.risk.domain.request.RiskRequest;
-import com.dgp.anthologic.risk.domain.request.RiskRequestRepository;
-import com.dgp.anthologic.risk.domain.shared.ERisk;
-import com.dgp.integration.model.RequestStatus;
-
-@SpringApplicationContext( { "/application-config.xml", "/META-INF/spring/risk/repositories.xml" })
-public class DBHibernateRiskRequestRepositoryTest extends DBDistributionBaseTest {
-
-    @TestedObject
-    @SpringBeanByName
-    private RiskRequestRepository riskRequestRepository;
-
-    @Test
-    @DataSet("/com/dgp/anthologic/risk/infrastructure/persistence/hibernate/DBHibernateRiskRequestRepositoryTest_CreateAndFlush.xml")
-    public void testCreateAndFlush() {
-        // DATA
-        final Long batchID = 111684564L;
-        Date creationDate = new Date();
-        Batch batch = new Batch() {
-            @Override
-            public Long getId() {
-                return batchID;
-            }
-        };
-
-        BatchRiskRequest request = new BatchRiskRequest();
-        request.setSource(batch);
-        request.setRisk(ERisk.LOW);
-        request.setStatus(RequestStatus.PENDING);
-        request.getHeader().setCreationDate(creationDate);
-
-        // DATA
-        riskRequestRepository.createAndFlush(request);
-        this.flushAndClearHibernateCurrentSession();
-
-        // VERIFY
-        int actualBatchRiskCount = riskRequestRepository.getAllObjects().size();
-        int expectedBatchRiskCount = 1;
-        assertThat(actualBatchRiskCount, equalTo(expectedBatchRiskCount));
-    }
-
-    @Test
-    @DataSet("/com/dgp/anthologic/risk/infrastructure/persistence/hibernate/DBHibernateRiskRequestRepositoryTest_acquireRequests.xml")
-    public void testAcquireRequests_nominalCase() {
-        // DATA
-        int in_nbrOfRequests = 1000;
-
-        // TEST
-        List<RiskRequest> actualacquiredRequests = riskRequestRepository.acquireRequests(in_nbrOfRequests);
-
-        // VERIFY
-        int actualAcquiredRequestsSize = actualacquiredRequests.size();
-        int expectedAcquiredRequestsSize = 2;
-        assertThat(actualAcquiredRequestsSize, equalTo(expectedAcquiredRequestsSize));
-    }
-
-    @Test
-    @DataSet("/com/dgp/anthologic/risk/infrastructure/persistence/hibernate/DBHibernateRiskRequestRepositoryTest_acquireRequests.xml")
-    public void testAcquireRequests_restrictAcquiredRequests() {
-        // DATA
-        int in_nbrOfRequests = 1;
-
-        // TEST
-        List<RiskRequest> actualacquiredRequests = riskRequestRepository.acquireRequests(in_nbrOfRequests);
-
-        // VERIFY
-        int actualAcquiredRequestsSize = actualacquiredRequests.size();
-        int expectedAcquiredRequestsSize = 1;
-        assertThat(actualAcquiredRequestsSize, equalTo(expectedAcquiredRequestsSize));
-        Long expectedAcquiredRequestID = 111684565L;
-        assertThat((Long) (actualacquiredRequests.get(0).getId()), equalTo(expectedAcquiredRequestID));
-    }
-}
Index: products/distribution/services/src/test/java/com/dgp/anthologic/distribution/infrastructure/persistence/hibernate/batch/risk/batchrisk/DBHibernateBatchRiskRepositoryTest.java
===================================================================
--- products/distribution/services/src/test/java/com/dgp/anthologic/distribution/infrastructure/persistence/hibernate/batch/risk/batchrisk/DBHibernateBatchRiskRepositoryTest.java	(revision 84474)
+++ products/distribution/services/src/test/java/com/dgp/anthologic/distribution/infrastructure/persistence/hibernate/batch/risk/batchrisk/DBHibernateBatchRiskRepositoryTest.java	(working copy)
@@ -1,70 +0,0 @@
-package com.dgp.anthologic.distribution.infrastructure.persistence.hibernate.batch.risk.batchrisk;
-
-import static org.hamcrest.CoreMatchers.equalTo;
-import static org.junit.Assert.assertNull;
-import static org.junit.Assert.assertThat;
-
-import java.util.Date;
-
-import org.junit.Test;
-import org.unitils.dbunit.annotation.DataSet;
-import org.unitils.inject.annotation.TestedObject;
-import org.unitils.spring.annotation.SpringBeanByName;
-
-import com.dgp.anthologic.distribution.batch.risk.batchrisk.BatchRisk;
-import com.dgp.anthologic.distribution.batch.risk.batchrisk.BatchRiskRepository;
-import com.dgp.anthologic.distribution.hibernate.DBDistributionBaseTest;
-import com.dgp.anthologic.risk.domain.shared.ERisk;
-
-public class DBHibernateBatchRiskRepositoryTest extends DBDistributionBaseTest {
-
-    @TestedObject
-    @SpringBeanByName
-    private BatchRiskRepository batchRiskRepository;
-
-    @Test
-    public void testCreateObject() {
-        // DATA
-        Long batchID = 111684564L;
-        Date creationDate = new Date();
-        Date updateDate = creationDate;
-        BatchRisk batchRisk = new BatchRisk(batchID, ERisk.LOW, creationDate, updateDate);
-
-        // DATA
-        batchRiskRepository.createObject(batchRisk);
-        this.flushAndClearHibernateCurrentSession();
-
-        // VERIFY
-        int actualBatchRiskCount = batchRiskRepository.getAllObjects().size();
-        int expectedBatchRiskCount = 1;
-        assertThat(actualBatchRiskCount, equalTo(expectedBatchRiskCount));
-    }
-
-    @Test
-    @DataSet
-    public void testFindByBatchID_findBatchRisk() {
-        // DATA
-        Long batchID = 14878978L;
-
-        // TEST
-        BatchRisk batchRisk = batchRiskRepository.findByBatchID(batchID);
-
-        // VERIFY
-        Long actualBatchRiskID = batchRisk.getId();
-        Long expectedBatchRiskID = 14545674L;
-        assertThat(actualBatchRiskID, equalTo(expectedBatchRiskID));
-    }
-
-    @Test
-    @DataSet
-    public void testFindByBatchID_notFindBatchRisk() {
-        // DATA
-        Long batchID = 345789L;
-
-        // TEST
-        BatchRisk batchRisk = batchRiskRepository.findByBatchID(batchID);
-
-        // VERIFY
-        assertNull(batchRisk);
-    }
-}
Index: products/distribution/services/src/test/java/com/dgp/anthologic/distribution/infrastructure/persistence/hibernate/batch/risk/batchrisk/HibernateBatchContingencyRepositoryTest.java
===================================================================
--- products/distribution/services/src/test/java/com/dgp/anthologic/distribution/infrastructure/persistence/hibernate/batch/risk/batchrisk/HibernateBatchContingencyRepositoryTest.java	(revision 84474)
+++ products/distribution/services/src/test/java/com/dgp/anthologic/distribution/infrastructure/persistence/hibernate/batch/risk/batchrisk/HibernateBatchContingencyRepositoryTest.java	(working copy)
@@ -1,69 +0,0 @@
-package com.dgp.anthologic.distribution.infrastructure.persistence.hibernate.batch.risk.batchrisk;
-
-import java.util.Arrays;
-import java.util.Calendar;
-import java.util.Date;
-import java.util.HashSet;
-import java.util.Map;
-
-import org.junit.Test;
-import org.unitils.dbunit.annotation.DataSet;
-import org.unitils.easymock.EasyMockUnitils;
-import org.unitils.easymock.annotation.Mock;
-import org.unitils.easymock.util.Calls;
-import org.unitils.inject.annotation.TestedObject;
-import org.unitils.spring.annotation.SpringBeanByName;
-
-import com.dgp.anthologic.core.utils.DateUtils;
-import com.dgp.anthologic.distribution.application.risk.batchrisk.BatchContingency;
-import com.dgp.anthologic.distribution.application.risk.batchrisk.BatchContingencyRepository;
-import com.dgp.anthologic.distribution.batch.impl.DefaultBatchPriorityComputer;
-import com.dgp.anthologic.distribution.common.DistributionServicesRegistry;
-import com.dgp.anthologic.distribution.hibernate.DBDistributionBaseTest;
-import com.dgp.commons.log.MessageLogger;
-
-import static org.junit.Assert.assertEquals;
-
-public class HibernateBatchContingencyRepositoryTest extends DBDistributionBaseTest {
-
-    @TestedObject
-    @SpringBeanByName
-    private BatchContingencyRepository batchContingencyRepository;
-
-    @Mock(calls = Calls.LENIENT)
-    private MessageLogger messageLogger;
-
-    private static final Date NOW = DateUtils.getDate(1977, Calendar.AUGUST, 5, 22, 21, 31, 0);
-
-    @Test
-    @DataSet
-    public void testGetBatchContingencyMap() {
-        // DATA
-        Calendar cal = Calendar.getInstance();
-        cal.setTime(NOW);
-
-        // EXPECT
-        DistributionServicesRegistry r = new DistributionServicesRegistry();
-        DefaultBatchPriorityComputer batchPriorityComputer = new DefaultBatchPriorityComputer();
-        batchPriorityComputer.setServiceLogger(messageLogger);
-        r.setBatchPriorityComputer(batchPriorityComputer);
-        EasyMockUnitils.replay();
-
-        // TEST
-        Map<Long, BatchContingency> mapContingency = batchContingencyRepository.getBatchContingencyMap(cal);
-
-        // VERIFY
-        assertEquals(4, mapContingency.size());
-        assertEquals(new HashSet<Long>(Arrays.asList(100L, 101L, 102L, 103L)), mapContingency.keySet());
-        assertEquals((Long) 1L, mapContingency.get(100L).getWeight());
-        assertEquals((Long) 100L, mapContingency.get(100L).getBatchId());
-        assertEquals((Long) 2L, mapContingency.get(101L).getWeight());
-        assertEquals((Long) 101L, mapContingency.get(101L).getBatchId());
-        assertEquals((Long) 3L, mapContingency.get(102L).getWeight());
-        assertEquals((Long) 102L, mapContingency.get(102L).getBatchId());
-        assertEquals((Long) 4L, mapContingency.get(103L).getWeight());
-        assertEquals((Long) 103L, mapContingency.get(103L).getBatchId());
-
-    }
-
-}
Index: products/distribution/services/src/test/java/com/dgp/anthologic/distribution/batch/risk/metrics/DefaultDistributionMetricsServiceTest.java
===================================================================
--- products/distribution/services/src/test/java/com/dgp/anthologic/distribution/batch/risk/metrics/DefaultDistributionMetricsServiceTest.java	(revision 84474)
+++ products/distribution/services/src/test/java/com/dgp/anthologic/distribution/batch/risk/metrics/DefaultDistributionMetricsServiceTest.java	(working copy)
@@ -1,105 +0,0 @@
-package com.dgp.anthologic.distribution.batch.risk.metrics;
-
-import static org.easymock.EasyMock.expect;
-
-import java.util.ArrayList;
-import java.util.HashMap;
-import java.util.List;
-import java.util.Map;
-
-import org.easymock.EasyMock;
-import org.junit.Assert;
-import org.junit.Before;
-import org.junit.Test;
-import org.unitils.UnitilsJUnit4;
-import org.unitils.easymock.EasyMockUnitils;
-import org.unitils.easymock.annotation.Mock;
-import org.unitils.inject.annotation.InjectIntoByType;
-import org.unitils.inject.annotation.TestedObject;
-
-import com.dgp.anthologic.distribution.batch.risk.metrics.enums.EMetricsPropertyKey;
-
-public class DefaultDistributionMetricsServiceTest extends UnitilsJUnit4 {
-
-    private static final Long DEFAULT_VALUE = 1L;
-    private Map<EMetricsPropertyKey, DistributionMetricsProperty> propertyMap;
-
-    @TestedObject
-    DefaultDistributionMetricsService defaultDistributionMetricsInternalService;
-
-    @Mock
-    @InjectIntoByType
-    private DistributionMetricsPropertyRepository distributionMetricsPropertyRepository;
-
-    @Before
-    public void beforeTest() {
-        propertyMap = new HashMap<EMetricsPropertyKey, DistributionMetricsProperty>();
-        for (EMetricsPropertyKey key : EMetricsPropertyKey.values()) {
-            DistributionMetricsProperty property = new DistributionMetricsProperty();
-            property.setKey(key);
-            property.setValue(DEFAULT_VALUE);
-            propertyMap.put(key, property);
-        }
-    }
-
-    @Test
-    public void testGetMetricsProperties() {
-        // INIT EXPECTATIONS
-        List<DistributionMetricsProperty> expectResultPropertyList = new ArrayList<DistributionMetricsProperty>(propertyMap.values());
-        expect(distributionMetricsPropertyRepository.getAllObjects()).andReturn(expectResultPropertyList).once();
-        EasyMockUnitils.replay();
-
-        // TEST LAUNCH
-        List<DistributionMetricsProperty> localPropertyList = defaultDistributionMetricsInternalService.getMetricsProperties();
-
-        // RESULT CHECKS
-        Assert.assertNotNull(localPropertyList);
-        Assert.assertEquals(propertyMap.size(), localPropertyList.size());
-        for (DistributionMetricsProperty actualProperty : localPropertyList) {
-            DistributionMetricsProperty expectedProperty = propertyMap.get(actualProperty.getKey());
-            Assert.assertEquals(expectedProperty, actualProperty);
-        }
-
-    }
-
-    @Test
-    public void testUpdateMetricsProperties() {
-        // INIT EXPECTATIONS 
-        for (EMetricsPropertyKey key : EMetricsPropertyKey.values()) {
-            DistributionMetricsProperty property = propertyMap.get(key);
-            expect(distributionMetricsPropertyRepository.findByKey(key)).andReturn(property).once();
-        }
-        distributionMetricsPropertyRepository.flush();
-        EasyMock.expectLastCall();
-        EasyMockUnitils.replay();
-
-        // TEST LAUNCH
-        final EMetricsPropertyKey UPDATED_KEY = EMetricsPropertyKey.PROCESSING_TIME_DEL_MOBILE;
-        final Long UPDATED_VALUE = 3L;
-
-        List<DistributionMetricsProperty> metricsPropertyList = new ArrayList<DistributionMetricsProperty>();
-        for (EMetricsPropertyKey key : EMetricsPropertyKey.values()) {
-            DistributionMetricsProperty property = new DistributionMetricsProperty();
-            property.setKey(key);
-            if (key.equals(UPDATED_KEY)) {
-                property.setValue(UPDATED_VALUE);
-            } else {
-                property.setValue(propertyMap.get(key).getValue());
-            }
-            metricsPropertyList.add(property);
-        }
-        defaultDistributionMetricsInternalService.updateMetricsProperties(metricsPropertyList);
-
-        // RESULT CHECKS
-        Assert.assertNotNull(propertyMap);
-        for (EMetricsPropertyKey key : EMetricsPropertyKey.values()) {
-            Assert.assertNotNull(propertyMap.get(key));
-            DistributionMetricsProperty property = propertyMap.get(key);
-            if (key.equals(UPDATED_KEY)) {
-                Assert.assertEquals(UPDATED_VALUE, property.getValue());
-            } else {
-                Assert.assertEquals(DEFAULT_VALUE, property.getValue());
-            }
-        }
-    }
-}
Index: products/distribution/services/src/test/java/com/dgp/anthologic/distribution/batch/risk/batchrisk/BatchesForRiskComputationSpecificationTest.java
===================================================================
--- products/distribution/services/src/test/java/com/dgp/anthologic/distribution/batch/risk/batchrisk/BatchesForRiskComputationSpecificationTest.java	(revision 84474)
+++ products/distribution/services/src/test/java/com/dgp/anthologic/distribution/batch/risk/batchrisk/BatchesForRiskComputationSpecificationTest.java	(working copy)
@@ -1,97 +0,0 @@
-package com.dgp.anthologic.distribution.batch.risk.batchrisk;
-
-import java.util.Arrays;
-import java.util.Calendar;
-import java.util.Date;
-import java.util.HashSet;
-import java.util.List;
-import java.util.Set;
-
-import junit.framework.Assert;
-
-import org.junit.Test;
-import org.unitils.dbunit.annotation.DataSet;
-import org.unitils.inject.annotation.TestedObject;
-import org.unitils.spring.annotation.SpringBeanByType;
-
-import com.dgp.anthologic.core.enums.EBatchPriority;
-import com.dgp.anthologic.distribution.batch.Batch;
-import com.dgp.anthologic.distribution.batch.impl.DBHibernateBatchRepository;
-import com.dgp.anthologic.distribution.batch.risk.batchrisk.specification.BatchRiskComputationSpecificationFactory;
-import com.dgp.anthologic.distribution.hibernate.DBDistributionBaseTest;
-
-public class BatchesForRiskComputationSpecificationTest extends DBDistributionBaseTest {
-
-    private static final String DATASET_FILE_NAME = "findCandidateToRiskComputationBatches.xml";
-
-    @TestedObject
-    @SpringBeanByType
-    private DBHibernateBatchRepository batchRepository;
-
-    @DataSet(DATASET_FILE_NAME)
-    @Test
-    public void testFindCandidateBatchesForRiskComputation() {
-
-        Assert.assertNotNull(batchRepository);
-
-        Calendar actualCal = Calendar.getInstance();
-        // Now 2009/10/27-17h10
-        actualCal.set(Calendar.YEAR, 2009);
-        actualCal.set(Calendar.MONTH, 9); // NOTE : 9 IS OCTOBER
-        actualCal.set(Calendar.DAY_OF_MONTH, 27);
-        actualCal.set(Calendar.HOUR_OF_DAY, 17);
-        actualCal.set(Calendar.MINUTE, 10);
-
-        Date actualDate = actualCal.getTime();
-
-        BatchRiskComputationSpecificationFactory specificationFactory = new BatchRiskComputationSpecificationFactory();
-
-        BatchRiskComputationCandidatesSpecification topPrioritySpecification = specificationFactory
-                .createBatchRiskComputationPrioritySpecification(actualDate, Arrays.asList(EBatchPriority.TOP));
-
-        BatchRiskComputationCandidatesSpecification standardAndLowPrioritySpecification = specificationFactory
-                .createBatchRiskComputationPrioritySpecification(actualDate, Arrays.asList(EBatchPriority.STANDARD, EBatchPriority.LOW));
-
-        List<Batch> candidateBatchesHighPriority = batchRepository.find(topPrioritySpecification);
-
-        Assert.assertEquals(5, candidateBatchesHighPriority.size());
-
-        Set<Long> highBatchesId = new HashSet<Long>();
-        for (Batch bacth : candidateBatchesHighPriority) {
-            highBatchesId.add(bacth.getId());
-        }
-
-        Assert.assertTrue(highBatchesId.contains(310001L));
-        Assert.assertTrue(highBatchesId.contains(310002L));
-        Assert.assertTrue(highBatchesId.contains(310005L));
-        Assert.assertTrue(highBatchesId.contains(310031L));
-        Assert.assertTrue(highBatchesId.contains(310032L));
-
-        List<Batch> candidateBatchesStandardAndLowPriority = batchRepository.find(standardAndLowPrioritySpecification);
-
-        Assert.assertEquals(13, candidateBatchesStandardAndLowPriority.size());
-
-        Set<Long> standardAndLowBatchesId = new HashSet<Long>();
-        for (Batch bacth : candidateBatchesStandardAndLowPriority) {
-            standardAndLowBatchesId.add(bacth.getId());
-        }
-
-        Assert.assertTrue(standardAndLowBatchesId.contains(310011L));
-        Assert.assertTrue(standardAndLowBatchesId.contains(310012L));
-        Assert.assertTrue(standardAndLowBatchesId.contains(310013L));
-        Assert.assertTrue(standardAndLowBatchesId.contains(310015L));
-
-        Assert.assertTrue(standardAndLowBatchesId.contains(310021L));
-        Assert.assertTrue(standardAndLowBatchesId.contains(310022L));
-        Assert.assertTrue(standardAndLowBatchesId.contains(310023L));
-
-        Assert.assertTrue(standardAndLowBatchesId.contains(310041L));
-        Assert.assertTrue(standardAndLowBatchesId.contains(310042L));
-        Assert.assertTrue(standardAndLowBatchesId.contains(310043L));
-
-        Assert.assertTrue(standardAndLowBatchesId.contains(310051L));
-        Assert.assertTrue(standardAndLowBatchesId.contains(310052L));
-        Assert.assertTrue(standardAndLowBatchesId.contains(310053L));
-
-    }
-}
Index: products/distribution/services/src/test/java/com/dgp/anthologic/distribution/batch/risk/batchrisk/DefaultBatchRiskServiceTest.java
===================================================================
--- products/distribution/services/src/test/java/com/dgp/anthologic/distribution/batch/risk/batchrisk/DefaultBatchRiskServiceTest.java	(revision 84474)
+++ products/distribution/services/src/test/java/com/dgp/anthologic/distribution/batch/risk/batchrisk/DefaultBatchRiskServiceTest.java	(working copy)
@@ -1,150 +0,0 @@
-package com.dgp.anthologic.distribution.batch.risk.batchrisk;
-
-import static org.easymock.EasyMock.expect;
-import static org.junit.Assert.assertSame;
-import java.util.Date;
-
-import org.junit.Before;
-import org.junit.Test;
-import org.unitils.UnitilsJUnit4;
-import org.unitils.easymock.EasyMockUnitils;
-import org.unitils.easymock.annotation.Mock;
-import org.unitils.easymock.util.Calls;
-import org.unitils.inject.annotation.InjectIntoByType;
-import org.unitils.inject.annotation.TestedObject;
-
-import com.dgp.anthologic.distribution.batch.Batch;
-import com.dgp.anthologic.distribution.batch.BatchRepository;
-import com.dgp.anthologic.distribution.batch.risk.batchrisk.BatchRisk;
-import com.dgp.anthologic.distribution.batch.risk.batchrisk.BatchRiskFactory;
-import com.dgp.anthologic.distribution.batch.risk.batchrisk.BatchRiskRepository;
-import com.dgp.anthologic.distribution.batch.risk.batchrisk.impl.DefaultBatchRiskService;
-import com.dgp.anthologic.distribution.batch.risk.metrics.enums.EDeliveryKind;
-import com.dgp.anthologic.distribution.supplychain.ingrooves.InGroovesPlugin;
-import com.dgp.anthologic.distribution.supplychain.itunes41.ITunes41Plugin;
-import com.dgp.anthologic.distribution.supplychain.umgi.legacy.UmgiLegacyPlugin;
-import com.dgp.anthologic.distribution.supplychain.utils.DistributionExportPluginProvider;
-import com.dgp.anthologic.risk.domain.shared.ERisk;
-import com.dgp.commons.log.MessageLogger;
-
-public class DefaultBatchRiskServiceTest extends UnitilsJUnit4 {
-
-    @TestedObject
-    private DefaultBatchRiskService batchRiskService;
-
-    private Long batchID;
-
-    private BatchRisk batchRisk;
-
-    @Mock
-    @InjectIntoByType
-    private BatchRiskRepository batchRiskRepository;
-
-    @Mock
-    @InjectIntoByType
-    private BatchRiskFactory batchRiskFactory;
-
-    @Mock
-    @InjectIntoByType
-    private DistributionExportPluginProvider distributionExportPluginProvider;
-
-    @Mock
-    @InjectIntoByType
-    private BatchRepository batchRepository;
-
-    @Mock(calls = Calls.LENIENT)
-    protected MessageLogger serviceLogger;
-
-    @Before
-    public void initialize() {
-        batchID = 1L;
-
-        Date actualDate = new Date();
-        batchRisk = new BatchRisk(batchID, ERisk.LOW, actualDate, actualDate);
-    }
-
-    @Test
-    public void testRequestBatchRiskComputation_batchRiskCreation() {
-        // MOCKs CONFIGURATION
-        expect(batchRiskRepository.findByBatchID(batchID)).andReturn(null).once();
-        expect(batchRiskFactory.createBatchRisk(batchID)).andReturn(batchRisk).once();
-        expect(batchRiskRepository.createObject(batchRisk)).andReturn(batchRisk).once();
-        batchRiskRepository.flush();
-        EasyMockUnitils.replay();
-
-        // TEST
-        BatchRisk actualBatchRisk = batchRiskService.findOrCreate(batchID);
-
-        // VERIFY
-        assertSame(actualBatchRisk, batchRisk);
-        EasyMockUnitils.verify();
-    }
-
-    @Test
-    public void testRequestBatchRiskComputation_batchRiskUpdate() {
-        // DATA
-        Date actualDate = new Date();
-        batchRisk = new BatchRisk(batchID, ERisk.LOW, actualDate, actualDate) {
-            @Override
-            public Long getId() {
-                return 11L;
-            }
-        };
-
-        // MOCKs CONFIGURATION
-        expect(batchRiskRepository.findObjectById(11L)).andReturn(batchRisk).once();
-        batchRiskRepository.flush();
-        EasyMockUnitils.replay();
-
-        // TEST
-        BatchRisk actualBatchRisk = batchRiskService.update(11L, ERisk.HIGH);
-
-        // VERIFY
-        assertSame(actualBatchRisk.getRisk(), ERisk.HIGH);
-        EasyMockUnitils.verify();
-    }
-
-    @Test
-    public void testRequestBatchRiskComputation_deliveryKind() {
-        batchRiskService.setServiceLogger(serviceLogger);
-        // DATA
-        Batch batch1 = new Batch();
-        ITunes41Plugin iTunes41Plugin = new ITunes41Plugin();
-
-        Batch batch2 = new Batch();
-        UmgiLegacyPlugin umgiDefaultPlugin = new UmgiLegacyPlugin();
-
-        Batch batch3 = new Batch();
-        InGroovesPlugin inGroovesPlugin = new InGroovesPlugin();
-
-        // MOCKs CONFIGURATION
-        expect(batchRepository.findById(1L)).andReturn(batch1).once();
-        expect(distributionExportPluginProvider.getExportPlugin(batch1)).andReturn(iTunes41Plugin).once();
-
-        expect(batchRepository.findById(2L)).andReturn(batch2).once();
-        expect(distributionExportPluginProvider.getExportPlugin(batch2)).andReturn(umgiDefaultPlugin).once();
-
-        expect(batchRepository.findById(3L)).andReturn(batch3).once();
-        expect(distributionExportPluginProvider.getExportPlugin(batch3)).andReturn(inGroovesPlugin).once();
-        EasyMockUnitils.replay();
-
-        // TEST
-        EDeliveryKind deliveryKind1 = batchRiskService.getDeliveryKind(1L);
-
-        // VERIFY
-        assertSame(deliveryKind1, EDeliveryKind.ITUNES);
-
-        //TEST
-        EDeliveryKind deliveryKind2 = batchRiskService.getDeliveryKind(2L);
-
-        // VERIFY
-        assertSame(deliveryKind2, EDeliveryKind.UCS);
-
-        // TEST
-        EDeliveryKind deliveryKind3 = batchRiskService.getDeliveryKind(3L);
-
-        // VERIFY
-        assertSame(deliveryKind3, EDeliveryKind.MOBILE);
-        EasyMockUnitils.verify();
-    }
-}
Index: products/distribution/services/src/test/java/com/dgp/anthologic/distribution/batch/risk/batchrisk/computation/DefaultBatchRiskComputerTest.java
===================================================================
--- products/distribution/services/src/test/java/com/dgp/anthologic/distribution/batch/risk/batchrisk/computation/DefaultBatchRiskComputerTest.java	(revision 84474)
+++ products/distribution/services/src/test/java/com/dgp/anthologic/distribution/batch/risk/batchrisk/computation/DefaultBatchRiskComputerTest.java	(working copy)
@@ -1,97 +0,0 @@
-package com.dgp.anthologic.distribution.batch.risk.batchrisk.computation;
-
-import java.util.HashSet;
-import java.util.Set;
-
-import org.junit.Test;
-import org.unitils.UnitilsJUnit4;
-import org.unitils.easymock.EasyMockUnitils;
-import org.unitils.easymock.annotation.Mock;
-import org.unitils.easymock.util.Calls;
-import org.unitils.inject.annotation.InjectIntoByType;
-import org.unitils.inject.annotation.TestedObject;
-
-import com.dgp.anthologic.core.enums.ESyncStatus;
-import com.dgp.anthologic.distribution.batch.Batch;
-import com.dgp.anthologic.distribution.instruction.SyncInstruction;
-import com.dgp.anthologic.risk.domain.shared.ERisk;
-import com.dgp.commons.log.MessageLogger;
-
-import static org.junit.Assert.assertEquals;
-
-public class DefaultBatchRiskComputerTest extends UnitilsJUnit4 {
-
-    @TestedObject
-    private DefaultBatchRiskComputer defaultBatchRiskComputer;
-
-    @Mock(calls = Calls.LENIENT)
-    @InjectIntoByType
-    @SuppressWarnings("unused")
-    private MessageLogger serviceLogger;
-
-    @Test
-    public void testCorrectRiskWithBatchErrorsRatio_OK() {
-        // DATA
-        Batch batchToCorrect = new Batch() {
-            @Override
-            public int getActualSize() {
-                return 100;
-            };
-
-            @Override
-            public Set<SyncInstruction> getInstructionsByStatus(ESyncStatus... status) {
-                Set<SyncInstruction> sis = new HashSet<SyncInstruction>();
-                for (int i = 0; i <= 10; i++) {
-                    sis.add(new SyncInstruction());
-                }
-                return sis;
-            }
-
-            @Override
-            public Set<SyncInstruction> getInstructionsInError() {
-                Set<SyncInstruction> sis = new HashSet<SyncInstruction>();
-                for (int i = 0; i <= 10; i++) {
-                    sis.add(new SyncInstruction());
-                }
-                return sis;
-            }
-        };
-
-        EasyMockUnitils.replay();
-
-        // TEST
-        assertEquals(ERisk.HIGH, defaultBatchRiskComputer.correctRiskWithBatchErrorsRatio(batchToCorrect, ERisk.HIGH));
-        assertEquals(ERisk.HIGH, defaultBatchRiskComputer.correctRiskWithBatchErrorsRatio(batchToCorrect, ERisk.MEDIUM));
-        assertEquals(ERisk.MEDIUM, defaultBatchRiskComputer.correctRiskWithBatchErrorsRatio(batchToCorrect, ERisk.LOW));
-
-    }
-
-    @Test
-    public void testCorrectRiskWithBatchErrorsRatio_KO() {
-        // DATA
-        Batch batchToCorrect = new Batch() {
-            @Override
-            public int getActualSize() {
-                return 100;
-            };
-
-            @Override
-            public Set<SyncInstruction> getInstructionsByStatus(ESyncStatus... status) {
-                Set<SyncInstruction> sis = new HashSet<SyncInstruction>();
-                for (int i = 0; i < 10; i++) {
-                    sis.add(new SyncInstruction());
-                }
-                return sis;
-            }
-        };
-
-        EasyMockUnitils.replay();
-
-        // TEST
-        assertEquals(ERisk.HIGH, defaultBatchRiskComputer.correctRiskWithBatchErrorsRatio(batchToCorrect, ERisk.HIGH));
-        assertEquals(ERisk.MEDIUM, defaultBatchRiskComputer.correctRiskWithBatchErrorsRatio(batchToCorrect, ERisk.MEDIUM));
-        assertEquals(ERisk.LOW, defaultBatchRiskComputer.correctRiskWithBatchErrorsRatio(batchToCorrect, ERisk.LOW));
-
-    }
-
-}
Index: products/distribution/services/src/test/java/com/dgp/anthologic/distribution/batch/risk/batchrisk/computation/LeadContingencyRemainingTimeComputerTest.java
===================================================================
--- products/distribution/services/src/test/java/com/dgp/anthologic/distribution/batch/risk/batchrisk/computation/LeadContingencyRemainingTimeComputerTest.java	(revision 84474)
+++ products/distribution/services/src/test/java/com/dgp/anthologic/distribution/batch/risk/batchrisk/computation/LeadContingencyRemainingTimeComputerTest.java	(working copy)
@@ -1,70 +0,0 @@
-package com.dgp.anthologic.distribution.batch.risk.batchrisk.computation;
-
-import java.util.HashMap;
-import java.util.Map;
-
-import org.junit.Test;
-import org.unitils.UnitilsJUnit4;
-import org.unitils.easymock.EasyMockUnitils;
-import org.unitils.easymock.annotation.Mock;
-import org.unitils.inject.annotation.InjectIntoByType;
-import org.unitils.inject.annotation.TestedObject;
-
-import com.dgp.anthologic.distribution.application.risk.batchrisk.BatchContingency;
-import com.dgp.anthologic.distribution.batch.risk.metrics.DistributionMetricsProperty;
-import com.dgp.anthologic.distribution.batch.risk.metrics.DistributionMetricsService;
-import com.dgp.anthologic.distribution.batch.risk.metrics.enums.EDeliveryKind;
-import com.dgp.anthologic.distribution.batch.risk.metrics.enums.EMetricsPropertyKey;
-
-import static junit.framework.Assert.assertEquals;
-import static org.easymock.EasyMock.expect;
-
-public class LeadContingencyRemainingTimeComputerTest extends UnitilsJUnit4 {
-
-    @TestedObject
-    private LeadContingencyRemainingTimeComputer leadContingencyRemainingTimeComputer;
-
-    @Mock
-    @InjectIntoByType
-    private DistributionMetricsService distributionMetricsService;
-
-    @Test
-    public void getWeightOfBatchesToBeDeliveredBefore() {
-        // DATA
-        BatchContingency riskContingency = new BatchContingency(3L, 3L, 3);
-        BatchRiskComputationContext ctx = new BatchRiskComputationContext();
-        Map<Long, BatchContingency> mapBatchContingencyByBatchId = new HashMap<Long, BatchContingency>();
-        mapBatchContingencyByBatchId.put(1L, new BatchContingency(1L, 1L, 1));
-        mapBatchContingencyByBatchId.put(2L, new BatchContingency(2L, 2L, 2));
-        mapBatchContingencyByBatchId.put(3L, new BatchContingency(3L, 3L, 3));
-        mapBatchContingencyByBatchId.put(4L, new BatchContingency(4L, 4L, 4));
-        mapBatchContingencyByBatchId.put(5L, new BatchContingency(5L, 5L, 5));
-        ctx.setMapBatchContingencyByBatchId(mapBatchContingencyByBatchId);
-
-        // MOCK EXPECTATIONS
-        EasyMockUnitils.replay();
-
-        // TEST
-        long w = leadContingencyRemainingTimeComputer.getWeightOfBatchesToBeDeliveredBefore(riskContingency, ctx);
-        assertEquals(9L, w);
-    }
-
-    @Test
-    public void testGetRequiredTimePerMB() {
-        // DATA
-        DistributionMetricsProperty mp1 = new DistributionMetricsProperty(EMetricsPropertyKey.LEAD_CONTINGENCY_ITUNES, 12L);
-        DistributionMetricsProperty mp2 = new DistributionMetricsProperty(EMetricsPropertyKey.LEAD_CONTINGENCY_MOBILE, 13L);
-        DistributionMetricsProperty mp3 = new DistributionMetricsProperty(EMetricsPropertyKey.LEAD_CONTINGENCY_UCS, 14L);
-
-        // MOCK EXPECTATIONS
-        expect(distributionMetricsService.getLeadContingencyProperty(EDeliveryKind.ITUNES)).andReturn(mp1).anyTimes();
-        expect(distributionMetricsService.getLeadContingencyProperty(EDeliveryKind.MOBILE)).andReturn(mp2).anyTimes();
-        expect(distributionMetricsService.getLeadContingencyProperty(EDeliveryKind.UCS)).andReturn(mp3).anyTimes();
-        EasyMockUnitils.replay();
-
-        // TEST
-        assertEquals(14, leadContingencyRemainingTimeComputer.getRequiredTimePerMB(EDeliveryKind.UCS));
-        assertEquals(13, leadContingencyRemainingTimeComputer.getRequiredTimePerMB(EDeliveryKind.MOBILE));
-        assertEquals(12, leadContingencyRemainingTimeComputer.getRequiredTimePerMB(EDeliveryKind.ITUNES));
-    }
-}
Index: products/distribution/services/src/test/java/com/dgp/anthologic/distribution/batch/risk/batchrisk/DefaultBatchRiskFactoryTest.java
===================================================================
--- products/distribution/services/src/test/java/com/dgp/anthologic/distribution/batch/risk/batchrisk/DefaultBatchRiskFactoryTest.java	(revision 84474)
+++ products/distribution/services/src/test/java/com/dgp/anthologic/distribution/batch/risk/batchrisk/DefaultBatchRiskFactoryTest.java	(working copy)
@@ -1,45 +0,0 @@
-package com.dgp.anthologic.distribution.batch.risk.batchrisk;
-
-import java.util.Date;
-
-import org.junit.Test;
-import org.unitils.UnitilsJUnit4;
-import org.unitils.easymock.EasyMockUnitils;
-import org.unitils.easymock.annotation.Mock;
-import org.unitils.easymock.util.Calls;
-import org.unitils.inject.annotation.InjectInto;
-import org.unitils.inject.annotation.TestedObject;
-import org.unitils.reflectionassert.ReflectionAssert;
-import org.unitils.reflectionassert.ReflectionComparatorMode;
-
-import com.dgp.anthologic.distribution.batch.risk.batchrisk.BatchRisk;
-import com.dgp.anthologic.distribution.batch.risk.batchrisk.impl.DefaultBatchRiskFactory;
-import com.dgp.anthologic.risk.domain.shared.ERisk;
-import com.dgp.commons.log.MessageLogger;
-
-public class DefaultBatchRiskFactoryTest extends UnitilsJUnit4 {
-
-    @TestedObject
-    private DefaultBatchRiskFactory batchRiskFactory;
-
-    @Mock(calls = Calls.LENIENT)
-    @InjectInto(property = "serviceLogger")
-    protected MessageLogger serviceLogger;
-
-    @Test
-    public void testCreateBatchRisk() {
-        // DATA
-        Long batchID = 1L;
-
-        // MOCK CONFIGURATION
-        EasyMockUnitils.replay();
-
-        // TEST
-        BatchRisk actualBatchRisk = batchRiskFactory.createBatchRisk(batchID);
-
-        // VERIFY
-        Date actualDate = new Date();
-        BatchRisk expectedBatchRisk = new BatchRisk(batchID, ERisk.LOW, actualDate, actualDate);
-        ReflectionAssert.assertRefEquals(expectedBatchRisk, actualBatchRisk, ReflectionComparatorMode.LENIENT_DATES);
-    }
-}
Index: products/distribution/services/src/test/resources/application-config.xml
===================================================================
--- products/distribution/services/src/test/resources/application-config.xml	(revision 84474)
+++ products/distribution/services/src/test/resources/application-config.xml	(working copy)
@@ -29,8 +29,6 @@
         </property>
         <property name="configLocations">
             <list>
-                <value>classpath*:META-INF/persistence/risk/hibernate.cfg.xml</value>
-                <value>classpath*:META-INF/persistence/rank/hibernate.cfg.xml</value>
 				<value>classpath*:META-INF/persistence/distribution/hibernate.cfg.xml</value>  
 				<value>classpath*:META-INF/persistence/transfert/hibernate.cfg.xml</value>  
 				<value>classpath*:META-INF/persistence/bpconf/hibernate.cfg.xml</value> 
@@ -79,4 +77,4 @@
 	<import resource="classpath:META-INF/spring/distribution-loggers.xml"/>
 
     <bean id="userContextUtils" class="com.dgp.anthologic.distribution.stub.UserContextUtilsImpl" />
-</beans>
\ No newline at end of file
+</beans>
Index: products/distribution/services/src/main/resources/META-INF/spring/distribution-services.xml
===================================================================
--- products/distribution/services/src/main/resources/META-INF/spring/distribution-services.xml	(revision 84474)
+++ products/distribution/services/src/main/resources/META-INF/spring/distribution-services.xml	(working copy)
@@ -57,11 +57,9 @@
 		<property name="productAssembler" ref="productAssembler" />
 		<property name="exportChannelRepository" ref="exportChannelRepository" />
 		<property name="distributionMessageProvider" ref="distributionMessageProvider" />
-		<property name="riskComputerOnBatchStatusChangeService" ref="riskComputerOnBatchStatusChangeService" />
 		<property name="bpOrderDTORepository" ref="bpOrderDTORepository" />
 		<property name="pricingUpdateEventService" ref="priceUpdateEventServiceProxy" />
 		<property name="batchPriorityComputer" ref="batchPriorityComputer" />
-		<property name="rankingConfigurationService" ref="rankingConfigurationService" />
 		<property name="bpRepository" ref="bpRepository" />
 		<property name="handsetRepository" ref="handsetRepository" />
 		<property name="batchService" ref="batchService" />
@@ -129,7 +127,6 @@
 	<bean id="batchOperationService" class="com.dgp.anthologic.operation.batch.DefaultBatchOperationService" parent="applicationService" init-method="initialize" >
 		<property name="batchService"		    ref="batchService" />
 		<property name="batchRepository"		ref="batchRepository" />
-		<property name="batchRiskRepository"	ref="batchRiskRepository" />
 		<property name="bpRepository"			ref="bpRepository" />
 		<property name="clearanceFacade"		ref="clearanceFacade" />
 		<property name="orderRepository"		ref="orderRepository" />
@@ -583,7 +580,6 @@
 		<property name="selectedProductRepository" ref="selectedProductRepository" />
 		<property name="productService" ref="productService" />
 		<property name="auditTrailService" ref="distributionAuditTrailService" />
-		<property name="riskRequestService" ref="riskComputerOnBatchStatusChangeService" />
 		<property name="bpRepository" ref="bpRepository"/>
 	</bean>
 
@@ -836,7 +832,6 @@
 	<bean id="abstractServiceImpl" class="com.dgp.anthologic.distribution.shared.AbstractServiceImpl" abstract="true" >
 		<property name="serviceLogger" ref="distributionServiceLogger" />
 	</bean>
-	<import resource="classpath:META-INF/spring/batch-risk-services.xml" />	
 	
 	<!-- batch -->
 	<bean id="batchLifecycleEventsNotifier" class="com.dgp.anthologic.distribution.batch.impl.DefaultBatchLifecycleEventsNotifier" parent="abstractServiceImpl" />
Index: products/distribution/services/src/main/resources/META-INF/spring/distribution-daos.xml
===================================================================
--- products/distribution/services/src/main/resources/META-INF/spring/distribution-daos.xml	(revision 84474)
+++ products/distribution/services/src/main/resources/META-INF/spring/distribution-daos.xml	(working copy)
@@ -39,9 +39,6 @@
 	
 	<bean id="batchManufacturedFileRepository" class="com.dgp.anthologic.distribution.batch.impl.DBHibernateBatchManufacturedFileRepository" parent="hibernateDAO" />
 	
-	<bean id="distributionMetricsPropertyRepository" class="com.dgp.anthologic.distribution.infrastructure.persistence.hibernate.risk.DBHibernateDistributionMetricsPropertyRepository" parent="hibernateDAO" />
-	<bean id="batchRiskRepository" class="com.dgp.anthologic.distribution.infrastructure.persistence.hibernate.ucs.batch.risk.batchrisk.DBHibernateBatchRiskRepository" parent="hibernateDAO" />
-	<bean id="batchContingencyRepository" class="com.dgp.anthologic.distribution.infrastructure.persistence.hibernate.risk.HibernateBatchContingencyRepository" parent="hibernateDAO" />
 	<bean id="orderedProductRepository"	class="com.dgp.anthologic.distribution.infrastructure.persistence.hibernate.order.HibernateOrderProductRepository"	parent="hibernateDAO" />	
 	
 	<bean id="batchWeightingRepository" class="com.dgp.anthologic.distribution.infrastructure.persistence.hibernate.ranking.batchweighting.DBHibernateBatchWeightingRepository" parent="hibernateDAO" />
Index: products/distribution/services/src/main/resources/META-INF/spring/batch-risk-services.xml
===================================================================
--- products/distribution/services/src/main/resources/META-INF/spring/batch-risk-services.xml	(revision 84474)
+++ products/distribution/services/src/main/resources/META-INF/spring/batch-risk-services.xml	(working copy)
@@ -1,82 +0,0 @@
-<?xml version="1.0" encoding="UTF-8"?>
-<beans xmlns="http://www.springframework.org/schema/beans"
-	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
-	xmlns:aop="http://www.springframework.org/schema/aop"
-	xmlns:tx="http://www.springframework.org/schema/tx"
-	xmlns:util="http://www.springframework.org/schema/util"
-	xsi:schemaLocation="
-			http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-2.5.xsd
-			http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-2.5.xsd
-			http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-2.5.xsd
-			http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util-2.5.xsd">
-	
-	<!-- batch risk beans -->
-	<!-- metrics -->
-	
-    <bean id="distributionMetricsServiceUI" class="com.dgp.anthologic.distribution.application.risk.metrics.DefaultDistributionMetricsServiceUI" >
-		<property name="distributionMetricsService" ref="distributionMetricsService" />
-	</bean>
-	
-	<bean id="distributionMetricsService" class="com.dgp.anthologic.distribution.batch.risk.metrics.DefaultDistributionMetricsService" parent="abstractServiceImpl" >
-		<property name="distributionMetricsPropertyRepository" ref="distributionMetricsPropertyRepository" />
-	</bean>
-	
-	<bean id="batchRiskFactory" class="com.dgp.anthologic.distribution.batch.risk.batchrisk.impl.DefaultBatchRiskFactory" parent="abstractServiceImpl" />
-	
-	<bean id="batchRiskService" class="com.dgp.anthologic.distribution.batch.risk.batchrisk.impl.DefaultBatchRiskService" parent="abstractServiceImpl">
-		<property name="batchRiskFactory" ref="batchRiskFactory" />
-		<property name="batchRiskRepository" ref="batchRiskRepository" />
-		<property name="distributionExportPluginProvider" ref="distributionExportPluginProvider" />
-		<property name="batchRepository" ref="batchRepository" />
-	</bean>
-	
-	<bean id="batchRiskUpdaterService" class="com.dgp.anthologic.distribution.application.risk.batchrisk.BatchRiskUpdaterServiceDelegate" parent="abstractServiceImpl">
-		<property name="batchRepository" ref="batchRepository" />
-		<property name="riskRequestService" ref="riskRequestService" />
-	</bean>
-	
-	<!-- batch risk computation beans -->
-	<bean id="abstractRemainingTimeComputer" class="com.dgp.anthologic.distribution.batch.risk.batchrisk.computation.AbstractRemainingTimeComputer" abstract="true"  parent="abstractServiceImpl">
-		<property name="distributionMetricsService" ref="distributionMetricsService" />
-		<property name="batchRiskService" ref="batchRiskService"/>
-	</bean>
-	<bean id="provisioningRemainingTimeComputer" class="com.dgp.anthologic.distribution.batch.risk.batchrisk.computation.ProvisioningRemainingTimeComputer" parent="abstractRemainingTimeComputer">
-		<property name="nextStageRemainingTimeComputer" ref="packagingRemainingTimeComputer" />
-		<property name="provisioningUiService" ref="provisioningUiService" />
-	</bean>
-	<bean id="packagingRemainingTimeComputer" class="com.dgp.anthologic.distribution.batch.risk.batchrisk.computation.PackagingRemainingTimeComputer" parent="abstractRemainingTimeComputer">
-		<property name="nextStageRemainingTimeComputer" ref="deliveryRemainingTimeComputer" />
-		<property name="productAssemblyAssetsProvider" ref="productAssemblyAssetsProvider" />
-	</bean>
-	<bean id="deliveryRemainingTimeComputer" class="com.dgp.anthologic.distribution.batch.risk.batchrisk.computation.DeliveryRemainingTimeComputer" parent="abstractRemainingTimeComputer">
-		<property name="nextStageRemainingTimeComputer" ref="leadContingencyRemainingTimeComputer" />
-	</bean>
-	<bean id="leadContingencyRemainingTimeComputer" class="com.dgp.anthologic.distribution.batch.risk.batchrisk.computation.LeadContingencyRemainingTimeComputer" parent="abstractRemainingTimeComputer">
-		<!-- no stage after lead contingency computer -->
-		<!-- property name="nextStageRemainingTimeComputer" ref="packagingRemainingTimeComputer" /-->
-	</bean>			
-	
-	<bean id="securityMarginComputer" class="com.dgp.anthologic.distribution.batch.risk.batchrisk.computation.DefaultSecurityMarginComputer" parent="abstractServiceImpl">
-		<property name="distributionMetricsService" ref="distributionMetricsService" />
-	</bean>
-	
-	
-	<bean id="batchRiskComputer" class="com.dgp.anthologic.distribution.batch.risk.batchrisk.computation.DefaultBatchRiskComputer" parent="abstractServiceImpl" >
-		<property name="batchRepository" ref="batchRepository" />
-		<property name="remainingTimeComputer" ref="provisioningRemainingTimeComputer" />
-		<property name="securityMarginComputer" ref="securityMarginComputer" />
-	</bean>	
-	
-	<bean id="batchRiskRequestHandler" class="com.dgp.anthologic.distribution.batch.risk.request.BatchRiskRequestHandler" parent="abstractServiceImpl">
-		<property name="batchRiskService" ref="batchRiskService" />
-		<property name="batchRiskComputer" ref="batchRiskComputer" />
-		<property name="batchContingencyRepository" ref="batchContingencyRepository"/>
-		<property name="transactionTemplate" ref="transactionTemplate" />
-	</bean>
-	
-	<bean id="riskComputerOnBatchStatusChangeService" class="com.dgp.anthologic.distribution.batch.risk.DefaultRiskComputerOnBatchStatusChangeService" parent="abstractServiceImpl">
-		<property name="riskRequestService" ref="riskRequestService" />
-	</bean>
-	
-	<!-- end batch risk beans -->
-</beans>
Index: products/distribution/services/src/main/resources/META-INF/spring/distribution-jobs.xml
===================================================================
--- products/distribution/services/src/main/resources/META-INF/spring/distribution-jobs.xml	(revision 84474)
+++ products/distribution/services/src/main/resources/META-INF/spring/distribution-jobs.xml	(working copy)
@@ -94,17 +94,6 @@
 	</bean>
  -->
  
-	<!--  RISK JOB -->
-	<bean id="abstractJob" class="com.dgp.anthologic.distribution.infrastructure.jobs.risk.AbstractJob" abstract="true">
-		<property name="jobLogger" ref="riskLogger"/>
-	</bean>
-	<bean id="batchRiskUpdaterJob" class="com.dgp.anthologic.distribution.infrastructure.jobs.risk.AbstractBatchRiskUpdaterJob" abstract="true" parent="abstractJob">
-		<property name="batchRiskUpdaterService" ref="batchRiskUpdaterService"/>
-	</bean>
-	
-	<bean id="highPriorityBatchRiskUpdaterJob" class="com.dgp.anthologic.distribution.infrastructure.jobs.risk.HighPriorityBatchRiskUpdaterJob" parent="batchRiskUpdaterJob"/>
-	<bean id="mediumAndLowPriorityBatchRiskUpdaterJob" class="com.dgp.anthologic.distribution.infrastructure.jobs.risk.MediumAndLowPriorityBatchRiskUpdaterJob" parent="batchRiskUpdaterJob"/>
-	
 	<!-- Catalog synchronizer job -->
 	<bean id="catalogSynchronizerJob" class="com.dgp.anthologic.distribution.application.catalogItem.CatalogSynchronizerJob" parent="distributionJob">	
 		<property name="batchRepository" ref="batchRepository"/>
Index: products/distribution/services/src/main/resources/META-INF/spring/distribution-loggers.xml
===================================================================
--- products/distribution/services/src/main/resources/META-INF/spring/distribution-loggers.xml	(revision 84474)
+++ products/distribution/services/src/main/resources/META-INF/spring/distribution-loggers.xml	(working copy)
@@ -37,7 +37,6 @@
 	<log:logger id="bpInputProcessLogger"    loggerName="bpinput.exec" loggerFactoryName="dlf" level="DEBUG" />		
 	<log:logger id="assemblerLogger"    loggerName="assembler" loggerFactoryName="dlf" level="DEBUG" />
 	<log:logger id="opsServiceLogger"  loggerFactoryName="dlf" level="DEBUG" />
-	<log:logger id="riskLogger"  loggerFactoryName="dlf" level="DEBUG" />
 	<log:logger id="ucsEventEndPointLogger"  loggerFactoryName="dlf" level="DEBUG" />
 
 </beans>
Index: products/distribution/services/src/main/resources/META-INF/persistence/distribution/hibernate.cfg.xml
===================================================================
--- products/distribution/services/src/main/resources/META-INF/persistence/distribution/hibernate.cfg.xml	(revision 84474)
+++ products/distribution/services/src/main/resources/META-INF/persistence/distribution/hibernate.cfg.xml	(working copy)
@@ -70,14 +70,10 @@
 		<!-- Messaging -->
 		<mapping resource="META-INF/persistence/pkg-message.hbm.xml"/>
 		
-		<!-- Mapping for batch risk -->
-		<mapping class="com.dgp.anthologic.distribution.batch.risk.metrics.DistributionMetricsProperty" />
-		<mapping class="com.dgp.anthologic.distribution.batch.risk.batchrisk.BatchRisk" />
-		<mapping resource="META-INF/persistence/batch/risk/entities.hbm.xml" />		
-		
+	
 		<!-- Mapping for batch weighting -->
 		<!--  Mapping for BPHold Date -->		
 		<mapping class="com.dgp.anthologic.distribution.binarybpholddate.model.BinaryBPHoldDateUpdateEvent" />
 		
    </session-factory>
-</hibernate-configuration>
\ No newline at end of file
+</hibernate-configuration>
Index: products/distribution/services/src/main/resources/META-INF/persistence/batch/risk/entities.hbm.xml
===================================================================
--- products/distribution/services/src/main/resources/META-INF/persistence/batch/risk/entities.hbm.xml	(revision 84474)
+++ products/distribution/services/src/main/resources/META-INF/persistence/batch/risk/entities.hbm.xml	(working copy)
@@ -1,12 +0,0 @@
-<?xml version="1.0" encoding="UTF-8"?>
-<!DOCTYPE hibernate-mapping PUBLIC "-//Hibernate/Hibernate Mapping DTD 3.0//EN"
-        "http://hibernate.sourceforge.net/hibernate-mapping-3.0.dtd">
-<hibernate-mapping>
-
-	<!-- BC stands for BATCH_COMPUTE -->
-	<subclass name="com.dgp.anthologic.distribution.batch.risk.request.BatchRiskRequest" extends="AbstractRiskRequest" discriminator-value="BC">
-		<many-to-one name="source" column="SOURCE_ID" entity-name="com.dgp.anthologic.distribution.batch.Batch" fetch="join" lazy="false" not-null="true" update="false" />
-		<many-to-one name="batchRisk" column="BATCH_RISK_ID" entity-name="com.dgp.anthologic.distribution.batch.risk.batchrisk.BatchRisk" not-null="false" />
-	</subclass>
-
-</hibernate-mapping>
\ No newline at end of file
Index: products/distribution/services/src/main/resources/META-INF/persistence/hibernate.cfg_backup.xml
===================================================================
--- products/distribution/services/src/main/resources/META-INF/persistence/hibernate.cfg_backup.xml	(revision 84474)
+++ products/distribution/services/src/main/resources/META-INF/persistence/hibernate.cfg_backup.xml	(working copy)
@@ -43,9 +43,5 @@
 		<!-- Messaging -->
 		<mapping resource="META-INF/persistence/pkg-message.hbm.xml"/>
 		
-		<!-- Mapping for batch risk -->
-		<mapping class="com.dgp.anthologic.distribution.batch.risk.metrics.DistributionMetricsProperty" />
-		<mapping class="com.dgp.anthologic.distribution.batch.risk.batchrisk.BatchRisk" />
-		<mapping resource="META-INF/persistence/batch/risk/entities.hbm.xml" />		
    </session-factory>
-</hibernate-configuration>
\ No newline at end of file
+</hibernate-configuration>
Index: products/distribution/services/src/main/java/com/dgp/anthologic/distribution/application/risk/batchrisk/BatchRiskUpdaterService.java
===================================================================
--- products/distribution/services/src/main/java/com/dgp/anthologic/distribution/application/risk/batchrisk/BatchRiskUpdaterService.java	(revision 84474)
+++ products/distribution/services/src/main/java/com/dgp/anthologic/distribution/application/risk/batchrisk/BatchRiskUpdaterService.java	(working copy)
@@ -1,13 +0,0 @@
-package com.dgp.anthologic.distribution.application.risk.batchrisk;
-
-import java.util.List;
-
-import com.dgp.anthologic.core.enums.EBatchPriority;
-
-public interface BatchRiskUpdaterService {
-
-    List<Long> findBatchCandidatesByPriority(List<EBatchPriority> priorityList);
-
-    void launchRiskComputation(Long batchId);
-
-}
Index: products/distribution/services/src/main/java/com/dgp/anthologic/distribution/application/risk/batchrisk/BatchContingency.java
===================================================================
--- products/distribution/services/src/main/java/com/dgp/anthologic/distribution/application/risk/batchrisk/BatchContingency.java	(revision 84474)
+++ products/distribution/services/src/main/java/com/dgp/anthologic/distribution/application/risk/batchrisk/BatchContingency.java	(working copy)
@@ -1,55 +0,0 @@
-package com.dgp.anthologic.distribution.application.risk.batchrisk;
-
-import com.dgp.anthologic.distribution.batch.Batch;
-import com.dgp.anthologic.distribution.common.DistributionServicesRegistry;
-
-public class BatchContingency {
-
-    // ----------------------------------------------------------------------------------------
-    // Attributes
-    // ----------------------------------------------------------------------------------------        
-    private final Long batchId;
-    private final Long weight;
-    private final Integer priority;
-
-    // ----------------------------------------------------------------------------------------
-    // Constructor
-    // ----------------------------------------------------------------------------------------    
-    public BatchContingency(Batch batch) {
-        super();
-        this.batchId = batch.getId();
-        this.weight = batch.getWeight();
-        this.priority = computePriority(batch);
-    }
-
-    public BatchContingency(Long batchId, Long weight, Integer priority) {
-        super();
-        this.batchId = batchId;
-        this.weight = weight;
-        this.priority = priority;
-    }
-
-    // ----------------------------------------------------------------------------------------
-    // Business methods
-    // ----------------------------------------------------------------------------------------    
-
-    public Long getBatchId() {
-        return batchId;
-    }
-
-    public Long getWeight() {
-        return weight;
-    }
-
-    public Integer getPriority() {
-        return priority;
-    }
-
-    // ----------------------------------------------------------------------------------------
-    // Commodity methods
-    // ----------------------------------------------------------------------------------------
-    protected Integer computePriority(Batch batch) {
-        return DistributionServicesRegistry.getBatchPriorityComputer().computePriority(batch);
-    }
-
-}
Index: products/distribution/services/src/main/java/com/dgp/anthologic/distribution/application/risk/batchrisk/BatchContingencyRepository.java
===================================================================
--- products/distribution/services/src/main/java/com/dgp/anthologic/distribution/application/risk/batchrisk/BatchContingencyRepository.java	(revision 84474)
+++ products/distribution/services/src/main/java/com/dgp/anthologic/distribution/application/risk/batchrisk/BatchContingencyRepository.java	(working copy)
@@ -1,28 +0,0 @@
-package com.dgp.anthologic.distribution.application.risk.batchrisk;
-
-import java.util.Calendar;
-import java.util.Map;
-
-import com.dgp.anthologic.distribution.batch.Batch;
-import com.dgp.anthologic.distribution.utils.repository.DistributionRepository;
-
-/**
- * 
- * @author j.marcovi
- * 
- */
-
-public interface BatchContingencyRepository extends DistributionRepository<Batch> {
-
-    /**
-     * Return all the batchContingencies linked to the following batch(s) :<br>
-     * <ul>
-     * <li>Not delivered yet</li>
-     * </ul>
-     * Delivery End date before D+1 at 23H59M59s (D corresponds to the day of the date given in argument)</li>
-     * 
-     * @return The Map of BatchContingency per batch id
-     */
-    Map<Long, BatchContingency> getBatchContingencyMap(Calendar now);
-
-}
Index: products/distribution/services/src/main/java/com/dgp/anthologic/distribution/application/risk/batchrisk/BatchRiskUpdaterServiceDelegate.java
===================================================================
--- products/distribution/services/src/main/java/com/dgp/anthologic/distribution/application/risk/batchrisk/BatchRiskUpdaterServiceDelegate.java	(revision 84474)
+++ products/distribution/services/src/main/java/com/dgp/anthologic/distribution/application/risk/batchrisk/BatchRiskUpdaterServiceDelegate.java	(working copy)
@@ -1,93 +0,0 @@
-package com.dgp.anthologic.distribution.application.risk.batchrisk;
-
-import java.util.ArrayList;
-import java.util.Date;
-import java.util.List;
-
-import org.springframework.transaction.annotation.Propagation;
-import org.springframework.transaction.annotation.Transactional;
-
-import com.dgp.anthologic.core.enums.EBatchPriority;
-import com.dgp.anthologic.distribution.batch.Batch;
-import com.dgp.anthologic.distribution.batch.BatchRepository;
-import com.dgp.anthologic.distribution.batch.risk.batchrisk.specification.BatchRiskComputationSpecificationFactory;
-import com.dgp.anthologic.distribution.batch.risk.request.BatchRiskRequest;
-import com.dgp.anthologic.distribution.shared.AbstractServiceImpl;
-import com.dgp.anthologic.risk.domain.request.RiskRequestService;
-import com.dgp.anthologic.risk.domain.shared.ERisk;
-
-@Transactional(readOnly = true, propagation = Propagation.REQUIRED)
-public class BatchRiskUpdaterServiceDelegate extends AbstractServiceImpl implements BatchRiskUpdaterService {
-
-    private BatchRepository batchRepository;
-    private RiskRequestService riskRequestService;
-
-    public List<Long> findBatchCandidatesByPriority(List<EBatchPriority> priorityList) {
-        if (serviceLogger.isInfoEnabled()) {
-            serviceLogger.info("Looking for candidate batch for risk computing");
-        }
-
-        final Date actualDate = new Date();
-        List<Batch> batchList = getBatchRepository().find(
-                new BatchRiskComputationSpecificationFactory().createBatchRiskComputationPrioritySpecification(actualDate, priorityList));
-        List<Long> batchIds = new ArrayList<Long>();
-
-        if (batchList != null && !batchList.isEmpty()) {
-            for (Batch batch : batchList) {
-                batchIds.add(batch.getId());
-            }
-        }
-
-        if (serviceLogger.isInfoEnabled()) {
-            serviceLogger.info("Found {0} batch to compute risk", batchIds.size());
-        }
-
-        return batchIds;
-    }
-
-    public void launchRiskComputation(Long batchId) {
-        if (serviceLogger.isInfoEnabled()) {
-            serviceLogger.info("Launching risk computation for batch " + batchId);
-        }
-
-        if (batchId != null) {
-
-            Batch batch = getBatchRepository().findById(batchId);
-
-            BatchRiskRequest request = new BatchRiskRequest();
-            request.setSource(batch);
-            // Note : the default LOW risk should be set away
-            request.setRisk(ERisk.LOW);
-
-            if (serviceLogger.isDebugEnabled()) {
-                serviceLogger.debug("Submitting risk request for batch " + batchId + " ...");
-            }
-            getRiskRequestService().submitRequest(request);
-
-            if (serviceLogger.isDebugEnabled()) {
-                serviceLogger.debug("Risk request submitted for batch " + batchId + " ...");
-            }
-
-        }
-        if (serviceLogger.isInfoEnabled()) {
-            serviceLogger.info("Risk computation launched for batch " + batchId);
-        }
-    }
-
-    public void setBatchRepository(BatchRepository inBatchRepository) {
-        this.batchRepository = inBatchRepository;
-    }
-
-    public BatchRepository getBatchRepository() {
-        return batchRepository;
-    }
-
-    public void setRiskRequestService(RiskRequestService inRiskRequestService) {
-        this.riskRequestService = inRiskRequestService;
-    }
-
-    public RiskRequestService getRiskRequestService() {
-        return riskRequestService;
-    }
-
-}
Index: products/distribution/services/src/main/java/com/dgp/anthologic/distribution/application/risk/metrics/DefaultDistributionMetricsServiceUI.java
===================================================================
--- products/distribution/services/src/main/java/com/dgp/anthologic/distribution/application/risk/metrics/DefaultDistributionMetricsServiceUI.java	(revision 84474)
+++ products/distribution/services/src/main/java/com/dgp/anthologic/distribution/application/risk/metrics/DefaultDistributionMetricsServiceUI.java	(working copy)
@@ -1,136 +0,0 @@
-package com.dgp.anthologic.distribution.application.risk.metrics;
-
-import java.util.ArrayList;
-import java.util.HashMap;
-import java.util.List;
-import java.util.Map;
-
-import org.springframework.transaction.annotation.Propagation;
-import org.springframework.transaction.annotation.Transactional;
-
-import com.dgp.anthologic.core.enums.EBatchPriority;
-import com.dgp.anthologic.distribution.batch.risk.metrics.DistributionMetricsProperty;
-import com.dgp.anthologic.distribution.batch.risk.metrics.DistributionMetricsService;
-import com.dgp.anthologic.distribution.batch.risk.metrics.enums.EDeliveryKind;
-import com.dgp.anthologic.distribution.batch.risk.metrics.enums.EDistributionStep;
-import com.dgp.anthologic.distribution.batch.risk.metrics.enums.EMetricsPropertyKey;
-
-@Transactional(readOnly = true, propagation = Propagation.REQUIRED)
-public class DefaultDistributionMetricsServiceUI implements DistributionMetricsServiceUI {
-
-    private DistributionMetricsService distributionMetricsService;
-
-    public DistributionMetricsDto loadDistributionMetrics() {
-        List<DistributionMetricsProperty> metricsProperyList = getDistributionMetricsService().getMetricsProperties();
-        DistributionMetricsDto distributionMetricsDto = convertToDistributionMetricsDto(metricsProperyList);
-        return distributionMetricsDto;
-    }
-
-    @Transactional(readOnly = false, propagation = Propagation.REQUIRED)
-    public void updateDistributionMetrics(DistributionMetricsDto distributionMetricsDto) {
-        List<DistributionMetricsProperty> metricsProperyList = convertToMetricsPropertyList(distributionMetricsDto);
-        getDistributionMetricsService().updateMetricsProperties(metricsProperyList);
-    }
-
-    private List<DistributionMetricsProperty> convertToMetricsPropertyList(DistributionMetricsDto distributionMetricsDto) {
-        List<DistributionMetricsProperty> propertyList = new ArrayList<DistributionMetricsProperty>();
-
-        if (distributionMetricsDto != null) {
-            for (EMetricsPropertyKey key : EMetricsPropertyKey.values()) {
-                final EDeliveryKind deliveryKind = key.getDeliveryKind();
-                final EDistributionStep distributionStep = key.getDistributionStep();
-                final EBatchPriority batchPriority = key.getBatchPriority();
-
-                switch (key.getMetricsType()) {
-                case PROCESSING_TIME:
-                    Map<EDeliveryKind, Map<EDistributionStep, Long>> processingTimeMap = distributionMetricsDto.getProcessingTimeMap();
-
-                    if (deliveryKind != null && distributionStep != null && processingTimeMap != null
-                            && processingTimeMap.get(deliveryKind) != null
-                            && processingTimeMap.get(deliveryKind).get(distributionStep) != null) {
-                        DistributionMetricsProperty property = new DistributionMetricsProperty();
-                        property.setKey(key);
-                        property.setValue(processingTimeMap.get(deliveryKind).get(distributionStep));
-                        propertyList.add(property);
-                    }
-                    break;
-                case LEAD_CONTINGENCY:
-                    Map<EDeliveryKind, Long> leadContingencyMap = distributionMetricsDto.getLeadContingencyMap();
-
-                    if (deliveryKind != null && leadContingencyMap != null && leadContingencyMap.get(deliveryKind) != null) {
-                        DistributionMetricsProperty property = new DistributionMetricsProperty();
-                        property.setKey(key);
-                        property.setValue(leadContingencyMap.get(deliveryKind));
-                        propertyList.add(property);
-                    }
-                    break;
-
-                case SECURITY_MARGIN:
-                    Map<EBatchPriority, Long> securityMarginMap = distributionMetricsDto.getSecurityMarginMap();
-                    if (batchPriority != null && securityMarginMap != null && securityMarginMap.get(batchPriority) != null) {
-                        DistributionMetricsProperty property = new DistributionMetricsProperty();
-                        property.setKey(key);
-                        property.setValue(securityMarginMap.get(batchPriority));
-                        propertyList.add(property);
-                    }
-                    break;
-
-                default:
-                    break;
-                }
-
-            }
-        }
-        return propertyList;
-    }
-
-    private DistributionMetricsDto convertToDistributionMetricsDto(List<DistributionMetricsProperty> propertyList) {
-
-        DistributionMetricsDto dto = new DistributionMetricsDto();
-        dto.setLeadContingencyMap(new HashMap<EDeliveryKind, Long>());
-        dto.setSecurityMarginMap(new HashMap<EBatchPriority, Long>());
-        dto.setProcessingTimeMap(new HashMap<EDeliveryKind, Map<EDistributionStep, Long>>());
-
-        if (propertyList != null) {
-            for (DistributionMetricsProperty property : propertyList) {
-                EMetricsPropertyKey key = property.getKey();
-                if (key != null && key.getMetricsType() != null) {
-                    switch (key.getMetricsType()) {
-                    case PROCESSING_TIME:
-                        if (key.getDeliveryKind() != null && key.getDistributionStep() != null) {
-                            Map<EDeliveryKind, Map<EDistributionStep, Long>> processingTimeMap = dto.getProcessingTimeMap();
-                            if (processingTimeMap.get(key.getDeliveryKind()) == null) {
-                                processingTimeMap.put(key.getDeliveryKind(), new HashMap<EDistributionStep, Long>());
-                            }
-                            processingTimeMap.get(key.getDeliveryKind()).put(key.getDistributionStep(), property.getValue());
-                        }
-                        break;
-                    case LEAD_CONTINGENCY:
-                        if (key.getDeliveryKind() != null) {
-                            dto.getLeadContingencyMap().put(key.getDeliveryKind(), property.getValue());
-                        }
-                        break;
-
-                    case SECURITY_MARGIN:
-                        if (key.getBatchPriority() != null) {
-                            dto.getSecurityMarginMap().put(key.getBatchPriority(), property.getValue());
-                        }
-                        break;
-
-                    default:
-                        break;
-                    }
-                }
-            }
-        }
-        return dto;
-    }
-
-    public void setDistributionMetricsService(DistributionMetricsService inDistributionMetricsService) {
-        this.distributionMetricsService = inDistributionMetricsService;
-    }
-
-    public DistributionMetricsService getDistributionMetricsService() {
-        return distributionMetricsService;
-    }
-}
Index: products/distribution/services/src/main/java/com/dgp/anthologic/distribution/application/risk/metrics/DistributionMetricsDto.java
===================================================================
--- products/distribution/services/src/main/java/com/dgp/anthologic/distribution/application/risk/metrics/DistributionMetricsDto.java	(revision 84474)
+++ products/distribution/services/src/main/java/com/dgp/anthologic/distribution/application/risk/metrics/DistributionMetricsDto.java	(working copy)
@@ -1,39 +0,0 @@
-package com.dgp.anthologic.distribution.application.risk.metrics;
-
-import java.util.Map;
-
-import com.dgp.anthologic.core.enums.EBatchPriority;
-import com.dgp.anthologic.distribution.batch.risk.metrics.enums.EDeliveryKind;
-import com.dgp.anthologic.distribution.batch.risk.metrics.enums.EDistributionStep;
-
-public class DistributionMetricsDto {
-
-    private Map<EDeliveryKind, Long> leadContingencyMap;
-    private Map<EBatchPriority, Long> securityMarginMap;
-    private Map<EDeliveryKind, Map<EDistributionStep, Long>> processingTimeMap;
-
-    public void setLeadContingencyMap(Map<EDeliveryKind, Long> inLeadContingencyMap) {
-        this.leadContingencyMap = inLeadContingencyMap;
-    }
-
-    public Map<EDeliveryKind, Long> getLeadContingencyMap() {
-        return leadContingencyMap;
-    }
-
-    public void setSecurityMarginMap(Map<EBatchPriority, Long> inSecurityMarginMap) {
-        this.securityMarginMap = inSecurityMarginMap;
-    }
-
-    public Map<EBatchPriority, Long> getSecurityMarginMap() {
-        return securityMarginMap;
-    }
-
-    public void setProcessingTimeMap(Map<EDeliveryKind, Map<EDistributionStep, Long>> inProcessingTimeMap) {
-        this.processingTimeMap = inProcessingTimeMap;
-    }
-
-    public Map<EDeliveryKind, Map<EDistributionStep, Long>> getProcessingTimeMap() {
-        return processingTimeMap;
-    }
-
-}
Index: products/distribution/services/src/main/java/com/dgp/anthologic/distribution/application/risk/metrics/DistributionMetricsServiceUI.java
===================================================================
--- products/distribution/services/src/main/java/com/dgp/anthologic/distribution/application/risk/metrics/DistributionMetricsServiceUI.java	(revision 84474)
+++ products/distribution/services/src/main/java/com/dgp/anthologic/distribution/application/risk/metrics/DistributionMetricsServiceUI.java	(working copy)
@@ -1,8 +0,0 @@
-package com.dgp.anthologic.distribution.application.risk.metrics;
-
-public interface DistributionMetricsServiceUI {
-
-    public DistributionMetricsDto loadDistributionMetrics();
-
-    public void updateDistributionMetrics(DistributionMetricsDto distributionMetricsDto);
-}
Index: products/distribution/services/src/main/java/com/dgp/anthologic/distribution/infrastructure/jobs/risk/HighPriorityBatchRiskUpdaterJob.java
===================================================================
--- products/distribution/services/src/main/java/com/dgp/anthologic/distribution/infrastructure/jobs/risk/HighPriorityBatchRiskUpdaterJob.java	(revision 84474)
+++ products/distribution/services/src/main/java/com/dgp/anthologic/distribution/infrastructure/jobs/risk/HighPriorityBatchRiskUpdaterJob.java	(working copy)
@@ -1,15 +0,0 @@
-package com.dgp.anthologic.distribution.infrastructure.jobs.risk;
-
-import java.util.Arrays;
-import java.util.List;
-
-import com.dgp.anthologic.core.enums.EBatchPriority;
-
-public class HighPriorityBatchRiskUpdaterJob extends AbstractBatchRiskUpdaterJob {
-
-    @Override
-    public List<EBatchPriority> getBatchPriorityList() {
-        return Arrays.asList(EBatchPriority.TOP);
-    }
-
-}
Index: products/distribution/services/src/main/java/com/dgp/anthologic/distribution/infrastructure/jobs/risk/AbstractBatchRiskUpdaterJob.java
===================================================================
--- products/distribution/services/src/main/java/com/dgp/anthologic/distribution/infrastructure/jobs/risk/AbstractBatchRiskUpdaterJob.java	(revision 84474)
+++ products/distribution/services/src/main/java/com/dgp/anthologic/distribution/infrastructure/jobs/risk/AbstractBatchRiskUpdaterJob.java	(working copy)
@@ -1,43 +0,0 @@
-package com.dgp.anthologic.distribution.infrastructure.jobs.risk;
-
-import java.util.List;
-
-import com.dgp.anthologic.core.enums.EBatchPriority;
-import com.dgp.anthologic.distribution.application.risk.batchrisk.BatchRiskUpdaterService;
-
-public abstract class AbstractBatchRiskUpdaterJob extends AbstractJob {
-
-    public abstract List<EBatchPriority> getBatchPriorityList();
-
-    private BatchRiskUpdaterService batchRiskUpdaterService;
-
-    public void run() {
-        if (jobLogger.isInfoEnabled()) {
-            jobLogger.info("batch risk computation job running");
-        }
-
-        List<Long> batchIdList = null;
-        List<EBatchPriority> priorityList = getBatchPriorityList();
-
-        // 1) Find candidate batches for risk computation 
-        if (priorityList != null) {
-            batchIdList = getBatchRiskUpdaterService().findBatchCandidatesByPriority(priorityList);
-        }
-
-        // 2) Launch risk computation for candidate batches
-        if (batchIdList != null && !batchIdList.isEmpty()) {
-            for (Long batchId : batchIdList) {
-                getBatchRiskUpdaterService().launchRiskComputation(batchId);
-            }
-        }
-
-    }
-
-    public void setBatchRiskUpdaterService(BatchRiskUpdaterService inBatchRiskUpdaterService) {
-        this.batchRiskUpdaterService = inBatchRiskUpdaterService;
-    }
-
-    public BatchRiskUpdaterService getBatchRiskUpdaterService() {
-        return batchRiskUpdaterService;
-    }
-}
Index: products/distribution/services/src/main/java/com/dgp/anthologic/distribution/infrastructure/jobs/risk/AbstractJob.java
===================================================================
--- products/distribution/services/src/main/java/com/dgp/anthologic/distribution/infrastructure/jobs/risk/AbstractJob.java	(revision 84474)
+++ products/distribution/services/src/main/java/com/dgp/anthologic/distribution/infrastructure/jobs/risk/AbstractJob.java	(working copy)
@@ -1,17 +0,0 @@
-package com.dgp.anthologic.distribution.infrastructure.jobs.risk;
-
-import com.dgp.commons.log.MessageLogger;
-
-public abstract class AbstractJob implements Runnable {
-
-    protected MessageLogger jobLogger;
-
-    protected MessageLogger getJobLogger() {
-        return jobLogger;
-    }
-
-    public void setJobLogger(MessageLogger jobLogger) {
-        this.jobLogger = jobLogger;
-    }
-
-}
Index: products/distribution/services/src/main/java/com/dgp/anthologic/distribution/infrastructure/jobs/risk/MediumAndLowPriorityBatchRiskUpdaterJob.java
===================================================================
--- products/distribution/services/src/main/java/com/dgp/anthologic/distribution/infrastructure/jobs/risk/MediumAndLowPriorityBatchRiskUpdaterJob.java	(revision 84474)
+++ products/distribution/services/src/main/java/com/dgp/anthologic/distribution/infrastructure/jobs/risk/MediumAndLowPriorityBatchRiskUpdaterJob.java	(working copy)
@@ -1,15 +0,0 @@
-package com.dgp.anthologic.distribution.infrastructure.jobs.risk;
-
-import java.util.Arrays;
-import java.util.List;
-
-import com.dgp.anthologic.core.enums.EBatchPriority;
-
-public class MediumAndLowPriorityBatchRiskUpdaterJob extends AbstractBatchRiskUpdaterJob {
-
-    @Override
-    public List<EBatchPriority> getBatchPriorityList() {
-        return Arrays.asList(EBatchPriority.STANDARD, EBatchPriority.LOW);
-    }
-
-}
Index: products/distribution/services/src/main/java/com/dgp/anthologic/distribution/infrastructure/persistence/hibernate/risk/DBHibernateDistributionMetricsPropertyRepository.java
===================================================================
--- products/distribution/services/src/main/java/com/dgp/anthologic/distribution/infrastructure/persistence/hibernate/risk/DBHibernateDistributionMetricsPropertyRepository.java	(revision 84474)
+++ products/distribution/services/src/main/java/com/dgp/anthologic/distribution/infrastructure/persistence/hibernate/risk/DBHibernateDistributionMetricsPropertyRepository.java	(working copy)
@@ -1,35 +0,0 @@
-package com.dgp.anthologic.distribution.infrastructure.persistence.hibernate.risk;
-
-import java.util.List;
-
-import org.hibernate.HibernateException;
-import org.hibernate.Query;
-import org.hibernate.Session;
-import org.springframework.orm.hibernate3.HibernateCallback;
-
-import com.dgp.anthologic.distribution.batch.risk.metrics.DistributionMetricsProperty;
-import com.dgp.anthologic.distribution.batch.risk.metrics.DistributionMetricsPropertyRepository;
-import com.dgp.anthologic.distribution.batch.risk.metrics.enums.EMetricsPropertyKey;
-import com.dgp.anthologic.risk.infrastructure.persistence.hibernate.AbstractRiskManagementRepository;
-
-public class DBHibernateDistributionMetricsPropertyRepository extends AbstractRiskManagementRepository<DistributionMetricsProperty>
-        implements DistributionMetricsPropertyRepository {
-
-    @SuppressWarnings("unchecked")
-    public DistributionMetricsProperty findByKey(final EMetricsPropertyKey key) {
-        DistributionMetricsProperty property;
-        List<DistributionMetricsProperty> propertyList = this.getHibernateTemplate().executeFind(new HibernateCallback() {
-            public Object doInHibernate(Session session) throws HibernateException {
-                Query query = session.createQuery("from DistributionMetricsProperty property where property.key='" + key.name() + "'");
-                return query.list();
-            }
-        });
-
-        if (propertyList != null && propertyList.size() == 1) {
-            property = propertyList.get(0);
-        } else {
-            property = null;
-        }
-        return property;
-    }
-}
Index: products/distribution/services/src/main/java/com/dgp/anthologic/distribution/infrastructure/persistence/hibernate/risk/HibernateBatchContingencyRepository.java
===================================================================
--- products/distribution/services/src/main/java/com/dgp/anthologic/distribution/infrastructure/persistence/hibernate/risk/HibernateBatchContingencyRepository.java	(revision 84474)
+++ products/distribution/services/src/main/java/com/dgp/anthologic/distribution/infrastructure/persistence/hibernate/risk/HibernateBatchContingencyRepository.java	(working copy)
@@ -1,59 +0,0 @@
-package com.dgp.anthologic.distribution.infrastructure.persistence.hibernate.risk;
-
-import java.util.Arrays;
-import java.util.Calendar;
-import java.util.Date;
-import java.util.HashMap;
-import java.util.List;
-import java.util.Map;
-
-import org.hibernate.HibernateException;
-import org.hibernate.Session;
-import org.springframework.orm.hibernate3.HibernateCallback;
-
-import com.dgp.anthologic.core.enums.EBatchStatus;
-import com.dgp.anthologic.distribution.AbstractDistributionRepository;
-import com.dgp.anthologic.distribution.application.risk.batchrisk.BatchContingency;
-import com.dgp.anthologic.distribution.application.risk.batchrisk.BatchContingencyRepository;
-import com.dgp.anthologic.distribution.batch.Batch;
-
-public class HibernateBatchContingencyRepository extends AbstractDistributionRepository<Batch> implements BatchContingencyRepository {
-
-    private final static int NOON_HOUR = 23;
-    private final static int NOON_MINUTES = 59;
-    private final static int NOON_SECONDS = 59;
-    private final static int NOON_MILLISECONDS = 999;
-
-    @SuppressWarnings("unchecked")
-    public Map<Long, BatchContingency> getBatchContingencyMap(final Calendar now) {
-        final String queryString = "select distinct batch from Batch batch where batch.status not in (:deliveredStatus) "
-                + "and batch.deliveryEndDate <= :tomorrowAtNoon ";
-
-        List<Batch> batches = (List<Batch>) getHibernateTemplate().execute(new HibernateCallback() {
-            public Object doInHibernate(Session session) throws HibernateException {
-                return session.createQuery(queryString).setParameterList("deliveredStatus", getDeliveredStatuses())
-                        .setTimestamp("tomorrowAtNoon", getTomorrowAtNoon(now)).list();
-            }
-        });
-
-        Map<Long, BatchContingency> mapBatchContingency = new HashMap<Long, BatchContingency>();
-        for (Batch b : batches) {
-            mapBatchContingency.put(b.getId(), new BatchContingency(b));
-        }
-
-        return mapBatchContingency;
-    }
-
-    protected List<EBatchStatus> getDeliveredStatuses() {
-        return Arrays.asList(EBatchStatus.DELIVERED, EBatchStatus.CANCELED, EBatchStatus.NOTIFIED, EBatchStatus.NOTIFY,
-                EBatchStatus.NOTIFY_ERROR);
-    }
-
-    protected final Date getTomorrowAtNoon(Calendar now) {
-        Calendar t = Calendar.getInstance();
-        t.set(now.get(Calendar.YEAR), now.get(Calendar.MONTH), now.get(Calendar.DATE) + 1, NOON_HOUR, NOON_MINUTES, NOON_SECONDS);
-        t.set(Calendar.MILLISECOND, NOON_MILLISECONDS);
-        return t.getTime();
-    }
-
-}
Index: products/distribution/services/src/main/java/com/dgp/anthologic/distribution/infrastructure/persistence/hibernate/ucs/batch/risk/batchrisk/DBHibernateBatchRiskRepository.java
===================================================================
--- products/distribution/services/src/main/java/com/dgp/anthologic/distribution/infrastructure/persistence/hibernate/ucs/batch/risk/batchrisk/DBHibernateBatchRiskRepository.java	(revision 84474)
+++ products/distribution/services/src/main/java/com/dgp/anthologic/distribution/infrastructure/persistence/hibernate/ucs/batch/risk/batchrisk/DBHibernateBatchRiskRepository.java	(working copy)
@@ -1,14 +0,0 @@
-package com.dgp.anthologic.distribution.infrastructure.persistence.hibernate.ucs.batch.risk.batchrisk;
-
-import com.dgp.anthologic.distribution.AbstractDistributionRepository;
-import com.dgp.anthologic.distribution.batch.risk.batchrisk.BatchRisk;
-import com.dgp.anthologic.distribution.batch.risk.batchrisk.BatchRiskRepository;
-
-public class DBHibernateBatchRiskRepository extends AbstractDistributionRepository<BatchRisk> implements BatchRiskRepository {
-
-    public BatchRisk findByBatchID(Long batchID) {
-        String hqlQuery = "from BatchRisk br where br.batchID = :batchID";
-        return (BatchRisk) getSession().createQuery(hqlQuery).setLong("batchID", batchID).uniqueResult();
-    }
-
-}
Index: products/distribution/services/src/main/java/com/dgp/anthologic/distribution/common/DistributionServicesRegistry.java
===================================================================
--- products/distribution/services/src/main/java/com/dgp/anthologic/distribution/common/DistributionServicesRegistry.java	(revision 84474)
+++ products/distribution/services/src/main/java/com/dgp/anthologic/distribution/common/DistributionServicesRegistry.java	(working copy)
@@ -24,7 +24,6 @@
 import com.dgp.anthologic.distribution.batch.BatchRepository;
 import com.dgp.anthologic.distribution.batch.BatchService;
 import com.dgp.anthologic.distribution.batch.BatchingPolicyRegistry;
-import com.dgp.anthologic.distribution.batch.risk.RiskComputerOnBatchStatusChangeService;
 import com.dgp.anthologic.distribution.bpinput.BPInputClient;
 import com.dgp.anthologic.distribution.bporder.BpOrderRepository;
 import com.dgp.anthologic.distribution.capacity.CapacitySpaceRepository;
@@ -91,7 +90,6 @@
     private static ProductAssembler productAssembler;
     private static ExportChannelRepository exportChannelRepository;
     private static MessageProvider distributionMessageProvider;
-    private static RiskComputerOnBatchStatusChangeService riskComputerOnBatchStatusChangeService;
     private static BPOrderDTORepository bpOrderDTORepository;
     //    PBAr 20100701 : Use PricingUpdateEventServiceDelegate instead to allow read only mode and avoid dirty checking
     //    private static IPricingUpdateEventService pricingUpdateEventService;
@@ -415,14 +413,6 @@
         DistributionServicesRegistry.distributionMessageProvider = distributionMessageProvider;
     }
 
-    public static RiskComputerOnBatchStatusChangeService getRiskComputerOnBatchStatusChangeService() {
-        return riskComputerOnBatchStatusChangeService;
-    }
-
-    public void setRiskComputerOnBatchStatusChangeService(RiskComputerOnBatchStatusChangeService inRiskComputerOnBatchStatusChangeService) {
-        DistributionServicesRegistry.riskComputerOnBatchStatusChangeService = inRiskComputerOnBatchStatusChangeService;
-    }
-
     public static BPOrderDTORepository getBpOrderDTORepository() {
         return bpOrderDTORepository;
     }
@@ -558,7 +548,7 @@
     public void setClearanceFacade(ClearanceFacade clearanceFacade) {
         DistributionServicesRegistry.clearanceFacade = clearanceFacade;
     }
-    
+
     public static FileRepository getFileRepository() {
         return fileRepository;
     }
Index: products/distribution/services/src/main/java/com/dgp/anthologic/distribution/order/impl/DefaultBPOrderManager.java
===================================================================
--- products/distribution/services/src/main/java/com/dgp/anthologic/distribution/order/impl/DefaultBPOrderManager.java	(revision 84474)
+++ products/distribution/services/src/main/java/com/dgp/anthologic/distribution/order/impl/DefaultBPOrderManager.java	(working copy)
@@ -19,7 +19,6 @@
 import com.dgp.anthologic.distribution.audittrail.columns.OrderValidationEmailNotificationDTO;
 import com.dgp.anthologic.distribution.batch.BatchManager;
 import com.dgp.anthologic.distribution.batch.BatchingGroup;
-import com.dgp.anthologic.distribution.batch.risk.RiskComputerOnBatchStatusChangeService;
 import com.dgp.anthologic.distribution.bpinput.OrderingPerfStat;
 import com.dgp.anthologic.distribution.bpinput.impl.DefaultBPInputServer.OrderingPerfStatHolder;
 import com.dgp.anthologic.distribution.bporder.BpOrder;
@@ -78,8 +77,6 @@
     private INotificationManagementService notificationManagementService;
     private DistributionAuditTrailService auditTrailService;
 
-    private RiskComputerOnBatchStatusChangeService riskRequestService;
-
     private BPRepository bpRepository;
 
     @Override
@@ -248,10 +245,6 @@
                 capacityCallback.afterCapacityChecked(batchingCtx);
                 batchingCtx.clear();
                 batchManager.generateBatches(bpo, groups, false);
-                if (getRiskRequestService() != null) {
-                    serviceLogger.info("PERF - RISK REQUEST on Batch Creation DISABLED.");
-                    //getRiskRequestService().notifyBatchesCreation(generateBatches);
-                }
             } catch (CapacityException ce) {
                 capacityCallback.onCapacityError(ce, batchingCtx);
                 batchingCtx.clear();
@@ -451,14 +444,6 @@
         this.auditTrailService = auditTrailService;
     }
 
-    public void setRiskRequestService(RiskComputerOnBatchStatusChangeService riskRequestService) {
-        this.riskRequestService = riskRequestService;
-    }
-
-    protected RiskComputerOnBatchStatusChangeService getRiskRequestService() {
-        return riskRequestService;
-    }
-
     public void setBpRepository(BPRepository bpRepository) {
         this.bpRepository = bpRepository;
     }
Index: products/distribution/services/src/main/java/com/dgp/anthologic/distribution/batch/risk/RiskComputerOnBatchStatusChangeService.java
===================================================================
--- products/distribution/services/src/main/java/com/dgp/anthologic/distribution/batch/risk/RiskComputerOnBatchStatusChangeService.java	(revision 84474)
+++ products/distribution/services/src/main/java/com/dgp/anthologic/distribution/batch/risk/RiskComputerOnBatchStatusChangeService.java	(working copy)
@@ -1,14 +0,0 @@
-package com.dgp.anthologic.distribution.batch.risk;
-
-import java.util.List;
-
-import com.dgp.anthologic.core.enums.EBatchStatus;
-import com.dgp.anthologic.distribution.batch.Batch;
-
-public interface RiskComputerOnBatchStatusChangeService {
-
-    void notifyBatchStatusChange(EBatchStatus oldStatus, EBatchStatus newStatus, Batch batch);
-
-    void notifyBatchesCreation(List<Batch> batches);
-
-}
Index: products/distribution/services/src/main/java/com/dgp/anthologic/distribution/batch/risk/DefaultRiskComputerOnBatchStatusChangeService.java
===================================================================
--- products/distribution/services/src/main/java/com/dgp/anthologic/distribution/batch/risk/DefaultRiskComputerOnBatchStatusChangeService.java	(revision 84474)
+++ products/distribution/services/src/main/java/com/dgp/anthologic/distribution/batch/risk/DefaultRiskComputerOnBatchStatusChangeService.java	(working copy)
@@ -1,75 +0,0 @@
-package com.dgp.anthologic.distribution.batch.risk;
-
-import java.util.Arrays;
-import java.util.Date;
-import java.util.List;
-
-import com.dgp.anthologic.core.enums.EBatchStatus;
-import com.dgp.anthologic.core.model.domain.shared.Specification;
-import com.dgp.anthologic.distribution.batch.Batch;
-import com.dgp.anthologic.distribution.batch.risk.batchrisk.specification.BatchRiskComputationSpecificationFactory;
-import com.dgp.anthologic.distribution.batch.risk.request.BatchRiskRequest;
-import com.dgp.anthologic.distribution.shared.AbstractServiceImpl;
-import com.dgp.anthologic.risk.domain.request.RiskRequestService;
-import com.dgp.anthologic.risk.domain.shared.ERisk;
-
-public class DefaultRiskComputerOnBatchStatusChangeService extends AbstractServiceImpl implements RiskComputerOnBatchStatusChangeService {
-
-    private RiskRequestService riskRequestService;
-
-    /**
-     * This method must be called each time following batch status transition occurs : - "Provisioning" to "Provisioned" - "Packaging" to
-     * "Packaging error" - "Packaging" to "Packaged" - "Delivery" to "Delivery error"
-     */
-    public void notifyBatchStatusChange(EBatchStatus oldStatus, EBatchStatus newStatus, Batch batch) {
-        if (batch != null && batch.getId() != null && batch.getPriority() != null && newStatus != null && oldStatus != null) {
-            BatchRiskComputationSpecificationFactory specificationFactory = new BatchRiskComputationSpecificationFactory();
-            submitRiskComputationRequestIfBatchIsCandidate(batch, specificationFactory);
-        }
-
-    }
-
-    public void notifyBatchesCreation(List<Batch> batches) {
-        BatchRiskComputationSpecificationFactory specificationFactory = new BatchRiskComputationSpecificationFactory();
-        for (Batch batch : batches) {
-            submitRiskComputationRequestIfBatchIsCandidate(batch, specificationFactory);
-        }
-    }
-
-    public void submitRiskComputationRequestIfBatchIsCandidate(final Batch batch,
-            final BatchRiskComputationSpecificationFactory specificationFactory) {
-        Specification<Batch> specification = specificationFactory.createBatchRiskComputationSpecification(new Date(), Arrays.asList(batch
-                .getPriority()));
-        if (specification.isSatisfiedBy(batch)) {
-            submitRiskComputationRequest(batch);
-        }
-
-    }
-
-    private void submitRiskComputationRequest(Batch batch) {
-
-        BatchRiskRequest request = new BatchRiskRequest();
-        request.setSource(batch);
-        // Note : the default LOW risk should be set away
-        request.setRisk(ERisk.LOW);
-
-        if (serviceLogger.isDebugEnabled()) {
-            serviceLogger.debug("Submitting risk request for batch " + batch.getId() + " ...");
-        }
-        getRiskRequestService().submitRequest(request);
-
-        if (serviceLogger.isDebugEnabled()) {
-            serviceLogger.debug("Risk request submitted for batch " + batch.getId());
-        }
-
-    }
-
-    public void setRiskRequestService(RiskRequestService inRiskRequestService) {
-        this.riskRequestService = inRiskRequestService;
-    }
-
-    public RiskRequestService getRiskRequestService() {
-        return riskRequestService;
-    }
-
-}
Index: products/distribution/services/src/main/java/com/dgp/anthologic/distribution/batch/risk/metrics/DistributionMetricsProperty.java
===================================================================
--- products/distribution/services/src/main/java/com/dgp/anthologic/distribution/batch/risk/metrics/DistributionMetricsProperty.java	(revision 84474)
+++ products/distribution/services/src/main/java/com/dgp/anthologic/distribution/batch/risk/metrics/DistributionMetricsProperty.java	(working copy)
@@ -1,88 +0,0 @@
-package com.dgp.anthologic.distribution.batch.risk.metrics;
-
-import javax.persistence.Column;
-import javax.persistence.Entity;
-import javax.persistence.EnumType;
-import javax.persistence.Enumerated;
-import javax.persistence.SequenceGenerator;
-import javax.persistence.Table;
-
-import com.dgp.anthologic.distribution.batch.risk.metrics.enums.EMetricsPropertyKey;
-import com.dgp.anthologic.distribution.utils.DomainObject;
-
-@Entity
-@SequenceGenerator(name = "generator", sequenceName = "ID_SEQUENCE", allocationSize = DomainObject.defaultAllocationSize)
-@Table(name = "RSK_DST_METRICS_PROPERTY")
-public class DistributionMetricsProperty extends DomainObject {
-
-    private EMetricsPropertyKey key;
-    private Long value;
-
-    public DistributionMetricsProperty() {
-        super();
-    }
-
-    public DistributionMetricsProperty(EMetricsPropertyKey inKey, Long inValue) {
-        super();
-        this.key = inKey;
-        this.value = inValue;
-    }
-
-    public void setKey(EMetricsPropertyKey inKey) {
-        this.key = inKey;
-    }
-
-    public void setValue(Long inValue) {
-        this.value = inValue;
-    }
-
-    @Column(name = "KEY", nullable = false)
-    @Enumerated(EnumType.STRING)
-    public EMetricsPropertyKey getKey() {
-        return key;
-    }
-
-    @Column(name = "VALUE", nullable = false)
-    public Long getValue() {
-        return value;
-    }
-
-    @Override
-    public boolean equals(Object obj) {
-        if (this == obj) {
-            return true;
-        }
-        if (obj == null) {
-            return false;
-        }
-        if (getClass() != obj.getClass()) {
-            return false;
-        }
-        DistributionMetricsProperty other = (DistributionMetricsProperty) obj;
-        if (key == null) {
-            if (other.key != null) {
-                return false;
-            }
-        } else if (!key.equals(other.key)) {
-            return false;
-        }
-        if (value == null) {
-            if (other.value != null) {
-                return false;
-            }
-        } else if (!value.equals(other.value)) {
-            return false;
-        }
-        return true;
-    }
-
-    @Override
-    public int hashCode() {
-        final int prime = Integer.SIZE - 1;
-        int result = 1;
-        result = prime * result + (key == null ? 0 : (key.ordinal() ^ (key.ordinal() >>> Integer.SIZE)));
-        result = prime * result + (int) (value ^ (value >>> Integer.SIZE));
-        return result;
-    }
-
-}
Index: products/distribution/services/src/main/java/com/dgp/anthologic/distribution/batch/risk/metrics/DistributionMetricsPropertyRepository.java
===================================================================
--- products/distribution/services/src/main/java/com/dgp/anthologic/distribution/batch/risk/metrics/DistributionMetricsPropertyRepository.java	(revision 84474)
+++ products/distribution/services/src/main/java/com/dgp/anthologic/distribution/batch/risk/metrics/DistributionMetricsPropertyRepository.java	(working copy)
@@ -1,11 +0,0 @@
-package com.dgp.anthologic.distribution.batch.risk.metrics;
-
-import com.dgp.anthologic.distribution.batch.risk.metrics.enums.EMetricsPropertyKey;
-import com.dgp.anthologic.risk.domain.shared.RiskManagementRepository;
-
-public interface DistributionMetricsPropertyRepository extends RiskManagementRepository<DistributionMetricsProperty> {
-
-    // BatchRiskRepository interface is the RiskManagementRepository interface configured with DistributionMetricsProperty
-
-    DistributionMetricsProperty findByKey(EMetricsPropertyKey key);
-}
Index: products/distribution/services/src/main/java/com/dgp/anthologic/distribution/batch/risk/metrics/DefaultDistributionMetricsService.java
===================================================================
--- products/distribution/services/src/main/java/com/dgp/anthologic/distribution/batch/risk/metrics/DefaultDistributionMetricsService.java	(revision 84474)
+++ products/distribution/services/src/main/java/com/dgp/anthologic/distribution/batch/risk/metrics/DefaultDistributionMetricsService.java	(working copy)
@@ -1,112 +0,0 @@
-package com.dgp.anthologic.distribution.batch.risk.metrics;
-
-import java.util.List;
-
-import com.dgp.anthologic.core.enums.EBatchPriority;
-import com.dgp.anthologic.distribution.batch.risk.metrics.enums.EDeliveryKind;
-import com.dgp.anthologic.distribution.batch.risk.metrics.enums.EDistributionStep;
-import com.dgp.anthologic.distribution.batch.risk.metrics.enums.EMetricsPropertyKey;
-import com.dgp.anthologic.distribution.batch.risk.metrics.enums.EMetricsType;
-import com.dgp.anthologic.distribution.shared.AbstractServiceImpl;
-
-public class DefaultDistributionMetricsService extends AbstractServiceImpl implements DistributionMetricsService {
-
-    private DistributionMetricsPropertyRepository distributionMetricsPropertyRepository;
-
-    public List<DistributionMetricsProperty> getMetricsProperties() {
-        List<DistributionMetricsProperty> propertyList = distributionMetricsPropertyRepository.getAllObjects();
-        return propertyList;
-    }
-
-    public void updateMetricsProperties(List<DistributionMetricsProperty> metricsProperyList) {
-
-        if (metricsProperyList != null) {
-            for (DistributionMetricsProperty distributionMetricsProperty : metricsProperyList) {
-                if (distributionMetricsProperty.getKey() != null) {
-                    DistributionMetricsProperty property = distributionMetricsPropertyRepository.findByKey(distributionMetricsProperty
-                            .getKey());
-                    if (property != null) {
-                        property.setValue(distributionMetricsProperty.getValue());
-                    }
-                }
-            }
-            distributionMetricsPropertyRepository.flush();
-        }
-    }
-
-    public void setDistributionMetricsPropertyRepository(DistributionMetricsPropertyRepository inDistributionMetricsPropertyRepository) {
-        this.distributionMetricsPropertyRepository = inDistributionMetricsPropertyRepository;
-    }
-
-    public DistributionMetricsPropertyRepository getDistributionMetricsPropertyRepository() {
-        return distributionMetricsPropertyRepository;
-    }
-
-    public DistributionMetricsProperty getLeadContingencyProperty(EDeliveryKind deliveryKind) {
-        final DistributionMetricsProperty result;
-        EMetricsPropertyKey searchedKey = null;
-        if (deliveryKind != null) {
-            for (EMetricsPropertyKey key : EMetricsPropertyKey.values()) {
-                if (key.getMetricsType().equals(EMetricsType.LEAD_CONTINGENCY) && key.getDeliveryKind() != null
-                        && key.getDeliveryKind().equals(deliveryKind)) {
-                    searchedKey = key;
-                }
-            }
-            if (searchedKey != null) {
-                result = distributionMetricsPropertyRepository.findByKey(searchedKey);
-            } else {
-                result = null;
-            }
-
-        } else {
-            result = null;
-        }
-        return result;
-    }
-
-    public DistributionMetricsProperty getProcessingTimeProperty(EDeliveryKind deliveryKind, EDistributionStep distributionStep) {
-        final DistributionMetricsProperty result;
-        EMetricsPropertyKey searchedKey = null;
-        if (deliveryKind != null && distributionStep != null) {
-            for (EMetricsPropertyKey key : EMetricsPropertyKey.values()) {
-                if (key.getMetricsType().equals(EMetricsType.PROCESSING_TIME) && key.getDeliveryKind() != null
-                        && key.getDeliveryKind().equals(deliveryKind) && key.getDistributionStep() != null
-                        && key.getDistributionStep().equals(distributionStep)) {
-                    searchedKey = key;
-                }
-            }
-            if (searchedKey != null) {
-                result = distributionMetricsPropertyRepository.findByKey(searchedKey);
-            } else {
-                result = null;
-            }
-
-        } else {
-            result = null;
-        }
-        return result;
-    }
-
-    public DistributionMetricsProperty getSecurityMarginProperty(EBatchPriority priority) {
-        final DistributionMetricsProperty result;
-        EMetricsPropertyKey searchedKey = null;
-        if (priority != null) {
-            for (EMetricsPropertyKey key : EMetricsPropertyKey.values()) {
-                if (key.getMetricsType().equals(EMetricsType.SECURITY_MARGIN) && key.getBatchPriority() != null
-                        && key.getBatchPriority().equals(priority)) {
-                    searchedKey = key;
-                }
-            }
-            if (searchedKey != null) {
-                result = distributionMetricsPropertyRepository.findByKey(searchedKey);
-            } else {
-                result = null;
-            }
-
-        } else {
-            result = null;
-        }
-        return result;
-    }
-
-}
Index: products/distribution/services/src/main/java/com/dgp/anthologic/distribution/batch/risk/metrics/DistributionMetricsService.java
===================================================================
--- products/distribution/services/src/main/java/com/dgp/anthologic/distribution/batch/risk/metrics/DistributionMetricsService.java	(revision 84474)
+++ products/distribution/services/src/main/java/com/dgp/anthologic/distribution/batch/risk/metrics/DistributionMetricsService.java	(working copy)
@@ -1,21 +0,0 @@
-package com.dgp.anthologic.distribution.batch.risk.metrics;
-
-import java.util.List;
-
-import com.dgp.anthologic.core.enums.EBatchPriority;
-import com.dgp.anthologic.distribution.batch.risk.metrics.enums.EDeliveryKind;
-import com.dgp.anthologic.distribution.batch.risk.metrics.enums.EDistributionStep;
-
-public interface DistributionMetricsService {
-
-    public List<DistributionMetricsProperty> getMetricsProperties();
-
-    public void updateMetricsProperties(List<DistributionMetricsProperty> metricsProperyList);
-
-    public DistributionMetricsProperty getProcessingTimeProperty(EDeliveryKind deliveryKind, EDistributionStep distributionStep);
-
-    public DistributionMetricsProperty getLeadContingencyProperty(EDeliveryKind deliveryKind);
-
-    public DistributionMetricsProperty getSecurityMarginProperty(EBatchPriority risk);
-
-}
Index: products/distribution/services/src/main/java/com/dgp/anthologic/distribution/batch/risk/metrics/enums/EMetricsPropertyKey.java
===================================================================
--- products/distribution/services/src/main/java/com/dgp/anthologic/distribution/batch/risk/metrics/enums/EMetricsPropertyKey.java	(revision 84474)
+++ products/distribution/services/src/main/java/com/dgp/anthologic/distribution/batch/risk/metrics/enums/EMetricsPropertyKey.java	(working copy)
@@ -1,57 +0,0 @@
-package com.dgp.anthologic.distribution.batch.risk.metrics.enums;
-
-import com.dgp.anthologic.core.enums.EBatchPriority;
-
-public enum EMetricsPropertyKey {
-
-    // PROCESSING TIME
-    PROCESSING_TIME_PRV_UCS(EMetricsType.PROCESSING_TIME, EDistributionStep.PROVISIONING, EDeliveryKind.UCS, null),
-    PROCESSING_TIME_PRV_ITUNES(EMetricsType.PROCESSING_TIME, EDistributionStep.PROVISIONING, EDeliveryKind.ITUNES, null),
-    PROCESSING_TIME_PRV_MOBILE(EMetricsType.PROCESSING_TIME, EDistributionStep.PROVISIONING, EDeliveryKind.MOBILE, null),
-    PROCESSING_TIME_PCK_UCS(EMetricsType.PROCESSING_TIME, EDistributionStep.PACKAGING, EDeliveryKind.UCS, null),
-    PROCESSING_TIME_PCK_ITUNES(EMetricsType.PROCESSING_TIME, EDistributionStep.PACKAGING, EDeliveryKind.ITUNES, null),
-    PROCESSING_TIME_PCK_MOBILE(EMetricsType.PROCESSING_TIME, EDistributionStep.PACKAGING, EDeliveryKind.MOBILE, null),
-    PROCESSING_TIME_DEL_UCS(EMetricsType.PROCESSING_TIME, EDistributionStep.DELIVERING, EDeliveryKind.UCS, null),
-    PROCESSING_TIME_DEL_ITUNES(EMetricsType.PROCESSING_TIME, EDistributionStep.DELIVERING, EDeliveryKind.ITUNES, null),
-    PROCESSING_TIME_DEL_MOBILE(EMetricsType.PROCESSING_TIME, EDistributionStep.DELIVERING, EDeliveryKind.MOBILE, null),
-
-    // LEAD CONTINGENCY
-    LEAD_CONTINGENCY_UCS(EMetricsType.LEAD_CONTINGENCY, null, EDeliveryKind.UCS, null),
-    LEAD_CONTINGENCY_ITUNES(EMetricsType.LEAD_CONTINGENCY, null, EDeliveryKind.ITUNES, null),
-    LEAD_CONTINGENCY_MOBILE(EMetricsType.LEAD_CONTINGENCY, null, EDeliveryKind.MOBILE, null),
-
-    // SECURITY MARGIN
-    SECURITY_MARGIN_HIGH(EMetricsType.SECURITY_MARGIN, null, null, EBatchPriority.TOP),
-    SECURITY_MARGIN_MEDIUM(EMetricsType.SECURITY_MARGIN, null, null, EBatchPriority.STANDARD),
-    SECURITY_MARGIN_LOW(EMetricsType.SECURITY_MARGIN, null, null, EBatchPriority.LOW);
-
-    private EMetricsType metricsType;
-    private EDeliveryKind deliveryKind;
-    private EDistributionStep distributionStep;
-    private EBatchPriority batchPriority;
-
-    private EMetricsPropertyKey(EMetricsType inMetricsType, EDistributionStep inDistributionStep, EDeliveryKind inDeliveryKind,
-            EBatchPriority inBatchPriority) {
-        this.metricsType = inMetricsType;
-        this.deliveryKind = inDeliveryKind;
-        this.distributionStep = inDistributionStep;
-        this.batchPriority = inBatchPriority;
-    }
-
-    public EMetricsType getMetricsType() {
-        return metricsType;
-    }
-
-    public EDeliveryKind getDeliveryKind() {
-        return deliveryKind;
-    }
-
-    public EDistributionStep getDistributionStep() {
-        return distributionStep;
-    }
-
-    public EBatchPriority getBatchPriority() {
-        return batchPriority;
-    }
-
-}
Index: products/distribution/services/src/main/java/com/dgp/anthologic/distribution/batch/risk/metrics/enums/EMetricsType.java
===================================================================
--- products/distribution/services/src/main/java/com/dgp/anthologic/distribution/batch/risk/metrics/enums/EMetricsType.java	(revision 84474)
+++ products/distribution/services/src/main/java/com/dgp/anthologic/distribution/batch/risk/metrics/enums/EMetricsType.java	(working copy)
@@ -1,8 +0,0 @@
-package com.dgp.anthologic.distribution.batch.risk.metrics.enums;
-
-public enum EMetricsType {
-    PROCESSING_TIME,
-    LEAD_CONTINGENCY,
-    SECURITY_MARGIN;
-
-}
Index: products/distribution/services/src/main/java/com/dgp/anthologic/distribution/batch/risk/metrics/enums/EDeliveryKind.java
===================================================================
--- products/distribution/services/src/main/java/com/dgp/anthologic/distribution/batch/risk/metrics/enums/EDeliveryKind.java	(revision 84474)
+++ products/distribution/services/src/main/java/com/dgp/anthologic/distribution/batch/risk/metrics/enums/EDeliveryKind.java	(working copy)
@@ -1,7 +0,0 @@
-package com.dgp.anthologic.distribution.batch.risk.metrics.enums;
-
-public enum EDeliveryKind {
-    UCS,
-    ITUNES,
-    MOBILE
-}
Index: products/distribution/services/src/main/java/com/dgp/anthologic/distribution/batch/risk/metrics/enums/EDistributionStep.java
===================================================================
--- products/distribution/services/src/main/java/com/dgp/anthologic/distribution/batch/risk/metrics/enums/EDistributionStep.java	(revision 84474)
+++ products/distribution/services/src/main/java/com/dgp/anthologic/distribution/batch/risk/metrics/enums/EDistributionStep.java	(working copy)
@@ -1,8 +0,0 @@
-package com.dgp.anthologic.distribution.batch.risk.metrics.enums;
-
-public enum EDistributionStep {
-    PROVISIONING,
-    PACKAGING,
-    DELIVERING
-
-}
Index: products/distribution/services/src/main/java/com/dgp/anthologic/distribution/batch/risk/request/BatchRiskRequestHandler.java
===================================================================
--- products/distribution/services/src/main/java/com/dgp/anthologic/distribution/batch/risk/request/BatchRiskRequestHandler.java	(revision 84474)
+++ products/distribution/services/src/main/java/com/dgp/anthologic/distribution/batch/risk/request/BatchRiskRequestHandler.java	(working copy)
@@ -1,126 +0,0 @@
-package com.dgp.anthologic.distribution.batch.risk.request;
-
-import java.util.Calendar;
-import java.util.Date;
-import java.util.Map;
-
-import org.springframework.transaction.TransactionStatus;
-import org.springframework.transaction.support.TransactionCallback;
-import org.springframework.transaction.support.TransactionTemplate;
-
-import com.dgp.anthologic.distribution.application.risk.batchrisk.BatchContingency;
-import com.dgp.anthologic.distribution.application.risk.batchrisk.BatchContingencyRepository;
-import com.dgp.anthologic.distribution.batch.Batch;
-import com.dgp.anthologic.distribution.batch.risk.batchrisk.BatchRisk;
-import com.dgp.anthologic.distribution.batch.risk.batchrisk.BatchRiskComputer;
-import com.dgp.anthologic.distribution.batch.risk.batchrisk.BatchRiskService;
-import com.dgp.anthologic.distribution.batch.risk.batchrisk.computation.BatchRiskComputationContext;
-import com.dgp.anthologic.distribution.shared.AbstractServiceImpl;
-import com.dgp.anthologic.risk.domain.request.RiskRequest;
-import com.dgp.anthologic.risk.domain.request.RiskRequestHandler;
-import com.dgp.anthologic.risk.domain.shared.ERisk;
-
-public class BatchRiskRequestHandler extends AbstractServiceImpl implements RiskRequestHandler {
-
-    private TransactionTemplate transactionTemplate;
-    private BatchRiskService batchRiskService;
-    private BatchRiskComputer batchRiskComputer;
-    private BatchContingencyRepository batchContingencyRepository;
-
-    private BatchRiskComputationContext batchRiskComputationContext = null;
-    private Date expiryDate = null;
-    private static final int REFRESH_CONTEXT_PERIOD_IN_MINUTES = 1;
-
-    public boolean accept(RiskRequest inRequest) {
-        return inRequest instanceof BatchRiskRequest;
-    }
-
-    public void doBeforeExecute(RiskRequest in_request) {
-        if (serviceLogger.isInfoEnabled()) {
-            serviceLogger.info("before executing request #{0} for source #{1}", in_request.getId(), ((Batch) in_request.getSource())
-                    .getId());
-        }
-
-        final BatchRiskRequest batchRiskRequest = (BatchRiskRequest) in_request;
-        final Batch batch = batchRiskRequest.getSource();
-
-        BatchRisk batchRisk = batchRiskService.findOrCreate(batch.getId());
-        batchRiskRequest.setBatchRisk(batchRisk);
-    }
-
-    public ERisk computeRisk(RiskRequest in_request) {
-
-        if (batchRiskComputationContext == null || expiryDate == null || expiryDate.before(new Date())) {
-            getTransactionTemplate().execute(new TransactionCallback() {
-                public Object doInTransaction(TransactionStatus in_status) {
-                    refreshBatchRiskComputationContext();
-                    return null;
-                }
-            });
-
-            this.incrementExpiryDate();
-        }
-
-        if (serviceLogger.isInfoEnabled()) {
-            serviceLogger.info("executing request #{0} for source #{1}", in_request.getId(), ((Batch) in_request.getSource()).getId());
-        }
-        BatchRiskRequest batchRiskRequest = (BatchRiskRequest) in_request;
-        Batch batch = batchRiskRequest.getSource();
-        return batchRiskComputer.computeRisk(batch, batchRiskComputationContext);
-    }
-
-    private void incrementExpiryDate() {
-        if (expiryDate == null) {
-            expiryDate = new Date();
-        }
-        Calendar cal = Calendar.getInstance();
-        cal.setTime(expiryDate);
-        cal.add(Calendar.MINUTE, REFRESH_CONTEXT_PERIOD_IN_MINUTES);
-        expiryDate = cal.getTime();
-    }
-
-    private void refreshBatchRiskComputationContext() {
-        if (serviceLogger.isDebugEnabled()) {
-            serviceLogger.debug("refreshing batches risk computation context");
-        }
-
-        batchRiskComputationContext = new BatchRiskComputationContext();
-        Map<Long, BatchContingency> mapContingency = batchContingencyRepository.getBatchContingencyMap(Calendar.getInstance());
-        batchRiskComputationContext.setMapBatchContingencyByBatchId(mapContingency);
-
-    }
-
-    public void doAfterExecute(RiskRequest in_request) {
-        if (serviceLogger.isInfoEnabled()) {
-            serviceLogger
-                    .info("after executing request #{0} for source #{1}", in_request.getId(), ((Batch) in_request.getSource()).getId());
-        }
-        BatchRiskRequest batchRiskRequest = (BatchRiskRequest) in_request;
-        BatchRisk batchRisk = batchRiskRequest.getBatchRisk();
-        batchRiskService.update(batchRisk.getId(), batchRiskRequest.getRisk());
-    }
-
-    // /////////////////////////////////////////////////////////
-    // Spring Setters
-    // /////////////////////////////////////////////////////////
-    public void setBatchRiskService(BatchRiskService batchRiskService) {
-        this.batchRiskService = batchRiskService;
-    }
-
-    public void setBatchRiskComputer(BatchRiskComputer batchRiskComputer) {
-        this.batchRiskComputer = batchRiskComputer;
-    }
-
-    public void setBatchContingencyRepository(BatchContingencyRepository batchContingencyRepository) {
-        this.batchContingencyRepository = batchContingencyRepository;
-    }
-
-    public TransactionTemplate getTransactionTemplate() {
-        return transactionTemplate;
-    }
-
-    public void setTransactionTemplate(TransactionTemplate transactionTemplate) {
-        this.transactionTemplate = transactionTemplate;
-    }
-
-}
Index: products/distribution/services/src/main/java/com/dgp/anthologic/distribution/batch/risk/request/BatchRiskRequest.java
===================================================================
--- products/distribution/services/src/main/java/com/dgp/anthologic/distribution/batch/risk/request/BatchRiskRequest.java	(revision 84474)
+++ products/distribution/services/src/main/java/com/dgp/anthologic/distribution/batch/risk/request/BatchRiskRequest.java	(working copy)
@@ -1,29 +0,0 @@
-package com.dgp.anthologic.distribution.batch.risk.request;
-
-import com.dgp.anthologic.distribution.batch.Batch;
-import com.dgp.anthologic.distribution.batch.risk.batchrisk.BatchRisk;
-import com.dgp.anthologic.risk.domain.request.impl.AbstractRiskRequest;
-
-public class BatchRiskRequest extends AbstractRiskRequest<Batch> {
-
-    private Batch source;
-
-    private BatchRisk batchRisk;
-
-    public Batch getSource() {
-        return source;
-    }
-
-    public void setSource(Batch source) {
-        this.source = source;
-    }
-
-    public BatchRisk getBatchRisk() {
-        return batchRisk;
-    }
-
-    public void setBatchRisk(BatchRisk batchRisk) {
-        this.batchRisk = batchRisk;
-    }
-
-}
Index: products/distribution/services/src/main/java/com/dgp/anthologic/distribution/batch/risk/batchrisk/BatchRiskService.java
===================================================================
--- products/distribution/services/src/main/java/com/dgp/anthologic/distribution/batch/risk/batchrisk/BatchRiskService.java	(revision 84474)
+++ products/distribution/services/src/main/java/com/dgp/anthologic/distribution/batch/risk/batchrisk/BatchRiskService.java	(working copy)
@@ -1,14 +0,0 @@
-package com.dgp.anthologic.distribution.batch.risk.batchrisk;
-
-import com.dgp.anthologic.distribution.batch.risk.metrics.enums.EDeliveryKind;
-
-import com.dgp.anthologic.risk.domain.shared.ERisk;
-
-public interface BatchRiskService {
-
-    BatchRisk findOrCreate(Long batchID);
-
-    EDeliveryKind getDeliveryKind(Long batchID);
-
-    BatchRisk update(Long batchRiskID, ERisk risk);
-}
Index: products/distribution/services/src/main/java/com/dgp/anthologic/distribution/batch/risk/batchrisk/BatchRiskComputationCandidatesSpecification.java
===================================================================
--- products/distribution/services/src/main/java/com/dgp/anthologic/distribution/batch/risk/batchrisk/BatchRiskComputationCandidatesSpecification.java	(revision 84474)
+++ products/distribution/services/src/main/java/com/dgp/anthologic/distribution/batch/risk/batchrisk/BatchRiskComputationCandidatesSpecification.java	(working copy)
@@ -1,13 +0,0 @@
-package com.dgp.anthologic.distribution.batch.risk.batchrisk;
-
-import com.dgp.anthologic.core.model.domain.shared.Specification;
-import com.dgp.anthologic.distribution.batch.Batch;
-import com.dgp.anthologic.distribution.utils.specification.SpecificationAsHqlQuery;
-
-public interface BatchRiskComputationCandidatesSpecification extends SpecificationAsHqlQuery<Batch>, Specification<Batch> {
-
-    public String getSpecificationQueryCondition();
-
-    public String getSpecificationQueryWithoutWhereClause();
-
-}
Index: products/distribution/services/src/main/java/com/dgp/anthologic/distribution/batch/risk/batchrisk/specification/SpecificationUtils.java
===================================================================
--- products/distribution/services/src/main/java/com/dgp/anthologic/distribution/batch/risk/batchrisk/specification/SpecificationUtils.java	(revision 84474)
+++ products/distribution/services/src/main/java/com/dgp/anthologic/distribution/batch/risk/batchrisk/specification/SpecificationUtils.java	(working copy)
@@ -1,85 +0,0 @@
-package com.dgp.anthologic.distribution.batch.risk.batchrisk.specification;
-
-import org.hibernate.Query;
-
-import com.dgp.anthologic.distribution.batch.Batch;
-import com.dgp.anthologic.distribution.batch.risk.batchrisk.BatchRiskComputationCandidatesSpecification;
-
-public class SpecificationUtils {
-
-    public static BatchRiskComputationCandidatesSpecification and(BatchRiskComputationCandidatesSpecification specif1, BatchRiskComputationCandidatesSpecification specif2) {
-        return new AndSpecificationComponent(specif1, specif2);
-    }
-
-    public static BatchRiskComputationCandidatesSpecification or(BatchRiskComputationCandidatesSpecification specif1, BatchRiskComputationCandidatesSpecification specif2) {
-        return new OrSpecificationComponent(specif1, specif2);
-    }
-
-    private static class AndSpecificationComponent implements BatchRiskComputationCandidatesSpecification {
-
-        public AndSpecificationComponent(BatchRiskComputationCandidatesSpecification inSpecification1, BatchRiskComputationCandidatesSpecification inSpecification2) {
-            super();
-            this.specification1 = inSpecification1;
-            this.specification2 = inSpecification2;
-        }
-
-        private final BatchRiskComputationCandidatesSpecification specification1;
-        private final BatchRiskComputationCandidatesSpecification specification2;
-
-        public boolean isSatisfiedBy(Batch t) {
-            return specification1.isSatisfiedBy(t) && specification2.isSatisfiedBy(t);
-        }
-
-        public void specify(Query query) {
-            specification1.specify(query);
-            specification2.specify(query);
-        }
-
-        public String getSpecificationQuery() {
-            return getSpecificationQueryWithoutWhereClause() + " WHERE " + getSpecificationQueryCondition();
-        }
-
-        public String getSpecificationQueryWithoutWhereClause() {
-            return specification1.getSpecificationQueryWithoutWhereClause();
-        }
-
-        public String getSpecificationQueryCondition() {
-            return "(" + specification1.getSpecificationQueryCondition() + ") AND (" + specification2.getSpecificationQueryCondition()
-                    + ")";
-        }
-    }
-
-    private static class OrSpecificationComponent implements BatchRiskComputationCandidatesSpecification {
-
-        public OrSpecificationComponent(BatchRiskComputationCandidatesSpecification inSpecification1, BatchRiskComputationCandidatesSpecification inSpecification2) {
-            super();
-            this.specification1 = inSpecification1;
-            this.specification2 = inSpecification2;
-        }
-
-        private final BatchRiskComputationCandidatesSpecification specification1;
-        private final BatchRiskComputationCandidatesSpecification specification2;
-
-        public boolean isSatisfiedBy(Batch t) {
-            return specification1.isSatisfiedBy(t) || specification2.isSatisfiedBy(t);
-        }
-
-        public void specify(Query query) {
-            specification1.specify(query);
-            specification2.specify(query);
-        }
-
-        public String getSpecificationQuery() {
-            return getSpecificationQueryWithoutWhereClause() + " WHERE " + getSpecificationQueryCondition();
-        }
-
-        public String getSpecificationQueryWithoutWhereClause() {
-            return specification1.getSpecificationQueryWithoutWhereClause();
-        }
-
-        public String getSpecificationQueryCondition() {
-            return "(" + specification1.getSpecificationQueryCondition() + ") OR (" + specification2.getSpecificationQueryCondition() + ")";
-        }
-    }
-
-}
Index: products/distribution/services/src/main/java/com/dgp/anthologic/distribution/batch/risk/batchrisk/specification/AbstractBatchRiskComputationCandidatesSpecification.java
===================================================================
--- products/distribution/services/src/main/java/com/dgp/anthologic/distribution/batch/risk/batchrisk/specification/AbstractBatchRiskComputationCandidatesSpecification.java	(revision 84474)
+++ products/distribution/services/src/main/java/com/dgp/anthologic/distribution/batch/risk/batchrisk/specification/AbstractBatchRiskComputationCandidatesSpecification.java	(working copy)
@@ -1,16 +0,0 @@
-package com.dgp.anthologic.distribution.batch.risk.batchrisk.specification;
-
-import com.dgp.anthologic.distribution.batch.risk.batchrisk.BatchRiskComputationCandidatesSpecification;
-
-public abstract class AbstractBatchRiskComputationCandidatesSpecification implements BatchRiskComputationCandidatesSpecification {
-
-    public static final String BATCH_DOMAIN_OBJECT_NAME = "batch";
-
-    public String getSpecificationQueryWithoutWhereClause() {
-        return "SELECT distinct batch FROM Batch batch ";
-    }
-
-    public String getSpecificationQuery() {
-        return getSpecificationQueryWithoutWhereClause() + "WHERE " + getSpecificationQueryCondition();
-    }
-}
Index: products/distribution/services/src/main/java/com/dgp/anthologic/distribution/batch/risk/batchrisk/specification/PrioritySpecification.java
===================================================================
--- products/distribution/services/src/main/java/com/dgp/anthologic/distribution/batch/risk/batchrisk/specification/PrioritySpecification.java	(revision 84474)
+++ products/distribution/services/src/main/java/com/dgp/anthologic/distribution/batch/risk/batchrisk/specification/PrioritySpecification.java	(working copy)
@@ -1,36 +0,0 @@
-package com.dgp.anthologic.distribution.batch.risk.batchrisk.specification;
-
-import java.util.List;
-
-import org.hibernate.Query;
-
-import com.dgp.anthologic.core.enums.EBatchPriority;
-import com.dgp.anthologic.distribution.batch.Batch;
-
-public class PrioritySpecification extends AbstractBatchRiskComputationCandidatesSpecification {
-
-    private final List<EBatchPriority> priorityList;
-
-    public PrioritySpecification(List<EBatchPriority> inPriorityList) {
-        super();
-        this.priorityList = inPriorityList;
-    }
-
-    public boolean isSatisfiedBy(Batch batch) {
-        boolean isStatisfied = false;
-        if (batch != null && batch.getPriority() != null && priorityList != null) {
-            isStatisfied = priorityList.contains(batch.getPriority());
-        }
-        return isStatisfied;
-    }
-
-    public void specify(Query specification) {
-        specification.setParameterList("priorities", priorityList);
-    }
-
-    public String getSpecificationQueryCondition() {
-        String batchPrioritySpecification = BATCH_DOMAIN_OBJECT_NAME + ".priority in (:priorities)";
-        return batchPrioritySpecification;
-    }
-
-}
Index: products/distribution/services/src/main/java/com/dgp/anthologic/distribution/batch/risk/batchrisk/specification/StatusSpecification.java
===================================================================
--- products/distribution/services/src/main/java/com/dgp/anthologic/distribution/batch/risk/batchrisk/specification/StatusSpecification.java	(revision 84474)
+++ products/distribution/services/src/main/java/com/dgp/anthologic/distribution/batch/risk/batchrisk/specification/StatusSpecification.java	(working copy)
@@ -1,48 +0,0 @@
-package com.dgp.anthologic.distribution.batch.risk.batchrisk.specification;
-
-import java.util.ArrayList;
-import java.util.List;
-
-import org.hibernate.Query;
-
-import com.dgp.anthologic.core.enums.EBatchStatus;
-import com.dgp.anthologic.distribution.batch.Batch;
-
-public class StatusSpecification extends AbstractBatchRiskComputationCandidatesSpecification {
-
-    private static final List<EBatchStatus> getAcceptedBatchStatusList() {
-        List<EBatchStatus> batchStatusList = new ArrayList<EBatchStatus>();
-
-        batchStatusList.add(EBatchStatus.ACCEPTED);
-        batchStatusList.add(EBatchStatus.PROVISIONING);
-        batchStatusList.add(EBatchStatus.PROVISIONED);
-        batchStatusList.add(EBatchStatus.TO_BE_DELIVERED);
-        batchStatusList.add(EBatchStatus.DELIVERY);
-        batchStatusList.add(EBatchStatus.DELIVERY_ON_HOLD);
-        batchStatusList.add(EBatchStatus.TO_BE_PACKAGED);
-        batchStatusList.add(EBatchStatus.PACKAGED);
-        batchStatusList.add(EBatchStatus.PACKAGING);
-        batchStatusList.add(EBatchStatus.PACKAGING_ERROR);
-
-        return batchStatusList;
-    }
-
-    public boolean isSatisfiedBy(Batch batch) {
-        boolean isStatisfied = false;
-        if (batch != null && batch.getStatus() != null) {
-            List<EBatchStatus> acceptedBatchStatusList = getAcceptedBatchStatusList();
-            isStatisfied = acceptedBatchStatusList.contains(batch.getStatus());
-        }
-        return isStatisfied;
-    }
-
-    public void specify(Query specification) {
-        List<EBatchStatus> acceptedBatchStatusList = getAcceptedBatchStatusList();
-        specification.setParameterList("batchStatus", acceptedBatchStatusList);
-    }
-
-    public String getSpecificationQueryCondition() {
-        String batchStatusSpecification = BATCH_DOMAIN_OBJECT_NAME + ".status in (:batchStatus)";
-        return batchStatusSpecification;
-    }
-}
Index: products/distribution/services/src/main/java/com/dgp/anthologic/distribution/batch/risk/batchrisk/specification/EndDateSpecification.java
===================================================================
--- products/distribution/services/src/main/java/com/dgp/anthologic/distribution/batch/risk/batchrisk/specification/EndDateSpecification.java	(revision 84474)
+++ products/distribution/services/src/main/java/com/dgp/anthologic/distribution/batch/risk/batchrisk/specification/EndDateSpecification.java	(working copy)
@@ -1,58 +0,0 @@
-package com.dgp.anthologic.distribution.batch.risk.batchrisk.specification;
-
-import java.util.Date;
-import java.util.List;
-
-import org.hibernate.Query;
-
-import com.dgp.anthologic.core.enums.EBatchPriority;
-import com.dgp.anthologic.distribution.batch.Batch;
-
-public class EndDateSpecification extends AbstractBatchRiskComputationCandidatesSpecification {
-    private final java.sql.Date actualDatePlus6h;
-    private final java.sql.Date actualDatePlus24h;
-
-    private final List<EBatchPriority> priorityList;
-
-    public EndDateSpecification(Date inActualDate, List<EBatchPriority> inPriorityList) {
-        super();
-        this.actualDatePlus6h = new java.sql.Date(inActualDate.getTime() + 1000 * 3600 * 6);
-        this.actualDatePlus24h = new java.sql.Date(inActualDate.getTime() + 1000 * 3600 * 24);
-        this.priorityList = inPriorityList;
-    }
-
-    public boolean isSatisfiedBy(Batch batch) {
-
-        final java.sql.Date endDate;
-
-        if (priorityList.size() == 1 && priorityList.get(0).equals(EBatchPriority.TOP)) {
-            endDate = actualDatePlus6h;
-        } else {
-            endDate = actualDatePlus24h;
-        }
-
-        boolean isStatisfied = false;
-        if (batch != null && batch.getDeliveryEndDate() != null) {
-            isStatisfied = batch.getDeliveryEndDate().before(endDate);
-        }
-        return isStatisfied;
-    }
-
-    public void specify(Query specification) {
-        final java.sql.Date endDate;
-
-        if (priorityList.size() == 1 && priorityList.get(0).equals(EBatchPriority.TOP)) {
-            endDate = actualDatePlus6h;
-        } else {
-            endDate = actualDatePlus24h;
-        }
-
-        specification.setParameter("endDate", endDate);
-    }
-
-    public String getSpecificationQueryCondition() {
-        String batchEndDateSpecification = BATCH_DOMAIN_OBJECT_NAME + ".deliveryEndDate <= :endDate";
-        return batchEndDateSpecification;
-    }
-
-}
Index: products/distribution/services/src/main/java/com/dgp/anthologic/distribution/batch/risk/batchrisk/specification/BatchRiskComputationSpecificationFactory.java
===================================================================
--- products/distribution/services/src/main/java/com/dgp/anthologic/distribution/batch/risk/batchrisk/specification/BatchRiskComputationSpecificationFactory.java	(revision 84474)
+++ products/distribution/services/src/main/java/com/dgp/anthologic/distribution/batch/risk/batchrisk/specification/BatchRiskComputationSpecificationFactory.java	(working copy)
@@ -1,26 +0,0 @@
-package com.dgp.anthologic.distribution.batch.risk.batchrisk.specification;
-
-import java.util.Date;
-import java.util.List;
-
-import com.dgp.anthologic.core.enums.EBatchPriority;
-import com.dgp.anthologic.distribution.batch.risk.batchrisk.BatchRiskComputationCandidatesSpecification;
-
-public class BatchRiskComputationSpecificationFactory {
-
-    public BatchRiskComputationCandidatesSpecification createBatchRiskComputationSpecification(Date inActualDate,
-            List<EBatchPriority> inPriorityList) {
-        BatchRiskComputationCandidatesSpecification statusSpecification = new StatusSpecification();
-        BatchRiskComputationCandidatesSpecification endDateSpecification = new EndDateSpecification(inActualDate, inPriorityList);
-
-        return SpecificationUtils.and(statusSpecification, endDateSpecification);
-    }
-
-    public BatchRiskComputationCandidatesSpecification createBatchRiskComputationPrioritySpecification(Date inActualDate,
-            List<EBatchPriority> inPriorityList) {
-        BatchRiskComputationCandidatesSpecification superSpecification = createBatchRiskComputationSpecification(inActualDate,
-                inPriorityList);
-        BatchRiskComputationCandidatesSpecification prioritySpecification = new PrioritySpecification(inPriorityList);
-        return SpecificationUtils.and(superSpecification, prioritySpecification);
-    }
-}
Index: products/distribution/services/src/main/java/com/dgp/anthologic/distribution/batch/risk/batchrisk/specification/StartDateSpecification.java
===================================================================
--- products/distribution/services/src/main/java/com/dgp/anthologic/distribution/batch/risk/batchrisk/specification/StartDateSpecification.java	(revision 84474)
+++ products/distribution/services/src/main/java/com/dgp/anthologic/distribution/batch/risk/batchrisk/specification/StartDateSpecification.java	(working copy)
@@ -1,33 +0,0 @@
-package com.dgp.anthologic.distribution.batch.risk.batchrisk.specification;
-
-import java.util.Date;
-import org.hibernate.Query;
-
-import com.dgp.anthologic.distribution.batch.Batch;
-
-public class StartDateSpecification extends AbstractBatchRiskComputationCandidatesSpecification {
-    private final java.sql.Date actualDate;
-
-    public StartDateSpecification(Date inActualDate) {
-        super();
-        this.actualDate = new java.sql.Date(inActualDate.getTime());
-    }
-
-    public boolean isSatisfiedBy(Batch batch) {
-        boolean isStatisfied = false;
-        if (batch != null && batch.getDeliveryStartDate() != null) {
-            isStatisfied = batch.getDeliveryStartDate().before(actualDate);
-        }
-        return isStatisfied;
-    }
-
-    public void specify(Query specification) {
-        specification.setParameter("startDate", actualDate);
-    }
-
-    public String getSpecificationQueryCondition() {
-        String batchStartDateSpecification = BATCH_DOMAIN_OBJECT_NAME + ".deliveryStartDate <= :startDate";
-        return batchStartDateSpecification;
-    }
-
-}
Index: products/distribution/services/src/main/java/com/dgp/anthologic/distribution/batch/risk/batchrisk/impl/DefaultBatchRiskFactory.java
===================================================================
--- products/distribution/services/src/main/java/com/dgp/anthologic/distribution/batch/risk/batchrisk/impl/DefaultBatchRiskFactory.java	(revision 84474)
+++ products/distribution/services/src/main/java/com/dgp/anthologic/distribution/batch/risk/batchrisk/impl/DefaultBatchRiskFactory.java	(working copy)
@@ -1,26 +0,0 @@
-package com.dgp.anthologic.distribution.batch.risk.batchrisk.impl;
-
-import java.util.Date;
-
-import org.apache.commons.lang.time.FastDateFormat;
-
-import com.dgp.anthologic.distribution.batch.risk.batchrisk.BatchRisk;
-import com.dgp.anthologic.distribution.batch.risk.batchrisk.BatchRiskFactory;
-import com.dgp.anthologic.distribution.shared.AbstractServiceImpl;
-import com.dgp.anthologic.risk.domain.shared.ERisk;
-
-public class DefaultBatchRiskFactory extends AbstractServiceImpl implements BatchRiskFactory {
-
-    /**
-     * creates a new transient batch risk
-     */
-    public BatchRisk createBatchRisk(Long batchID) {
-        Date actualDate = new Date();
-        if (serviceLogger.isInfoEnabled()) {
-            serviceLogger.info("creating new batch risk entity for batch id #{0} at date {1}.", batchID, FastDateFormat.getInstance(
-                    "dd/MM/yyyy HH:mm:ss").format(actualDate));
-        }
-        return new BatchRisk(batchID, ERisk.LOW, actualDate, actualDate);
-    }
-
-}
Index: products/distribution/services/src/main/java/com/dgp/anthologic/distribution/batch/risk/batchrisk/impl/DefaultBatchRiskService.java
===================================================================
--- products/distribution/services/src/main/java/com/dgp/anthologic/distribution/batch/risk/batchrisk/impl/DefaultBatchRiskService.java	(revision 84474)
+++ products/distribution/services/src/main/java/com/dgp/anthologic/distribution/batch/risk/batchrisk/impl/DefaultBatchRiskService.java	(working copy)
@@ -1,89 +0,0 @@
-package com.dgp.anthologic.distribution.batch.risk.batchrisk.impl;
-
-import org.springframework.transaction.annotation.Propagation;
-import org.springframework.transaction.annotation.Transactional;
-
-import com.dgp.anthologic.distribution.batch.Batch;
-import com.dgp.anthologic.distribution.batch.BatchRepository;
-import com.dgp.anthologic.distribution.batch.risk.batchrisk.BatchRisk;
-import com.dgp.anthologic.distribution.batch.risk.batchrisk.BatchRiskFactory;
-import com.dgp.anthologic.distribution.batch.risk.batchrisk.BatchRiskRepository;
-import com.dgp.anthologic.distribution.batch.risk.batchrisk.BatchRiskService;
-import com.dgp.anthologic.distribution.batch.risk.metrics.enums.EDeliveryKind;
-import com.dgp.anthologic.distribution.export.ExportPlugin;
-import com.dgp.anthologic.distribution.shared.AbstractServiceImpl;
-import com.dgp.anthologic.distribution.supplychain.itunes41.ITunes41Plugin;
-import com.dgp.anthologic.distribution.supplychain.umgi.common.UmgiDefaultPlugin;
-import com.dgp.anthologic.distribution.supplychain.utils.DistributionExportPluginProvider;
-import com.dgp.anthologic.risk.domain.shared.ERisk;
-
-public class DefaultBatchRiskService extends AbstractServiceImpl implements BatchRiskService {
-
-    private BatchRiskRepository batchRiskRepository;
-    private BatchRiskFactory batchRiskFactory;
-    private DistributionExportPluginProvider distributionExportPluginProvider;
-    private BatchRepository batchRepository;
-
-    /**
-     * Allows requesting a batch risk computation.
-     */
-    @Transactional(propagation = Propagation.REQUIRED, readOnly = false)
-    public BatchRisk findOrCreate(Long batchID) {
-        BatchRisk batchRisk = batchRiskRepository.findByBatchID(batchID);
-
-        if (batchRisk == null) {
-            batchRisk = batchRiskFactory.createBatchRisk(batchID);
-            batchRiskRepository.createObject(batchRisk);
-            batchRiskRepository.flush();
-        }
-
-        return batchRisk;
-    }
-
-    @Transactional(propagation = Propagation.REQUIRED, readOnly = false)
-    public BatchRisk update(Long batchRiskID, ERisk risk) {
-        BatchRisk batchRisk = batchRiskRepository.findObjectById(batchRiskID);
-        batchRisk.updateRisk(risk);
-        batchRiskRepository.flush();
-        return batchRisk;
-    }
-
-    @Transactional(propagation = Propagation.REQUIRED, readOnly = true)
-    public EDeliveryKind getDeliveryKind(Long batchID) {
-        EDeliveryKind batchDeliveryKind = null;
-
-        Batch batch = batchRepository.findById(batchID);
-        ExportPlugin exportPlugin = distributionExportPluginProvider.getExportPlugin(batch);
-        if (exportPlugin instanceof ITunes41Plugin) {
-            batchDeliveryKind = EDeliveryKind.ITUNES;
-        } else if (exportPlugin instanceof UmgiDefaultPlugin) {
-            batchDeliveryKind = EDeliveryKind.UCS;
-        } else {
-            batchDeliveryKind = EDeliveryKind.MOBILE;
-        }
-
-        logDebug("batch #{0} has a delivery kind {1}.", batchID, batchDeliveryKind.name());
-
-        return batchDeliveryKind;
-    }
-
-    /////////////////////////////////////////////////////////////////
-    // Spring setters
-    /////////////////////////////////////////////////////////////////
-    public void setBatchRiskRepository(BatchRiskRepository batchRiskRepository) {
-        this.batchRiskRepository = batchRiskRepository;
-    }
-
-    public void setBatchRiskFactory(BatchRiskFactory batchRiskFactory) {
-        this.batchRiskFactory = batchRiskFactory;
-    }
-
-    public void setDistributionExportPluginProvider(DistributionExportPluginProvider distributionExportPluginProvider) {
-        this.distributionExportPluginProvider = distributionExportPluginProvider;
-    }
-
-    public void setBatchRepository(BatchRepository batchRepository) {
-        this.batchRepository = batchRepository;
-    }
-
-}
Index: products/distribution/services/src/main/java/com/dgp/anthologic/distribution/batch/risk/batchrisk/BatchRiskFactory.java
===================================================================
--- products/distribution/services/src/main/java/com/dgp/anthologic/distribution/batch/risk/batchrisk/BatchRiskFactory.java	(revision 84474)
+++ products/distribution/services/src/main/java/com/dgp/anthologic/distribution/batch/risk/batchrisk/BatchRiskFactory.java	(working copy)
@@ -1,6 +0,0 @@
-package com.dgp.anthologic.distribution.batch.risk.batchrisk;
-
-public interface BatchRiskFactory {
-
-    BatchRisk createBatchRisk(Long batchID);
-}
Index: products/distribution/services/src/main/java/com/dgp/anthologic/distribution/batch/risk/batchrisk/computation/DefaultBatchRiskComputer.java
===================================================================
--- products/distribution/services/src/main/java/com/dgp/anthologic/distribution/batch/risk/batchrisk/computation/DefaultBatchRiskComputer.java	(revision 84474)
+++ products/distribution/services/src/main/java/com/dgp/anthologic/distribution/batch/risk/batchrisk/computation/DefaultBatchRiskComputer.java	(working copy)
@@ -1,123 +0,0 @@
-package com.dgp.anthologic.distribution.batch.risk.batchrisk.computation;
-
-import java.util.Date;
-
-import org.springframework.transaction.annotation.Propagation;
-import org.springframework.transaction.annotation.Transactional;
-
-import com.dgp.anthologic.distribution.batch.Batch;
-import com.dgp.anthologic.distribution.batch.BatchRepository;
-import com.dgp.anthologic.distribution.batch.risk.batchrisk.BatchRiskComputer;
-import com.dgp.anthologic.distribution.shared.AbstractServiceImpl;
-import com.dgp.anthologic.risk.domain.shared.ERisk;
-
-@Transactional(propagation = Propagation.REQUIRED, readOnly = true)
-public class DefaultBatchRiskComputer extends AbstractServiceImpl implements BatchRiskComputer {
-
-    private BatchRepository batchRepository;
-    private RemainingTimeComputer remainingTimeComputer;
-    private SecurityMarginComputer securityMarginComputer;
-
-    /**
-     * TODO JBM : Use an environment contextual properties instead <br>
-     * Default value is : 10%
-     */
-    private final static float THRESHOLD_SI_IN_ERROR = (float) 0.1;
-
-    @Transactional(propagation = Propagation.REQUIRES_NEW, readOnly = true)
-    public ERisk computeRisk(Batch batch, BatchRiskComputationContext batchRiskComputationContext) {
-        long startTime = System.currentTimeMillis();
-        // make batch hibernate managed
-        batch = batchRepository.findById(batch.getId());
-        // remainingTimeToProduce is expressed In millis
-        Long remainingTimeToProduce = 0L;
-        remainingTimeComputer.accumulateRemainingTime(remainingTimeToProduce, batch, batchRiskComputationContext);
-
-        // expressed in millis
-        long securityMargin = securityMarginComputer.computeSecurityMargin(batch);
-
-        ERisk risk = this.getRisk(batch.getDeliveryEndDate(), new Date(), remainingTimeToProduce, securityMargin);
-        risk = correctRiskWithBatchErrorsRatio(batch, risk);
-
-        this.logInf("batch #{0} risk was {1}. (computation lasted {2}mS)", batch.getId(), risk.name(), System.currentTimeMillis()
-                - startTime);
-        return risk;
-    }
-
-    /**
-     * If batch contains more than (THRESHOLD_SI_IN_ERROR * NumberOfProducts) syncInstruction(s) in error, correct the given risk as follow <br>
-     * <ul>
-     * <li>LOW -> MEDIUM</li>
-     * <li>MEDIUM -> HIGH</li>
-     * <li>HIGH -> HIGH</li>
-     * </ul>
-     * 
-     * @param batch
-     * @param risk
-     * @return
-     */
-    protected final ERisk correctRiskWithBatchErrorsRatio(Batch batch, ERisk risk) {
-        ERisk correctedRisk = risk;
-        if (!risk.equals(ERisk.HIGH)) {
-            //            float errorCount = batch.getInstructionsByStatus(ESyncStatus.ERROR, ESyncStatus.P_ERROR).size();
-            float errorCount = batch.getInstructionsInError().size();
-            float totalSi = batch.getActualSize();
-            if (totalSi > 0 && (errorCount / totalSi) > THRESHOLD_SI_IN_ERROR) {
-                this.logInf("batch #{0} risk was corrected ({1}/{2} of Si in error(s) -> threashold reached). ", batch.getId(), errorCount,
-                        totalSi);
-                if (ERisk.MEDIUM.equals(risk)) {
-                    correctedRisk = ERisk.HIGH;
-                } else {
-                    correctedRisk = ERisk.MEDIUM;
-                }
-            }
-        }
-        return correctedRisk;
-    }
-
-    /**
-     * @param batch
-     * @param remainingTimeToProduce
-     * @param securityMargin
-     * @return
-     */
-    private ERisk getRisk(Date dueDate, Date currentDate, long remainingTimeToProduce, long securityMargin) {
-        ERisk risk;
-
-        if (currentDate.compareTo(dueDate) >= 0) {
-            risk = ERisk.HIGH;
-        } else {
-            long dueDateTime = dueDate.getTime();
-            long currentDateTime = currentDate.getTime();
-            long remainingTimeToDeliver = dueDateTime - currentDateTime;
-            if (remainingTimeToProduce > remainingTimeToDeliver) {
-                risk = ERisk.HIGH;
-            } else {
-                long securedRemainingTimeToProduce = remainingTimeToProduce + securityMargin;
-                if (securedRemainingTimeToProduce >= remainingTimeToDeliver) {
-                    risk = ERisk.MEDIUM;
-                } else {
-                    risk = ERisk.LOW;
-                }
-            }
-        }
-
-        return risk;
-    }
-
-    /////////////////////////////////////////////////////////////////
-    // Spring setters
-    /////////////////////////////////////////////////////////////////
-    public void setRemainingTimeComputer(RemainingTimeComputer remainingTimeComputer) {
-        this.remainingTimeComputer = remainingTimeComputer;
-    }
-
-    public void setSecurityMarginComputer(SecurityMarginComputer securityMarginComputer) {
-        this.securityMarginComputer = securityMarginComputer;
-    }
-
-    public void setBatchRepository(BatchRepository batchRepository) {
-        this.batchRepository = batchRepository;
-    }
-
-}
Index: products/distribution/services/src/main/java/com/dgp/anthologic/distribution/batch/risk/batchrisk/computation/LeadContingencyRemainingTimeComputer.java
===================================================================
--- products/distribution/services/src/main/java/com/dgp/anthologic/distribution/batch/risk/batchrisk/computation/LeadContingencyRemainingTimeComputer.java	(revision 84474)
+++ products/distribution/services/src/main/java/com/dgp/anthologic/distribution/batch/risk/batchrisk/computation/LeadContingencyRemainingTimeComputer.java	(working copy)
@@ -1,78 +0,0 @@
-package com.dgp.anthologic.distribution.batch.risk.batchrisk.computation;
-
-import com.dgp.anthologic.distribution.application.risk.batchrisk.BatchContingency;
-import com.dgp.anthologic.distribution.batch.Batch;
-import com.dgp.anthologic.distribution.batch.risk.metrics.DistributionMetricsProperty;
-import com.dgp.anthologic.distribution.batch.risk.metrics.enums.EDeliveryKind;
-
-public class LeadContingencyRemainingTimeComputer extends AbstractRemainingTimeComputer {
-
-    // ---------------------------------------------------------------------------------------
-    //  Attributes
-    // ---------------------------------------------------------------------------------------    
-
-    // ---------------------------------------------------------------------------------------
-    //  Business Methods
-    // ---------------------------------------------------------------------------------------    
-    @Override
-    protected boolean hasRemainingTimeAtStage(Batch batch) {
-        return true;
-    }
-
-    @Override
-    protected long computeRemainingTime(Batch batch, BatchRiskComputationContext batchRiskComputationContext) {
-        long leadContingencyTime = 0L;
-
-        if (serviceLogger.isDebugEnabled()) {
-            serviceLogger.debug("computing lead contingency time for batch #{0}", batch.getId());
-        }
-
-        leadContingencyTime = getRequiredTimePerMB(batchRiskService.getDeliveryKind(batch.getId()))
-                * getWeightOfBatchesToBeDeliveredBefore(new BatchContingency(batch), batchRiskComputationContext) * 1000;
-        return leadContingencyTime;
-    }
-
-    // ---------------------------------------------------------------------------------------
-    //  Commodity methods
-    // ---------------------------------------------------------------------------------------
-
-    /**
-     * 
-     * @param deliveryKind
-     * @return
-     */
-    protected final long getRequiredTimePerMB(EDeliveryKind deliveryKind) {
-        DistributionMetricsProperty property = distributionMetricsService.getLeadContingencyProperty(deliveryKind);
-
-        Long RT = 0L;
-
-        if (property != null) {
-            RT = property.getValue();
-        }
-        return RT;
-    }
-
-    /**
-     * 
-     * @param riskBatchContingency
-     * @param batchRiskComputationContext
-     * @return
-     */
-    protected final long getWeightOfBatchesToBeDeliveredBefore(BatchContingency riskBatchContingency,
-            BatchRiskComputationContext batchRiskComputationContext) {
-        long weight = 0L;
-        for (BatchContingency batchContingency : batchRiskComputationContext.getMapBatchContingencyByBatchId().values()) {
-            if (batchContingency.getPriority() >= riskBatchContingency.getPriority()
-                    && !batchContingency.getBatchId().equals(riskBatchContingency.getBatchId())) {
-                weight += batchContingency.getWeight();
-            }
-        }
-
-        return weight;
-    }
-
-    // ---------------------------------------------------------------------------------------
-    //  Setters
-    // ---------------------------------------------------------------------------------------
-
-}
Index: products/distribution/services/src/main/java/com/dgp/anthologic/distribution/batch/risk/batchrisk/computation/ProvisioningRemainingTimeComputer.java
===================================================================
--- products/distribution/services/src/main/java/com/dgp/anthologic/distribution/batch/risk/batchrisk/computation/ProvisioningRemainingTimeComputer.java	(revision 84474)
+++ products/distribution/services/src/main/java/com/dgp/anthologic/distribution/batch/risk/batchrisk/computation/ProvisioningRemainingTimeComputer.java	(working copy)
@@ -1,93 +0,0 @@
-package com.dgp.anthologic.distribution.batch.risk.batchrisk.computation;
-
-import java.util.ArrayList;
-import java.util.Arrays;
-import java.util.Collection;
-import java.util.List;
-import java.util.Map;
-import java.util.Set;
-
-import org.springframework.util.CollectionUtils;
-
-import com.dgp.anthologic.core.enums.EBatchStatus;
-import com.dgp.anthologic.distribution.batch.Batch;
-import com.dgp.anthologic.distribution.batch.risk.metrics.DistributionMetricsProperty;
-import com.dgp.anthologic.distribution.batch.risk.metrics.enums.EDeliveryKind;
-import com.dgp.anthologic.distribution.batch.risk.metrics.enums.EDistributionStep;
-import com.dgp.anthologic.distribution.instruction.SyncInstruction;
-import com.dgp.provisioning.ui.service.ProvisioningUiService;
-
-public class ProvisioningRemainingTimeComputer extends AbstractRemainingTimeComputer {
-
-    private ProvisioningUiService provisioningUiService;
-
-    @Override
-    protected boolean hasRemainingTimeAtStage(Batch batch) {
-        List<EBatchStatus> stillToProvisioneStatuses = Arrays.asList(EBatchStatus.ACCEPTED, EBatchStatus.PROVISIONING);
-        return stillToProvisioneStatuses.contains(batch.getStatus());
-    }
-
-    @Override
-    protected long computeRemainingTime(Batch batch, BatchRiskComputationContext batchRiskComputationContext) {
-        long remainingTimeToProvisione = 0L;
-
-        remainingTimeToProvisione = getRequiredTimePerMB(batchRiskService.getDeliveryKind(batch.getId()))
-                * getWeightOfBatchToProvisione(batch);
-        if (serviceLogger.isDebugEnabled()) {
-            serviceLogger.debug("Remaining time to provisione batch #{0} is {1}mS", batch.getId(), remainingTimeToProvisione);
-        }
-        return remainingTimeToProvisione;
-    }
-
-    private long getWeightOfBatchToProvisione(Batch batch) {
-        long batchWeightToProvisione = 0L;
-        Collection<Long> in_SyncInstructionIds = this.getSyncInstructionIDs(batch);
-        Map<Long, Long> weightOfSIsToProvisione = provisioningUiService
-                .getRemainingMasterFileSizeSumBySyncInstruction(in_SyncInstructionIds);
-        if (!CollectionUtils.isEmpty(weightOfSIsToProvisione)) {
-            for (Long weightOfSIToProvisione : weightOfSIsToProvisione.values()) {
-                batchWeightToProvisione += weightOfSIToProvisione;
-            }
-
-        }
-        return batchWeightToProvisione;
-    }
-
-    private Collection<Long> getSyncInstructionIDs(Batch batch) {
-        List<Long> syncInstructionIDs = new ArrayList<Long>();
-
-        Set<SyncInstruction> batchSyncInstructions = batch.getSyncInstructions();
-        if (!CollectionUtils.isEmpty(batchSyncInstructions)) {
-            for (SyncInstruction syncInstruction : batchSyncInstructions) {
-                if (syncInstruction.getProvisioningRequestID() != null) {
-                    syncInstructionIDs.add(syncInstruction.getId());
-                }
-            }
-        }
-        return syncInstructionIDs;
-    }
-
-    /**
-     * 
-     * @param deliveryKind
-     * @return
-     */
-    protected final long getRequiredTimePerMB(EDeliveryKind deliveryKind) {
-        DistributionMetricsProperty property = distributionMetricsService.getProcessingTimeProperty(deliveryKind,
-                EDistributionStep.PROVISIONING);
-
-        Long RT = 0L;
-        if (property != null) {
-            RT = property.getValue();
-        }
-        return RT;
-    }
-
-    // ---------------------------------------------------------------------------------------
-    //  Spring Setters
-    // ---------------------------------------------------------------------------------------    
-    public void setProvisioningUiService(ProvisioningUiService provisioningUiService) {
-        this.provisioningUiService = provisioningUiService;
-    }
-
-}
Index: products/distribution/services/src/main/java/com/dgp/anthologic/distribution/batch/risk/batchrisk/computation/BatchRiskComputationContext.java
===================================================================
--- products/distribution/services/src/main/java/com/dgp/anthologic/distribution/batch/risk/batchrisk/computation/BatchRiskComputationContext.java	(revision 84474)
+++ products/distribution/services/src/main/java/com/dgp/anthologic/distribution/batch/risk/batchrisk/computation/BatchRiskComputationContext.java	(working copy)
@@ -1,19 +0,0 @@
-package com.dgp.anthologic.distribution.batch.risk.batchrisk.computation;
-
-import java.util.Map;
-
-import com.dgp.anthologic.distribution.application.risk.batchrisk.BatchContingency;
-
-public class BatchRiskComputationContext {
-
-    private Map<Long, BatchContingency> mapBatchContingencyByBatchId;
-
-    public Map<Long, BatchContingency> getMapBatchContingencyByBatchId() {
-        return mapBatchContingencyByBatchId;
-    }
-
-    public void setMapBatchContingencyByBatchId(Map<Long, BatchContingency> mapBatchContingencyByBatchId) {
-        this.mapBatchContingencyByBatchId = mapBatchContingencyByBatchId;
-    }
-
-}
Index: products/distribution/services/src/main/java/com/dgp/anthologic/distribution/batch/risk/batchrisk/computation/SecurityMarginComputer.java
===================================================================
--- products/distribution/services/src/main/java/com/dgp/anthologic/distribution/batch/risk/batchrisk/computation/SecurityMarginComputer.java	(revision 84474)
+++ products/distribution/services/src/main/java/com/dgp/anthologic/distribution/batch/risk/batchrisk/computation/SecurityMarginComputer.java	(working copy)
@@ -1,9 +0,0 @@
-package com.dgp.anthologic.distribution.batch.risk.batchrisk.computation;
-
-import com.dgp.anthologic.distribution.batch.Batch;
-
-public interface SecurityMarginComputer {
-
-    long computeSecurityMargin(Batch batch);
-
-}
Index: products/distribution/services/src/main/java/com/dgp/anthologic/distribution/batch/risk/batchrisk/computation/RemainingTimeComputer.java
===================================================================
--- products/distribution/services/src/main/java/com/dgp/anthologic/distribution/batch/risk/batchrisk/computation/RemainingTimeComputer.java	(revision 84474)
+++ products/distribution/services/src/main/java/com/dgp/anthologic/distribution/batch/risk/batchrisk/computation/RemainingTimeComputer.java	(working copy)
@@ -1,8 +0,0 @@
-package com.dgp.anthologic.distribution.batch.risk.batchrisk.computation;
-
-import com.dgp.anthologic.distribution.batch.Batch;
-
-public interface RemainingTimeComputer {
-
-    void accumulateRemainingTime(Long remainingTime, Batch batch, BatchRiskComputationContext batchRiskComputationContext);
-}
Index: products/distribution/services/src/main/java/com/dgp/anthologic/distribution/batch/risk/batchrisk/computation/DefaultSecurityMarginComputer.java
===================================================================
--- products/distribution/services/src/main/java/com/dgp/anthologic/distribution/batch/risk/batchrisk/computation/DefaultSecurityMarginComputer.java	(revision 84474)
+++ products/distribution/services/src/main/java/com/dgp/anthologic/distribution/batch/risk/batchrisk/computation/DefaultSecurityMarginComputer.java	(working copy)
@@ -1,41 +0,0 @@
-package com.dgp.anthologic.distribution.batch.risk.batchrisk.computation;
-
-import com.dgp.anthologic.core.enums.EBatchPriority;
-import com.dgp.anthologic.distribution.batch.Batch;
-import com.dgp.anthologic.distribution.batch.risk.metrics.DistributionMetricsProperty;
-import com.dgp.anthologic.distribution.batch.risk.metrics.DistributionMetricsService;
-import com.dgp.anthologic.distribution.shared.AbstractServiceImpl;
-
-public class DefaultSecurityMarginComputer extends AbstractServiceImpl implements SecurityMarginComputer {
-
-    private DistributionMetricsService distributionMetricsService;
-
-    public long computeSecurityMargin(Batch batch) {
-        long securityMargin = getSecurityMargin(batch.getPriority()) * 60 * 1000;
-
-        if (serviceLogger.isDebugEnabled()) {
-            serviceLogger.debug("Security margin for batch #{0} is {1}", batch.getId(), securityMargin);
-        }
-
-        return securityMargin;
-    }
-
-    protected final long getSecurityMargin(EBatchPriority priority) {
-        DistributionMetricsProperty property = distributionMetricsService.getSecurityMarginProperty(priority);
-
-        Long RT = 0L;
-        if (property != null) {
-            RT = property.getValue();
-        }
-
-        return RT;
-    }
-
-    // /////////////////////////////////////////////////////////
-    // Spring Setters
-    // ////////////////////////////////////////////////////////
-    public void setDistributionMetricsService(DistributionMetricsService distributionMetricsService) {
-        this.distributionMetricsService = distributionMetricsService;
-    }
-
-}
Index: products/distribution/services/src/main/java/com/dgp/anthologic/distribution/batch/risk/batchrisk/computation/AbstractRemainingTimeComputer.java
===================================================================
--- products/distribution/services/src/main/java/com/dgp/anthologic/distribution/batch/risk/batchrisk/computation/AbstractRemainingTimeComputer.java	(revision 84474)
+++ products/distribution/services/src/main/java/com/dgp/anthologic/distribution/batch/risk/batchrisk/computation/AbstractRemainingTimeComputer.java	(working copy)
@@ -1,46 +0,0 @@
-package com.dgp.anthologic.distribution.batch.risk.batchrisk.computation;
-
-import com.dgp.anthologic.distribution.batch.Batch;
-import com.dgp.anthologic.distribution.batch.risk.batchrisk.BatchRiskService;
-import com.dgp.anthologic.distribution.batch.risk.metrics.DistributionMetricsService;
-import com.dgp.anthologic.distribution.shared.AbstractServiceImpl;
-
-public abstract class AbstractRemainingTimeComputer extends AbstractServiceImpl implements RemainingTimeComputer {
-
-    private RemainingTimeComputer nextStageRemainingTimeComputer;
-    protected DistributionMetricsService distributionMetricsService;
-    protected BatchRiskService batchRiskService;
-
-    public void accumulateRemainingTime(Long remainingTime, Batch batch, BatchRiskComputationContext batchRiskComputationContext) {
-
-        if (this.hasRemainingTimeAtStage(batch)) {
-            long remainingTimeAtStage = this.computeRemainingTime(batch, batchRiskComputationContext);
-            remainingTime += remainingTimeAtStage;
-        }
-
-        if (nextStageRemainingTimeComputer != null) {
-            nextStageRemainingTimeComputer.accumulateRemainingTime(remainingTime, batch, batchRiskComputationContext);
-        }
-
-    }
-
-    protected abstract boolean hasRemainingTimeAtStage(Batch batch);
-
-    protected abstract long computeRemainingTime(Batch batch, BatchRiskComputationContext batchRiskComputationContext);
-
-    // ///////////////////////////////////////////////////////
-    // Spring Setters
-    // ///////////////////////////////////////////////////////
-    public void setNextStageRemainingTimeComputer(RemainingTimeComputer nextStageRemainingTimeComputer) {
-        this.nextStageRemainingTimeComputer = nextStageRemainingTimeComputer;
-    }
-
-    public void setDistributionMetricsService(DistributionMetricsService distributionMetricsService) {
-        this.distributionMetricsService = distributionMetricsService;
-    }
-
-    public void setBatchRiskService(BatchRiskService batchRiskService) {
-        this.batchRiskService = batchRiskService;
-    }
-
-}
Index: products/distribution/services/src/main/java/com/dgp/anthologic/distribution/batch/risk/batchrisk/computation/DeliveryRemainingTimeComputer.java
===================================================================
--- products/distribution/services/src/main/java/com/dgp/anthologic/distribution/batch/risk/batchrisk/computation/DeliveryRemainingTimeComputer.java	(revision 84474)
+++ products/distribution/services/src/main/java/com/dgp/anthologic/distribution/batch/risk/batchrisk/computation/DeliveryRemainingTimeComputer.java	(working copy)
@@ -1,87 +0,0 @@
-package com.dgp.anthologic.distribution.batch.risk.batchrisk.computation;
-
-import java.util.Arrays;
-import java.util.List;
-
-import org.springframework.util.CollectionUtils;
-
-import com.dgp.anthologic.core.enums.EBatchStatus;
-import com.dgp.anthologic.distribution.batch.Batch;
-import com.dgp.anthologic.distribution.batch.DeliveryItem;
-import com.dgp.anthologic.distribution.batch.DeliveryItemsGroup;
-import com.dgp.anthologic.distribution.batch.risk.metrics.DistributionMetricsProperty;
-import com.dgp.anthologic.distribution.batch.risk.metrics.enums.EDeliveryKind;
-import com.dgp.anthologic.distribution.batch.risk.metrics.enums.EDistributionStep;
-
-public class DeliveryRemainingTimeComputer extends AbstractRemainingTimeComputer {
-
-    @Override
-    protected boolean hasRemainingTimeAtStage(Batch batch) {
-        return true;
-    }
-
-    @Override
-    protected long computeRemainingTime(Batch batch, BatchRiskComputationContext batchRiskComputationContext) {
-        long remainingTimeToDeliver = 0L;
-
-        if (isPackaged(batch)) {
-            remainingTimeToDeliver = this.computeDeliveryRemainingTimeUsingDIs(batch);
-        } else {
-            remainingTimeToDeliver = this.computeDeliveryRemainingTimeUsingSIs(batch);
-        }
-
-        if (serviceLogger.isDebugEnabled()) {
-            serviceLogger.debug("Remaining time to deliver for batch #{0} is {1}mS", batch.getId(), remainingTimeToDeliver);
-        }
-
-        return remainingTimeToDeliver;
-    }
-
-    private long computeDeliveryRemainingTimeUsingSIs(Batch batch) {
-        return getRequiredTimePerMB(batchRiskService.getDeliveryKind(batch.getId())) * batch.getWeight() * 1000;
-    }
-
-    private long computeDeliveryRemainingTimeUsingDIs(Batch batch) {
-        return getRequiredTimePerMB(batchRiskService.getDeliveryKind(batch.getId())) * getWeightOfBatchUsingDIs(batch);
-    }
-
-    private long getWeightOfBatchUsingDIs(Batch batch) {
-        long weight = 0;
-
-        List<DeliveryItemsGroup> deliveryItemsGroups = batch.getDeliveryItemsGroups();
-        if (!CollectionUtils.isEmpty(deliveryItemsGroups)) {
-            for (DeliveryItemsGroup deliveryItemsGroup : deliveryItemsGroups) {
-                List<DeliveryItem> deliveryItems = deliveryItemsGroup.getDeliveryItems();
-                if (!CollectionUtils.isEmpty(deliveryItems)) {
-                    for (DeliveryItem deliveryItem : deliveryItems) {
-                        weight += deliveryItem.getSize();
-                    }
-                }
-            }
-        }
-
-        return weight;
-    }
-
-    /**
-     * 
-     * @param deliveryKind
-     * @return
-     */
-    protected final long getRequiredTimePerMB(EDeliveryKind deliveryKind) {
-        DistributionMetricsProperty property = distributionMetricsService.getProcessingTimeProperty(deliveryKind,
-                EDistributionStep.DELIVERING);
-
-        Long RT = 0L;
-        if (property != null) {
-            RT = property.getValue();
-        }
-
-        return RT;
-    }
-
-    private boolean isPackaged(Batch batch) {
-        List<EBatchStatus> statusesBatchPackaged = Arrays.asList(EBatchStatus.DELIVERY, EBatchStatus.DELIVERY_ON_HOLD);
-        return statusesBatchPackaged.contains(batch.getStatus());
-    }
-}
Index: products/distribution/services/src/main/java/com/dgp/anthologic/distribution/batch/risk/batchrisk/computation/PackagingRemainingTimeComputer.java
===================================================================
--- products/distribution/services/src/main/java/com/dgp/anthologic/distribution/batch/risk/batchrisk/computation/PackagingRemainingTimeComputer.java	(revision 84474)
+++ products/distribution/services/src/main/java/com/dgp/anthologic/distribution/batch/risk/batchrisk/computation/PackagingRemainingTimeComputer.java	(working copy)
@@ -1,79 +0,0 @@
-package com.dgp.anthologic.distribution.batch.risk.batchrisk.computation;
-
-import java.util.Arrays;
-import java.util.List;
-import java.util.Set;
-
-import org.springframework.util.CollectionUtils;
-
-import com.dgp.anthologic.am.dto.product.ComponentDto;
-import com.dgp.anthologic.am.dto.product.FullProductDto;
-import com.dgp.anthologic.core.enums.EBatchStatus;
-import com.dgp.anthologic.distribution.batch.Batch;
-import com.dgp.anthologic.distribution.batch.risk.metrics.DistributionMetricsProperty;
-import com.dgp.anthologic.distribution.batch.risk.metrics.enums.EDeliveryKind;
-import com.dgp.anthologic.distribution.batch.risk.metrics.enums.EDistributionStep;
-import com.dgp.anthologic.distribution.instruction.SyncInstruction;
-import com.dgp.anthologic.distribution.instruction.services.assembler.ProductAssemblyAssetsProvider;
-
-public class PackagingRemainingTimeComputer extends AbstractRemainingTimeComputer {
-
-    private ProductAssemblyAssetsProvider productAssemblyAssetsProvider;
-
-    @Override
-    protected boolean hasRemainingTimeAtStage(Batch batch) {
-        List<EBatchStatus> stillToPackageStatuses = Arrays.asList(EBatchStatus.ACCEPTED, EBatchStatus.PROVISIONING,
-                EBatchStatus.PROVISIONED, EBatchStatus.TO_BE_PACKAGED, EBatchStatus.PACKAGING, EBatchStatus.PACKAGING_ERROR);
-        return stillToPackageStatuses.contains(batch.getStatus());
-    }
-
-    @Override
-    protected long computeRemainingTime(Batch batch, BatchRiskComputationContext batchRiskComputationContext) {
-        long remainingTimeToPackage = 0L;
-
-        Set<SyncInstruction> syncInstructions = batch.getSyncInstructions();
-        if (!CollectionUtils.isEmpty(syncInstructions)) {
-            for (SyncInstruction syncInstruction : syncInstructions) {
-                Set<String> siDeliveringCountries = syncInstruction.getDeliveringCountries();
-                int nbDeliveringCountries = siDeliveringCountries == null ? 0 : siDeliveringCountries.size();
-                int nbComponents = this.getNbComponents(syncInstruction);
-                remainingTimeToPackage += getRequiredTimePerMB(batchRiskService.getDeliveryKind(batch.getId())) * nbDeliveringCountries
-                        * nbComponents;
-            }
-        }
-
-        if (serviceLogger.isDebugEnabled()) {
-            serviceLogger.debug("Remaining time to package batch #{0} is {1}mS", batch.getId(), remainingTimeToPackage);
-        }
-
-        return remainingTimeToPackage;
-    }
-
-    /**
-     * 
-     * @param deliveryKind
-     * @return
-     */
-    protected final long getRequiredTimePerMB(EDeliveryKind deliveryKind) {
-        DistributionMetricsProperty property = distributionMetricsService.getProcessingTimeProperty(deliveryKind,
-                EDistributionStep.PACKAGING);
-
-        Long RT = 0L;
-        if (property != null) {
-            RT = property.getValue();
-        }
-
-        return RT;
-    }
-
-    private int getNbComponents(SyncInstruction syncInstruction) {
-        final FullProductDto fullProductDTO = productAssemblyAssetsProvider.loadLatestFullProductDto(syncInstruction);
-        Set<ComponentDto> components = fullProductDTO.getComponents();
-        return components == null ? 0 : components.size();
-    }
-
-    public void setProductAssemblyAssetsProvider(ProductAssemblyAssetsProvider productAssemblyAssetsProvider) {
-        this.productAssemblyAssetsProvider = productAssemblyAssetsProvider;
-    }
-
-}
Index: products/distribution/services/src/main/java/com/dgp/anthologic/distribution/batch/risk/batchrisk/BatchRiskComputer.java
===================================================================
--- products/distribution/services/src/main/java/com/dgp/anthologic/distribution/batch/risk/batchrisk/BatchRiskComputer.java	(revision 84474)
+++ products/distribution/services/src/main/java/com/dgp/anthologic/distribution/batch/risk/batchrisk/BatchRiskComputer.java	(working copy)
@@ -1,10 +0,0 @@
-package com.dgp.anthologic.distribution.batch.risk.batchrisk;
-
-import com.dgp.anthologic.distribution.batch.Batch;
-import com.dgp.anthologic.distribution.batch.risk.batchrisk.computation.BatchRiskComputationContext;
-import com.dgp.anthologic.risk.domain.shared.ERisk;
-
-public interface BatchRiskComputer {
-
-    ERisk computeRisk(Batch batch, BatchRiskComputationContext batchRiskComputationContext);
-}
Index: products/distribution/services/src/main/java/com/dgp/anthologic/distribution/batch/risk/batchrisk/BatchRisk.java
===================================================================
--- products/distribution/services/src/main/java/com/dgp/anthologic/distribution/batch/risk/batchrisk/BatchRisk.java	(revision 84474)
+++ products/distribution/services/src/main/java/com/dgp/anthologic/distribution/batch/risk/batchrisk/BatchRisk.java	(working copy)
@@ -1,89 +0,0 @@
-package com.dgp.anthologic.distribution.batch.risk.batchrisk;
-
-import java.util.Date;
-
-import javax.persistence.Column;
-import javax.persistence.Entity;
-import javax.persistence.EnumType;
-import javax.persistence.Enumerated;
-import javax.persistence.SequenceGenerator;
-import javax.persistence.Table;
-import javax.persistence.Temporal;
-import javax.persistence.TemporalType;
-
-import com.dgp.anthologic.distribution.utils.DomainObject;
-import com.dgp.anthologic.risk.domain.shared.ERisk;
-
-@Entity
-@SequenceGenerator(name = "generator", sequenceName = "ID_SEQUENCE", allocationSize = DomainObject.defaultAllocationSize)
-@Table(name = "RSK_BATCH_RISK")
-public class BatchRisk extends DomainObject {
-
-    private Long batchID;
-    private ERisk risk;
-    private Date creationDate;
-    private Date updateDate;
-
-    protected BatchRisk() {
-        super();
-    }
-
-    public BatchRisk(Long inBatchID, ERisk inRisk, Date inCreationDate, Date inUpdateDate) {
-        super();
-        this.batchID = inBatchID;
-        this.risk = inRisk;
-        this.creationDate = inCreationDate;
-        this.updateDate = inUpdateDate;
-    }
-
-    //////////////////////////////////////////////////////////////////////////////////////
-    // Business Methods
-    //////////////////////////////////////////////////////////////////////////////////////    
-    public void updateRisk(ERisk risk) {
-        this.setRisk(risk);
-        this.setUpdateDate(new Date());
-    }
-
-    //////////////////////////////////////////////////////////////////////////////////////
-    // Getters and Setters
-    //////////////////////////////////////////////////////////////////////////////////////
-    @Column(name = "BATCH_ID", nullable = false)
-    public Long getBatchID() {
-        return batchID;
-    }
-
-    @Column(name = "RISK", nullable = false)
-    @Enumerated(EnumType.STRING)
-    public ERisk getRisk() {
-        return risk;
-    }
-
-    @Column(name = "CREATION_DATE", nullable = false)
-    @Temporal(TemporalType.TIMESTAMP)
-    public Date getCreationDate() {
-        return creationDate;
-    }
-
-    @Column(name = "UPDATE_DATE", nullable = false)
-    @Temporal(TemporalType.TIMESTAMP)
-    public Date getUpdateDate() {
-        return updateDate;
-    }
-
-    protected void setBatchID(Long inBatchID) {
-        this.batchID = inBatchID;
-    }
-
-    protected void setRisk(ERisk inRisk) {
-        this.risk = inRisk;
-    }
-
-    protected void setCreationDate(Date inCreationDate) {
-        this.creationDate = inCreationDate;
-    }
-
-    protected void setUpdateDate(Date inUpdateDate) {
-        this.updateDate = inUpdateDate;
-    }
-
-}
Index: products/distribution/services/src/main/java/com/dgp/anthologic/distribution/batch/risk/batchrisk/BatchRiskRepository.java
===================================================================
--- products/distribution/services/src/main/java/com/dgp/anthologic/distribution/batch/risk/batchrisk/BatchRiskRepository.java	(revision 84474)
+++ products/distribution/services/src/main/java/com/dgp/anthologic/distribution/batch/risk/batchrisk/BatchRiskRepository.java	(working copy)
@@ -1,8 +0,0 @@
-package com.dgp.anthologic.distribution.batch.risk.batchrisk;
-
-import com.dgp.anthologic.distribution.utils.repository.DistributionRepository;
-
-public interface BatchRiskRepository extends DistributionRepository<BatchRisk> {
-
-    BatchRisk findByBatchID(Long batchID);
-}
Index: products/distribution/services/src/main/java/com/dgp/anthologic/operation/batch/DefaultBatchOperationService.java
===================================================================
--- products/distribution/services/src/main/java/com/dgp/anthologic/operation/batch/DefaultBatchOperationService.java	(revision 84474)
+++ products/distribution/services/src/main/java/com/dgp/anthologic/operation/batch/DefaultBatchOperationService.java	(working copy)
@@ -40,8 +40,6 @@
 import com.dgp.anthologic.distribution.batch.action.BatchAction;
 import com.dgp.anthologic.distribution.batch.action.ResetAction;
 import com.dgp.anthologic.distribution.batch.action.ValidateManualDeliveryQaAction;
-import com.dgp.anthologic.distribution.batch.risk.batchrisk.BatchRisk;
-import com.dgp.anthologic.distribution.batch.risk.batchrisk.BatchRiskRepository;
 import com.dgp.anthologic.distribution.common.ApplicationServiceImpl;
 import com.dgp.anthologic.distribution.instruction.SyncInstruction;
 import com.dgp.anthologic.distribution.instruction.SyncInstructionAudit;
@@ -54,7 +52,6 @@
 import com.dgp.anthologic.distribution.utils.StringHelper;
 import com.dgp.anthologic.distribution.utils.export.ExportUtils;
 import com.dgp.anthologic.exception.functional.distribution.ordering.OrderingException;
-import com.dgp.anthologic.risk.domain.shared.ERisk;
 import com.dgp.commons.exception.BusinessException;
 import com.dgp.commons.exception.TechnicalException;
 import com.dgp.commons.io.FileService;
@@ -63,7 +60,6 @@
 public class DefaultBatchOperationService extends ApplicationServiceImpl implements BatchOperationService {
 
     private BatchRepository batchRepository;
-    private BatchRiskRepository batchRiskRepository;
     private BPRepository bpRepository;
     private OrderRepository orderRepository;
     private ClearanceFacade clearanceFacade;
@@ -354,15 +350,6 @@
             detailsDto.setUcsStatus(batch.getDownloadStatus().getDisplayedName());
         }
 
-        // Risk informations
-        BatchRisk batchRisk = batchRiskRepository.findByBatchID(batch.getId());
-        if (batchRisk == null || batchRisk.getRisk() == null) {
-            // Default batch risk is LOW
-            detailsDto.setRisk(ERisk.LOW);
-        } else {
-            detailsDto.setRisk(batchRisk.getRisk());
-        }
-
         return detailsDto;
     }
 
@@ -507,10 +494,6 @@
         this.syncInstructionAuditRepository = syncInstructionAuditRepository;
     }
 
-    public void setBatchRiskRepository(BatchRiskRepository inBatchRiskRepository) {
-        this.batchRiskRepository = inBatchRiskRepository;
-    }
-
     public void setFileService(FileService fileService) {
         this.fileService = fileService;
     }
Index: products/distribution/services/pom.xml
===================================================================
--- products/distribution/services/pom.xml	(revision 84474)
+++ products/distribution/services/pom.xml	(working copy)
@@ -112,11 +112,6 @@
 		</dependency>
 		<dependency>
 			<groupId>com.dgp.anthologic</groupId>
-			<artifactId>anthologic-products-risk-management-services</artifactId>
-			<version>${pom.version}</version>
-		</dependency>
-		<dependency>
-			<groupId>com.dgp.anthologic</groupId>
 			<artifactId>anthologic-entities-ranking-management-services</artifactId>
 			<version>${pom.version}</version>
 		</dependency>		
Index: products/risk-management/integration-tests/src/test/resources/unitils-local.properties
===================================================================
--- products/risk-management/integration-tests/src/test/resources/unitils-local.properties	(revision 84474)
+++ products/risk-management/integration-tests/src/test/resources/unitils-local.properties	(working copy)
@@ -1,9 +0,0 @@
-database.url=${base-platform.jdbc.url}
-database.userName=${base-platform.jdbc.user}
-database.password=${base-platform.jdbc.passwd}
-database.schemaNames=${base-platform.hibernate.default.schema}
-database.driverClassName=oracle.jdbc.driver.OracleDriver
-
-hibernate.show.sql=true
-DatabaseModule.Transactional.value.default=commit
-
Index: products/risk-management/integration-tests/src/test/resources/cache.cfg.properties
===================================================================
--- products/risk-management/integration-tests/src/test/resources/cache.cfg.properties	(revision 84474)
+++ products/risk-management/integration-tests/src/test/resources/cache.cfg.properties	(working copy)
@@ -1,3 +0,0 @@
-cache.active=true
-cache.job.cleaning.cron=0 0 */1 * * ?
-cache.root.dir=./
\ No newline at end of file
Index: products/risk-management/integration-tests/src/test/resources/com/dgp/anthologic/rsk/domain/model/distribution/risk/batch/DefaultBatchRiskServiceTest.xml
===================================================================
--- products/risk-management/integration-tests/src/test/resources/com/dgp/anthologic/rsk/domain/model/distribution/risk/batch/DefaultBatchRiskServiceTest.xml	(revision 84474)
+++ products/risk-management/integration-tests/src/test/resources/com/dgp/anthologic/rsk/domain/model/distribution/risk/batch/DefaultBatchRiskServiceTest.xml	(working copy)
@@ -1,4 +0,0 @@
-<?xml version='1.0' encoding='UTF-8'?>
-<dataset>
-	<DST_BATCH ID="575487498" BATCH_STATUS="PROVISIONED" priority="TOP" START_DATE="2009-03-27 09:00:00.0" END_DATE="2009-05-27 21:00:00.0" DELIVERY_DATE="2009-03-12 01:00:00.0" WEIGHT="100"  PARTNER_CONFIG_ID="438" BATCH_TYPE="PUBLIC" DOWNLOAD_STATUS="NOT_ACCESSED" BATCH_CATEGORY="INSERTION" IS_ERROR="N" IS_OUT_OF_SYNC="N"/>	
-</dataset>
\ No newline at end of file
Index: products/risk-management/integration-tests/src/test/resources/com/dgp/anthologic/rsk/repository-cfg-sample.xml
===================================================================
--- products/risk-management/integration-tests/src/test/resources/com/dgp/anthologic/rsk/repository-cfg-sample.xml	(revision 84474)
+++ products/risk-management/integration-tests/src/test/resources/com/dgp/anthologic/rsk/repository-cfg-sample.xml	(working copy)
@@ -1,45 +0,0 @@
-<?xml version="1.0" encoding="UTF-8"?>
-<beans xmlns="http://www.springframework.org/schema/beans"
-	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
-	xsi:schemaLocation="http://www.springframework.org/schema/beans 
-	http://www.springframework.org/schema/beans/spring-beans-2.5.xsd">
-
-
-	<!-- Repositories -->
-    <bean id="repo0" class="com.dgp.repository.model.hibernate.RepositoryImpl" >
-    	<property name="id" value="1" />
-    	<property name="name" value="repo0" />
-    	<property name="description" value="Repo 0 Description" />
-    	<property name="rootDir" value="0" />
-    	
-    	<!-- 
-    	<property name="homes">
-    		<map>
-    			<entry key="file" value="$cfg.repository{repository.client.local.home}" />
-    		</map>
-    	</property>
-    	 -->
-    	
-    	<property name="namingStrategy">
-    		<bean class="com.dgp.repository.model.sample.DefaultNamingStrategy" />
-    	</property>
-    
-    </bean>
-
-    <!-- Repository Users -->
-    <bean id="testUser1" class="com.dgp.repository.model.hibernate.UserImpl">
-        <property name="id" value="2" />
-        <property name="name" value="provisioning" />
-        <!-- 
-        <constructor-arg index="0" value="0"/>
-        <constructor-arg index="1" value="provisioning"/>
-         -->
-    </bean>
-    
-    <!-- Repository Authorities -->
-    <bean id="repo0.testUser1" class="com.dgp.repository.model.hibernate.SimpleRepositoryAuthorityImpl">
-		<property name="repository" ref="repo0" />
-        <property name="user" ref="testUser1" />
-    </bean>
-    
-</beans>
Index: products/risk-management/integration-tests/src/test/resources/log4j.xml
===================================================================
--- products/risk-management/integration-tests/src/test/resources/log4j.xml	(revision 84474)
+++ products/risk-management/integration-tests/src/test/resources/log4j.xml	(working copy)
@@ -1,155 +0,0 @@
-<?xml version="1.0" encoding="UTF-8"?>
-<!DOCTYPE log4j:configuration SYSTEM "log4j.dtd">
-
-<!-- ===================================================================== -->
-<!--                                                                       -->
-<!--  Log4j Configuration                                                  -->
-<!--                                                                       -->
-<!-- ===================================================================== -->
-
-<!-- $Id$ -->
-
-<!--
-   | For more configuration infromation and examples see the Jakarta Log4j
-   | owebsite: http://jakarta.apache.org/log4j
- -->
-
-<!-- mark -->
-<log4j:configuration xmlns:log4j="http://jakarta.apache.org/log4j/" debug="false">
-
-    <!-- ======================= -->
-    <!-- Setup the Root category -->
-    <!-- ======================= -->
-
-    <appender name="CONSOLE" class="org.apache.log4j.ConsoleAppender">
-        <errorHandler class="org.apache.log4j.helpers.OnlyOnceErrorHandler"/>
-        <param name="Target" value="System.out"/>
-        <!--<param name="Threshold" value="ERROR"/>-->
-
-        <layout class="org.apache.log4j.PatternLayout">
-            <!-- The default pattern: Date Priority [Category] Message\n -->
-            <!-- <param name="ConversionPattern" value="%d{ABSOLUTE} %-5p [%c{1}] %m%n"/> -->
-            <param name="ConversionPattern" value="%d %x %-5p -${mgnt.cluster.node.id}- [%c] - %m%n"/>
-        </layout>
-    </appender>
-    
-    <appender name="ROLL" class="org.apache.log4j.RollingFileAppender">
-        <param name="File" value="umgi.log"/>
-        <param name="MaxFileSize" value="50000KB"/>
-        <param name="MaxBackupIndex" value="5"/>
-        <layout class="org.apache.log4j.PatternLayout">
-            <!-- The default pattern: Date Priority [Category] Message\n -->
-            <!-- <param name="ConversionPattern" value="%d{ABSOLUTE} %-5p [%c{1}] %m%n"/> -->
-            <param name="ConversionPattern" value="%d %x -${mgnt.cluster.node.id}- %-5p [%c] - %m%n"/>
-        </layout>
-    </appender>
-    
-    <appender name="ROLLSDK" class="org.apache.log4j.RollingFileAppender">
-        <param name="File" value="sdk.log"/>
-        <param name="MaxFileSize" value="50000KB"/>
-        <param name="MaxBackupIndex" value="5"/>
-        <layout class="org.apache.log4j.PatternLayout">
-            <!-- The default pattern: Date Priority [Category] Message\n -->
-            <!-- <param name="ConversionPattern" value="%d{ABSOLUTE} %-5p [%c{1}] %m%n"/> -->
-            <param name="ConversionPattern" value="%d %x -${mgnt.cluster.node.id}- %-5p [%c] - %m%n"/>
-        </layout>
-    </appender>    
-    
-    <appender name="ROLL-SQL" class="org.apache.log4j.RollingFileAppender">
-        <param name="File" value="umgi-sql.log"/>
-        <param name="MaxFileSize" value="50000KB"/>
-        <param name="MaxBackupIndex" value="5"/>
-        <layout class="org.apache.log4j.PatternLayout">
-            <!-- The default pattern: Date Priority [Category] Message\n -->
-            <!-- <param name="ConversionPattern" value="%d{ABSOLUTE} %-5p [%c{1}] %m%n"/> -->
-            <param name="ConversionPattern" value="%d -${mgnt.cluster.node.id}- %m%n"/>
-        </layout>
-    </appender>
-    
-    <category name="msg.poll" additivity="false">
-    	<priority value="DEBUG"/>
-    	<appender-ref ref="ROLLSDK"/>
-    </category>
-    
-    <category name="msg.exec" additivity="false">
-    	<priority value="DEBUG"/>
-    	<appender-ref ref="ROLLSDK"/>
-    </category>
-    
-    <category name="org.springframework">
-        <priority value="FATAL"/>
-    </category>
-    
-    <category name="org.springframework.web">
-        <priority value="FATAL"/>
-    </category>
-    
-    <category name="org.acegisecurity">
-        <priority value="FATAL"/>
-    </category>
-
-    <category name="org.apache">
-        <priority value="FATAL"/>
-    </category>
-
-    <category name="org.hibernate">
-        <priority value="FATAL"/>
-    </category>
-
-    <category name="org.hibernate.SQL" additivity="false">
-        <priority value="DEBUG"/>
-        <appender-ref ref="CONSOLE"/>
-    </category>
-
-    <category name="com.dgp">
-        <priority value="FATAL"/>
-    </category>
-
-    <category name="com.mchange">
-        <priority value="FATAL"/>
-    </category>
-
-	<category name="mon.tech">
-	   	<priority value="FATAL"/>
-    </category>
-
-	<category name="msg.tech">
-        <priority value="FATAL"/>
-    </category>
-
-    <category name="org.mortbay">
-        <priority value="FATAL"/>
-    </category>
-    
-    <category name="mon.tech">
-        <priority value="FATAL"/>
-    </category>
-    
-    <category name="Sigar">
-        <priority value="FATAL"/>
-    </category>
-    
-    <category name="riskmanagement.riskMngtServiceLogger"  additivity="false">
-        <priority value="INFO"/>
-        <appender-ref ref="ROLL"/>
-        <appender-ref ref="CONSOLE"/>
-    </category>    
-    
-    <category name="riskmanagement.riskMngtApplicationLogger"  additivity="false">
-        <priority value="INFO"/>
-        <appender-ref ref="ROLL"/>
-        <appender-ref ref="CONSOLE"/>
-    </category>
-    
-    <category name="riskmanagement.riskMngtJobLogger"  additivity="false">
-        <priority value="INFO"/>
-        <appender-ref ref="ROLL"/>
-        <appender-ref ref="CONSOLE"/>
-    </category>        
-    
-    <root>
-        <priority value="DEBUG"/>
-        <appender-ref ref="ROLLSDK"/>
-    </root>
-
-</log4j:configuration>
Index: products/risk-management/integration-tests/src/test/resources/trf.cfg.properties
===================================================================
--- products/risk-management/integration-tests/src/test/resources/trf.cfg.properties	(revision 84474)
+++ products/risk-management/integration-tests/src/test/resources/trf.cfg.properties	(working copy)
@@ -1,9 +0,0 @@
-transfert.cache.maxelements=40000
-
-transfert.cache.size=200
-transfert.cache.size.unit=GIGA
-
-transfert.job.maxDuration=55000
-transfert.job.nbrOfThreads=1
-transfert.job.maxResults=10
-transfert.job.cron=0 */1 * * * ?
\ No newline at end of file
Index: products/risk-management/integration-tests/src/test/resources/application-config.xml
===================================================================
--- products/risk-management/integration-tests/src/test/resources/application-config.xml	(revision 84474)
+++ products/risk-management/integration-tests/src/test/resources/application-config.xml	(working copy)
@@ -1,39 +0,0 @@
-<?xml version="1.0" encoding="UTF-8"?>
-<beans xmlns="http://www.springframework.org/schema/beans"
-		xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
-		xmlns:context="http://www.springframework.org/schema/context"
-		xsi:schemaLocation="http://www.springframework.org/schema/beans 
-			http://www.springframework.org/schema/beans/spring-beans-2.5.xsd
-			http://www.springframework.org/schema/context 
-			http://www.springframework.org/schema/context/spring-context-2.5.xsd">
-
-	<!-- Soa platform adapted to distribution integration tests -->
-    <import resource="classpath:META-INF/spring/soa-nobpm-platform-it.xml"/>
-   <!-- Repository -->
-   <import resource="classpath:META-INF/spring/repository-client-local.xml"/>
-   <import resource="classpath:META-INF/spring/repository-server-core.xml"/>
-  
-   <import resource="classpath:META-INF/spring/distribution-loggers.xml"/>
-   	<bean id="distributionHibernateDAO" abstract="true" parent="hibernateDAO">
-		<property name="daoLogger" ref="daoLogger"/>
-	</bean>
-   
-	<bean id="batchRepository" class="com.dgp.anthologic.distribution.batch.impl.DBHibernateBatchRepository" parent="distributionHibernateDAO" />
-   
-   
-   <!-- SDK Transfer Service -->
-   <import resource="classpath:META-INF/spring/transfert/beans.xml"/>
-   <import resource="classpath:META-INF/spring/cache/beans.xml"/>
-   
-	<!-- risk management beans -->
-	<import resource="classpath:META-INF/spring/risk-mngt-beans.xml"/>
-	
-	<!-- Internal Test services -->
-	<!-- import resource="classpath:com/dgp/anthologic/distribution/internal-test-services.xml"/-->
-	
-	<!-- You may choose stub or real services, depending on you want to test with real services or fake ones (mocks). -->
-	<!--  Stub external services -->
-	<!--import resource="classpath:com/dgp/anthologic/distribution/external-stub-services.xml"/-->
-	<!-- import resource="classpath:com/dgp/anthologic/distribution/external-real-services.xml"/-->
-	<import resource="classpath:com/dgp/anthologic/rsk/repository-cfg-sample.xml"/>	
-</beans>
Index: products/risk-management/integration-tests/src/test/resources/repository.cfg.properties
===================================================================
--- products/risk-management/integration-tests/src/test/resources/repository.cfg.properties	(revision 84474)
+++ products/risk-management/integration-tests/src/test/resources/repository.cfg.properties	(working copy)
@@ -1,31 +0,0 @@
-repository.sessionFactory.name=${repository.sessionFactory.name}
-
-###  Use for NativeFS repository storage
-repository.client.nativefs.home=${repository.file.home.url}
-
-### Use for Isilon repository storage
-repository.client.isilon.http.home=${repository.client.isilon.http.home}
-repository.client.isilon.ftp.home=${repository.client.isilon.ftp.home}
-repository.client.isilon.ftp.user=${repository.client.isilon.ftp.user}
-repository.client.isilon.ftp.passwd=${repository.client.isilon.ftp.passwd}
-
-### Use by FTT client
-repository.client.http.externe.url=${repository.client.http.externe.url}
-
-###  URL of the Repository Server (may be the same of the UTL externe client
-repository.server.http.url=${repository.server.http.url}
-
-repository.server.http.autoStartup=${repository.server.http.autoStartup}
-
-## Use by Anthologic : client REST URL access
-repository.client.http.url=${repository.client.http.url}
-
-## Unused ?
-#repository.client.ftp.home=${sdk.repository.client.ftp.home}
-#repository.file.home.url=${repository.file.home.url}
-#repository.client.http.home=${sdk.repository.client.http.home}
-#repository.client.home=${sdk.repository.client.home}
-
-
-
-
Index: products/risk-management/integration-tests/src/test/java/com/dgp/anthologic/rsk/RiskManagementIntegrationBaseTest.java
===================================================================
--- products/risk-management/integration-tests/src/test/java/com/dgp/anthologic/rsk/RiskManagementIntegrationBaseTest.java	(revision 84474)
+++ products/risk-management/integration-tests/src/test/java/com/dgp/anthologic/rsk/RiskManagementIntegrationBaseTest.java	(working copy)
@@ -1,36 +0,0 @@
-package com.dgp.anthologic.rsk;
-
-import org.hibernate.SessionFactory;
-import org.junit.After;
-import org.unitils.UnitilsJUnit4;
-import org.unitils.orm.hibernate.annotation.HibernateSessionFactory;
-import org.unitils.spring.annotation.SpringApplicationContext;
-
-@SpringApplicationContext("/application-config.xml")
-public abstract class RiskManagementIntegrationBaseTest extends UnitilsJUnit4 {
-
-    @HibernateSessionFactory
-    private static SessionFactory sessionFactory;
-
-    protected void flushHibernateCurrentSession() {
-        getSessionFactory().getCurrentSession().flush();
-    }
-
-    protected void flushAndClearHibernateCurrentSession() {
-        getSessionFactory().getCurrentSession().flush();
-        getSessionFactory().getCurrentSession().clear();
-    }
-
-    @After
-    public void afterTest() {
-        sessionFactory.getCurrentSession().clear();
-    }
-
-    protected static org.hibernate.classic.Session getCurrentSession() {
-        return getSessionFactory().getCurrentSession();
-    }
-
-    protected static SessionFactory getSessionFactory() {
-        return sessionFactory;
-    }
-}
Index: products/risk-management/integration-tests/pom.xml
===================================================================
--- products/risk-management/integration-tests/pom.xml	(revision 84474)
+++ products/risk-management/integration-tests/pom.xml	(working copy)
@@ -1,76 +0,0 @@
-<?xml version="1.0"?><project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">
-  <parent>
-		<groupId>com.dgp.anthologic</groupId>
-		<artifactId>anthologic-risk-management</artifactId>
-		<version>2.74.0-SNAPSHOT</version>
-	</parent>
-  <modelVersion>4.0.0</modelVersion>
-  <groupId>com.dgp.anthologic</groupId>
-  <artifactId>anthologic-products-risk-management-integration-tests</artifactId>
-  <name>Anthologic Products Risk Management Integration Tests</name>
-  <description>Anthologic Products Risk Management Integration Tests</description>
-
-	<properties>
-               <custom.filtering.active>true</custom.filtering.active>
-               <common.resources.active>true</common.resources.active>
-  </properties>
-
-  
-	<profiles>
-		<profile>
-			<id>integration-tests</id>
-			<build>
-				<plugins>
-					<plugin>
-						<groupId>org.apache.maven.plugins</groupId>
-						<artifactId>maven-surefire-plugin</artifactId>
-						<configuration>
-						    <argLine>-Xmx512m -XX:PermSize=256m -XX:MaxPermSize=512m</argLine>
-							<skip>false</skip>
-						</configuration>
-					</plugin>
-				</plugins>
-			</build>
-		</profile>
-	</profiles>
-  
-  
-  <build>
-	 	<plugins>
-	      <plugin>
-	        <artifactId>maven-deploy-plugin</artifactId>
-	        <configuration>
-	          <skip>true</skip>
-	        </configuration>
-	      </plugin>
-	      <plugin>
-	        <groupId>org.apache.maven.plugins</groupId>
-	        <artifactId>maven-surefire-plugin</artifactId>
-	        <configuration>
-	          <skip>true</skip>
-	        </configuration>
-	      </plugin>
-			<plugin>
-				<groupId>com.atlassian.maven.plugins</groupId>
-				<artifactId>maven-clover2-plugin</artifactId>
-				<configuration>
-					<skip>true</skip>
-				</configuration>
-			</plugin>
-	     </plugins>
-  </build>
-  
-  <dependencies>
-		<dependency>
-			<groupId>com.dgp.anthologic</groupId>
-			<artifactId>anthologic-integration-tests-platforms</artifactId>
-			<version>${pom.version}</version>
-		</dependency>
-		<dependency>
-			<groupId>com.dgp.anthologic</groupId>
-			<artifactId>anthologic-products-risk-management-services</artifactId>
-			<version>${pom.version}</version>
-		</dependency>
-  </dependencies>
-  
-</project>
Index: products/provisioning/services/src/main/resources/META-INF/spring/ingestion/services.xml
===================================================================
--- products/provisioning/services/src/main/resources/META-INF/spring/ingestion/services.xml	(revision 84474)
+++ products/provisioning/services/src/main/resources/META-INF/spring/ingestion/services.xml	(working copy)
@@ -1,10 +1,10 @@
 <?xml version="1.0" encoding="UTF-8"?>
 <beans xmlns="http://www.springframework.org/schema/beans"
 	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
-	xsi:schemaLocation="http://www.springframework.org/schema/beans 
+	xsi:schemaLocation="http://www.springframework.org/schema/beans
 	http://www.springframework.org/schema/beans/spring-beans-2.5.xsd">
-	
-	
+
+
     <bean id="ingestionService" class="com.dgp.anthologic.ingestion.service.impl.IngestionServiceImpl">
     	<!--  -->
     	<property name="logger" ref="ingestionTechLogger"/>
@@ -24,34 +24,34 @@
         <property name="bulkXsdFilePath" value="$ingestion{provisioning.bulk.xsd.path}"/>
         <property name="muverAttachedXsdFilePath" value="$ingestion{provisioning.bulk.muverAttachedXsd.path}"/>
         <property name="defaultProductService" ref="productService" />
-        
+
         <!--  -->
         <property name="previewStartDate" value="$ingestion{ingestion.preview.startDate}"/>
         <property name="previewDueDate" value="$ingestion{ingestion.preview.dueDate}"/>
         <property name="previewPriority" value="$ingestion{ingestion.preview.priority}"/>
-        
+
         <property name="watermarkTokenManagementFacade" ref="watermarkTokenManagementFacade"/>
-        <property name="manufacturingCoreFacade" ref="manufacturingCoreFacade"/>        
+        <property name="manufacturingCoreFacade" ref="manufacturingCoreFacade"/>
         <property name="metadataService" ref="metadataService"/>
         <property name="productService" ref="productService"/>
     </bean>
-    
+
 
 	<!--  -->
 	<bean id="transactionManager" class="org.springframework.orm.hibernate3.HibernateTransactionManager">
         <property name="globalRollbackOnParticipationFailure" value="true" />
         <property name="sessionFactory" ref="sessionFactory"/>
     </bean>
-    
-    
+
+
     <bean id="provisioningFacade" class="com.dgp.provisioning.service.impl.ProvisioningFacadeImpl">
         <property name="provisioningService" ref="provisioningService"/>
         <property name="ingestionService" ref="ingestionService"/>
     </bean>
-    
+
     <bean id="generateWatermarkPreview" class="com.dgp.anthologic.ingestion.event.EventGenerateWatermarkPreview" parent="notif.IngestProcessEventListener">
         <property name="productService" ref="productService"/>
         <property name="ingestionService" ref="ingestionService"/>
     </bean>
-    
+
 </beans>
Index: products/distribution-view/integration-tests/src/test/resources/log4j.xml
===================================================================
--- products/distribution-view/integration-tests/src/test/resources/log4j.xml	(revision 84474)
+++ products/distribution-view/integration-tests/src/test/resources/log4j.xml	(working copy)
@@ -32,7 +32,7 @@
             <param name="ConversionPattern" value="%d %x %-5p -${mgnt.cluster.node.id}- [%c] - %m%n"/>
         </layout>
     </appender>
-    
+
     <appender name="ROLL" class="org.apache.log4j.RollingFileAppender">
         <param name="File" value="umgi.log"/>
         <param name="MaxFileSize" value="50000KB"/>
@@ -43,7 +43,7 @@
             <param name="ConversionPattern" value="%d %x -${mgnt.cluster.node.id}- %-5p [%c] - %m%n"/>
         </layout>
     </appender>
-    
+
     <appender name="ROLLSDK" class="org.apache.log4j.RollingFileAppender">
         <param name="File" value="sdk.log"/>
         <param name="MaxFileSize" value="50000KB"/>
@@ -53,8 +53,8 @@
             <!-- <param name="ConversionPattern" value="%d{ABSOLUTE} %-5p [%c{1}] %m%n"/> -->
             <param name="ConversionPattern" value="%d %x -${mgnt.cluster.node.id}- %-5p [%c] - %m%n"/>
         </layout>
-    </appender>    
-    
+    </appender>
+
     <appender name="ROLL-SQL" class="org.apache.log4j.RollingFileAppender">
         <param name="File" value="umgi-sql.log"/>
         <param name="MaxFileSize" value="50000KB"/>
@@ -65,25 +65,25 @@
             <param name="ConversionPattern" value="%d -${mgnt.cluster.node.id}- %m%n"/>
         </layout>
     </appender>
-    
+
     <category name="msg.poll" additivity="false">
     	<priority value="DEBUG"/>
     	<appender-ref ref="ROLLSDK"/>
     </category>
-    
+
     <category name="msg.exec" additivity="false">
     	<priority value="DEBUG"/>
     	<appender-ref ref="ROLLSDK"/>
     </category>
-    
+
     <category name="org.springframework">
         <priority value="FATAL"/>
     </category>
-    
+
     <category name="org.springframework.web">
         <priority value="FATAL"/>
     </category>
-    
+
     <category name="org.acegisecurity">
         <priority value="FATAL"/>
     </category>
@@ -120,33 +120,15 @@
     <category name="org.mortbay">
         <priority value="FATAL"/>
     </category>
-    
+
     <category name="mon.tech">
         <priority value="FATAL"/>
     </category>
-    
+
     <category name="Sigar">
         <priority value="FATAL"/>
     </category>
-    
-    <category name="riskmanagement.riskMngtServiceLogger"  additivity="false">
-        <priority value="INFO"/>
-        <appender-ref ref="ROLL"/>
-        <appender-ref ref="CONSOLE"/>
-    </category>    
-    
-    <category name="riskmanagement.riskMngtApplicationLogger"  additivity="false">
-        <priority value="INFO"/>
-        <appender-ref ref="ROLL"/>
-        <appender-ref ref="CONSOLE"/>
-    </category>
-    
-    <category name="riskmanagement.riskMngtJobLogger"  additivity="false">
-        <priority value="INFO"/>
-        <appender-ref ref="ROLL"/>
-        <appender-ref ref="CONSOLE"/>
-    </category>        
-    
+
     <root>
         <priority value="DEBUG"/>
         <appender-ref ref="ROLLSDK"/>
Index: products/distribution-view/integration-tests/src/test/java/com/dgp/anthologic/view/repository/bporder/DBHibernateBpOrderViewRepositoryIntegrationTest.java
===================================================================
--- products/distribution-view/integration-tests/src/test/java/com/dgp/anthologic/view/repository/bporder/DBHibernateBpOrderViewRepositoryIntegrationTest.java	(revision 84474)
+++ products/distribution-view/integration-tests/src/test/java/com/dgp/anthologic/view/repository/bporder/DBHibernateBpOrderViewRepositoryIntegrationTest.java	(working copy)
@@ -20,7 +20,6 @@
 import com.dgp.anthologic.distribution.bporder.BpOrderRepository;
 import com.dgp.anthologic.distribution.bporder.SearchBpOrdersRequestDto;
 import com.dgp.anthologic.distribution.infrastructure.persistence.dao.ProductToolsDao;
-import com.dgp.anthologic.risk.domain.shared.ERisk;
 import com.dgp.anthologic.view.DistributionViewIntegrationBaseTest;
 import com.dgp.anthologic.view.domain.bporder.BOrderOpsDTO;
 import com.dgp.anthologic.view.domain.bporder.BpOrderOpsRequestDto;
@@ -88,13 +87,6 @@
     }
 
     @Test
-    public void testGetRisks() {
-        List<Long> bpOrderIds = Arrays.asList(155000000000900L);
-        Map<Long, String> risks = bpOrderToolsDao.getRisks(bpOrderIds);
-        assertEquals(risks, risks);
-    }
-
-    @Test
     public void testGetBpCodes() {
         List<String> bpNames = Arrays.asList("Orange", "Acquamedia", "Aigo", "Aim4Music", "AkadoMusic", "AkadoMusicVideo");
         Map<String, String> bpCodes = bpToolsDao.getBpNames(bpNames);
@@ -127,7 +119,6 @@
         searchCriteria.setBpNames(Arrays.asList("Orange"));
         searchCriteria.setStatuses(Arrays.asList(EBpOrderStatus.FINISHED, EBpOrderStatus.CAPACITY_FAILED));
         searchCriteria.setFinishedStatuses(Arrays.asList(EBpOrderFinishedStatus.DELIVERED, EBpOrderFinishedStatus.CANCELED));
-        searchCriteria.setRisks(Arrays.asList(ERisk.LOW));
         searchCriteria.setCreationDateFrom(dateFrom.getTime());
         searchCriteria.setCreationDateTo(dateTo.getTime());
         searchCriteria.setStartDateFrom(dateFrom.getTime());
Index: products/distribution-view/integration-tests/src/test/java/com/dgp/anthologic/application/ops/bporder/BpOrderOperationServiceIntegrationTest.java
===================================================================
--- products/distribution-view/integration-tests/src/test/java/com/dgp/anthologic/application/ops/bporder/BpOrderOperationServiceIntegrationTest.java	(revision 84474)
+++ products/distribution-view/integration-tests/src/test/java/com/dgp/anthologic/application/ops/bporder/BpOrderOperationServiceIntegrationTest.java	(working copy)
@@ -9,7 +9,6 @@
 
 import com.dgp.anthologic.core.utils.PaginatedRequest;
 import com.dgp.anthologic.core.utils.SearchResultsDto;
-import com.dgp.anthologic.risk.domain.shared.ERisk;
 import com.dgp.anthologic.view.DistributionViewIntegrationBaseTest;
 import com.dgp.anthologic.view.application.ops.bporder.BpOrderOperationService;
 import com.dgp.anthologic.view.domain.bporder.BOrderOpsDTO;
@@ -43,7 +42,6 @@
         searchCriteria.setBpNames(Arrays.asList("Orange"));
         searchCriteria.setStatuses(Arrays.asList(EBpOrderStatus.FINISHED, EBpOrderStatus.CAPACITY_FAILED));
         searchCriteria.setFinishedStatuses(Arrays.asList(EBpOrderFinishedStatus.DELIVERED, EBpOrderFinishedStatus.CANCELED));
-        searchCriteria.setRisks(Arrays.asList(ERisk.LOW));
         searchCriteria.setCreationDateFrom(dateFrom.getTime());
         searchCriteria.setCreationDateTo(dateTo.getTime());
         searchCriteria.setStartDateFrom(dateFrom.getTime());
Index: products/distribution-view/services/src/test/java/com/dgp/anthologic/view/repository/batch/DBHibernateBatchResultRepositoryTest.java
===================================================================
--- products/distribution-view/services/src/test/java/com/dgp/anthologic/view/repository/batch/DBHibernateBatchResultRepositoryTest.java	(revision 84474)
+++ products/distribution-view/services/src/test/java/com/dgp/anthologic/view/repository/batch/DBHibernateBatchResultRepositoryTest.java	(working copy)
@@ -43,7 +43,6 @@
 import com.dgp.anthologic.distribution.delivery.dto.EDeliveryType;
 import com.dgp.anthologic.distribution.order.bulk.BatchResultDto;
 import com.dgp.anthologic.distribution.order.bulk.SearchBatchesRequestDto;
-import com.dgp.anthologic.risk.domain.shared.ERisk;
 import com.dgp.anthologic.view.infrastructure.persistence.repository.batch.DBHibernateBatchResultRepository;
 import com.dgp.anthologic.view.repository.hibernate.DBDistributionBaseTest;
 import com.dgp.identity.model.User;
@@ -1041,125 +1040,6 @@
 
     @Ignore
     @Test
-    public void testSearchByRiskOrHaveIssue() {
-        PaginatedRequest paginatedRequest = new PaginatedRequest();
-
-        { // Search High risk
-            final List<ERisk> riskList = Arrays.asList(ERisk.HIGH);
-            final Boolean haveIssue = null;
-
-            SearchBatchesRequestDto searchBatchesRequestDto = SearchBatchRequestFactory.createSearchRequestByRisk(riskList, haveIssue);
-            SearchResultsDto<BatchResultDto> batchResultDtoList = batchResultRepository.searchBatchesForOps(searchBatchesRequestDto,
-                    paginatedRequest);
-            Assert.assertNotNull(batchResultDtoList);
-            final int expectedNumber = 4;
-            assertSearchResultCount(expectedNumber, batchResultDtoList);
-
-            assertBatchListContainsBatchWithId(batchResultDtoList.getResults(), 14000009930L);
-            assertBatchListContainsBatchWithId(batchResultDtoList.getResults(), 188000005402L);
-            assertBatchListContainsBatchWithId(batchResultDtoList.getResults(), 188000005411L);
-            assertBatchListContainsBatchWithId(batchResultDtoList.getResults(), 188000005413L);
-
-        }
-
-        { // Search Low Risk
-            final List<ERisk> riskList = Arrays.asList(ERisk.LOW);
-            final Boolean haveIssue = Boolean.FALSE;
-
-            SearchBatchesRequestDto searchBatchesRequestDto = SearchBatchRequestFactory.createSearchRequestByRisk(riskList, haveIssue);
-            SearchResultsDto<BatchResultDto> batchResultDtoList = batchResultRepository.searchBatchesForOps(searchBatchesRequestDto,
-                    paginatedRequest);
-            Assert.assertNotNull(batchResultDtoList);
-            final int expectedNumber = 2;
-            assertSearchResultCount(expectedNumber, batchResultDtoList);
-
-            assertBatchListContainsBatchWithId(batchResultDtoList.getResults(), 188000005412L);
-            assertBatchListContainsBatchWithId(batchResultDtoList.getResults(), 188000005414L);
-
-        }
-
-        { // Search Medium and Low Risk
-            final List<ERisk> riskList = Arrays.asList(ERisk.MEDIUM, ERisk.LOW);
-            final Boolean haveIssue = Boolean.FALSE;
-
-            SearchBatchesRequestDto searchBatchesRequestDto = SearchBatchRequestFactory.createSearchRequestByRisk(riskList, haveIssue);
-            SearchResultsDto<BatchResultDto> batchResultDtoList = batchResultRepository.searchBatchesForOps(searchBatchesRequestDto,
-                    paginatedRequest);
-            Assert.assertNotNull(batchResultDtoList);
-            final int expectedNumber = 5;
-            assertSearchResultCount(expectedNumber, batchResultDtoList);
-
-            assertBatchListContainsBatchWithId(batchResultDtoList.getResults(), 188000005412L);
-            assertBatchListContainsBatchWithId(batchResultDtoList.getResults(), 188000005414L);
-
-            assertBatchListContainsBatchWithId(batchResultDtoList.getResults(), 188000005401L);
-            assertBatchListContainsBatchWithId(batchResultDtoList.getResults(), 188000005403L);
-            assertBatchListContainsBatchWithId(batchResultDtoList.getResults(), 188000005404L);
-        }
-
-        { // Search Have Issue 1
-            final List<ERisk> riskList = new ArrayList<ERisk>();
-            final Boolean haveIssue = Boolean.TRUE;
-
-            SearchBatchesRequestDto searchBatchesRequestDto = SearchBatchRequestFactory.createSearchRequestByRisk(riskList, haveIssue);
-            SearchResultsDto<BatchResultDto> batchResultDtoList = batchResultRepository.searchBatchesForOps(searchBatchesRequestDto,
-                    paginatedRequest);
-            Assert.assertNotNull(batchResultDtoList);
-            final int expectedNumber = 7;
-            assertSearchResultCount(expectedNumber, batchResultDtoList);
-            assertBatchListContainsBatchWithId(batchResultDtoList.getResults(), 188000005401L);
-            assertBatchListContainsBatchWithId(batchResultDtoList.getResults(), 188000005403L);
-            assertBatchListContainsBatchWithId(batchResultDtoList.getResults(), 188000005404L);
-
-            assertBatchListContainsBatchWithId(batchResultDtoList.getResults(), 14000009930L);
-            assertBatchListContainsBatchWithId(batchResultDtoList.getResults(), 188000005402L);
-            assertBatchListContainsBatchWithId(batchResultDtoList.getResults(), 188000005411L);
-            assertBatchListContainsBatchWithId(batchResultDtoList.getResults(), 188000005413L);
-
-        }
-
-        { // Search Have Issue 2
-            final List<ERisk> riskList = null;
-            final Boolean haveIssue = Boolean.TRUE;
-
-            SearchBatchesRequestDto searchBatchesRequestDto = SearchBatchRequestFactory.createSearchRequestByRisk(riskList, haveIssue);
-            SearchResultsDto<BatchResultDto> batchResultDtoList = batchResultRepository.searchBatchesForOps(searchBatchesRequestDto,
-                    paginatedRequest);
-            Assert.assertNotNull(batchResultDtoList);
-            final int expectedNumber = 7;
-            assertSearchResultCount(expectedNumber, batchResultDtoList);
-
-            assertBatchListContainsBatchWithId(batchResultDtoList.getResults(), 188000005401L);
-            assertBatchListContainsBatchWithId(batchResultDtoList.getResults(), 188000005403L);
-            assertBatchListContainsBatchWithId(batchResultDtoList.getResults(), 188000005404L);
-
-            assertBatchListContainsBatchWithId(batchResultDtoList.getResults(), 14000009930L);
-            assertBatchListContainsBatchWithId(batchResultDtoList.getResults(), 188000005402L);
-            assertBatchListContainsBatchWithId(batchResultDtoList.getResults(), 188000005411L);
-            assertBatchListContainsBatchWithId(batchResultDtoList.getResults(), 188000005413L);
-
-        }
-
-        { // Search Have Issue and (LOW and MEDIUM) ==> should return only MEDIUM
-            final List<ERisk> riskList = Arrays.asList(ERisk.MEDIUM, ERisk.LOW);
-            final Boolean haveIssue = Boolean.TRUE;
-
-            SearchBatchesRequestDto searchBatchesRequestDto = SearchBatchRequestFactory.createSearchRequestByRisk(riskList, haveIssue);
-            SearchResultsDto<BatchResultDto> batchResultDtoList = batchResultRepository.searchBatchesForOps(searchBatchesRequestDto,
-                    paginatedRequest);
-            Assert.assertNotNull(batchResultDtoList);
-            final int expectedNumber = 3;
-            assertSearchResultCount(expectedNumber, batchResultDtoList);
-
-            assertBatchListContainsBatchWithId(batchResultDtoList.getResults(), 188000005401L);
-            assertBatchListContainsBatchWithId(batchResultDtoList.getResults(), 188000005403L);
-            assertBatchListContainsBatchWithId(batchResultDtoList.getResults(), 188000005404L);
-
-        }
-    }
-
-    @Ignore
-    @Test
     public void testSearchByPlugin() {
 
         PaginatedRequest paginatedRequest = new PaginatedRequest();
@@ -1346,6 +1226,7 @@
 
         assertBatchListContainsBatchWithId(batchResultDtoList.getResults(), 1400000902L);
     }
+
     @Ignore
     @Test
     public void testSearchBatchesForOpsByAction() {
Index: products/distribution-view/services/src/test/java/com/dgp/anthologic/view/repository/batch/SearchBatchRequestFactory.java
===================================================================
--- products/distribution-view/services/src/test/java/com/dgp/anthologic/view/repository/batch/SearchBatchRequestFactory.java	(revision 84474)
+++ products/distribution-view/services/src/test/java/com/dgp/anthologic/view/repository/batch/SearchBatchRequestFactory.java	(working copy)
@@ -14,7 +14,6 @@
 import com.dgp.anthologic.distribution.application.operation.batch.dto.enums.EOpsOverviewScope;
 import com.dgp.anthologic.distribution.delivery.dto.EDeliveryType;
 import com.dgp.anthologic.distribution.order.bulk.SearchBatchesRequestDto;
-import com.dgp.anthologic.risk.domain.shared.ERisk;
 
 public class SearchBatchRequestFactory {
 
@@ -55,7 +54,7 @@
         searchBatchesRequestDto.setStatus(status);
         return searchBatchesRequestDto;
     }
-    
+
     public static SearchBatchesRequestDto createSearchRequestByBatchStatusOverview(TechnicalState batchStatusOverView) {
         SearchBatchesRequestDto searchBatchesRequestDto = new SearchBatchesRequestDto();
         searchBatchesRequestDto.setBatchStatusOverView(batchStatusOverView);
@@ -208,13 +207,6 @@
         return searchBatchesRequestDto;
     }
 
-    public static SearchBatchesRequestDto createSearchRequestByRisk(List<ERisk> riskList, Boolean haveIssue) {
-        SearchBatchesRequestDto searchBatchesRequestDto = new SearchBatchesRequestDto();
-        searchBatchesRequestDto.setRiskLevelList(riskList);
-        searchBatchesRequestDto.setHaveIssues(haveIssue);
-        return searchBatchesRequestDto;
-    }
-
     public static SearchBatchesRequestDto createSearchRequestByPlugin(List<String> pluginList) {
         SearchBatchesRequestDto searchBatchesRequestDto = new SearchBatchesRequestDto();
         searchBatchesRequestDto.setPluginNameList(pluginList);
Index: products/distribution-view/services/src/test/resources/log4j.xml
===================================================================
--- products/distribution-view/services/src/test/resources/log4j.xml	(revision 84474)
+++ products/distribution-view/services/src/test/resources/log4j.xml	(working copy)
@@ -84,25 +84,21 @@
     <category name="org.springframework">
         <priority value="ERROR"/>
     </category>
-    
+
     <category name="org.jbpm">
         <priority value="ERROR"/>
     </category>
-    
+
     <category name="org.springmodules">
         <priority value="INFO"/>
     </category>
-    
+
     <!-- ============================================= -->
-    
-    <category name="riskmanagement.riskMngtServiceLogger">
-    	<priority value="DEBUG"/>
-    </category>
-    
+
     <root>
         <priority value="ERROR"/>
         <appender-ref ref="CONSOLE"/>
     </root>
-    
+
 </log4j:configuration>
 
Index: products/distribution-view/services/src/test/resources/application-config.xml
===================================================================
--- products/distribution-view/services/src/test/resources/application-config.xml	(revision 84474)
+++ products/distribution-view/services/src/test/resources/application-config.xml	(working copy)
@@ -73,7 +73,6 @@
 				<value>classpath:META-INF/persistence/identity/hibernate.cfg.xml</value>
             
             
-                <value>classpath*:META-INF/persistence/risk/hibernate.cfg.xml</value>
             	<value>classpath:META-INF/persistence/distribution-view/hibernate.cfg.xml</value>
             	<value>classpath:META-INF/persistence/distribution/hibernate.cfg.xml</value>
                 <value>classpath*:META-INF/persistence/hibernate.cfg.xml</value>
Index: products/distribution-view/services/src/main/resources/META-INF/spring/distribution-view/loggers.xml
===================================================================
--- products/distribution-view/services/src/main/resources/META-INF/spring/distribution-view/loggers.xml	(revision 84474)
+++ products/distribution-view/services/src/main/resources/META-INF/spring/distribution-view/loggers.xml	(working copy)
@@ -13,20 +13,6 @@
           http://www.digiplug.com/schema/sdk/commons/logging
           http://www.digiplug.com/schema/sdk/commons/logging/dgp-log.xsd">
 
-	<!-- bean id="rmlf" class="com.dgp.commons.log.spring.LoggerFactoryFactoryBean">
-		<property name="name" value="riskmanagement" />
-		<property name="level" value="DEBUG" />
-		<property name="basenames">
-			<list>
-				<value>classpath:logs/risk_mngt_log_messages</value>
-			</list>
-		</property>		
-		<property name="expirationDelay" value="-1" />
-	</bean>
-
-	<log:logger id="riskMngtServiceLogger"  loggerFactoryName="rmlf" level="DEBUG" />
-	<log:logger id="riskMngtJobLogger"  loggerFactoryName="rmlf" level="DEBUG" /-->
-	
 	<bean id="distributionViewloggerFactory" class="com.dgp.commons.log.spring.LoggerFactoryFactoryBean">
 		<property name="name" value="distributionViewFactory"/>
 		<property name="level" value="DEBUG"/>
@@ -40,4 +26,5 @@
 	
 	<log:logger id="distributionViewLogger" loggerFactoryName="distributionViewloggerFactory" level="DEBUG"/> 
 
-</beans>
\ No newline at end of file
+</beans>
+
Index: products/distribution-view/services/src/main/resources/META-INF/persistence/distribution-view/entities-batch.hbm.xml
===================================================================
--- products/distribution-view/services/src/main/resources/META-INF/persistence/distribution-view/entities-batch.hbm.xml	(revision 84474)
+++ products/distribution-view/services/src/main/resources/META-INF/persistence/distribution-view/entities-batch.hbm.xml	(working copy)
@@ -27,7 +27,6 @@
 		<property name="highVisibility" column="B_H_VIS" type="yes_no" insert="false" update="false" />
 		<property name="error" column="B_ERROR" type="yes_no" insert="false" update="false" />
 		<property name="endDate" column="B_END_DATE" type="timestamp" insert="false" update="false" />
-		<property name="risk" column="B_RISK" type="string" insert="false" update="false" />
 	</class>
 
 	<class entity-name="SearchBatchSqlResult" name="com.dgp.anthologic.view.domain.batch.SearchBatchSqlResult" >
@@ -81,7 +80,6 @@
 		
 		<property name="weight" column="B_WEIGHT" type="long" insert="false" update="false" />
 		<property name="errorCode" column="B_ERROR_CODE" type="string" insert="false" update="false" />
-		<property name="risk" column="B_RISK" type="com.dgp.anthologic.view.domain.batch.misc.ERiskType" insert="false" update="false" />
 		<property name="weighting" column="B_WEIGHTING" type="int" insert="false" update="false" />
 		<property name="bpRanking" column="BP_RANKING" type="int" insert="false" update="false" />
 		<property name="batchStep" column="B_STEP" type="com.dgp.anthologic.view.domain.batch.misc.EBatchStepType" insert="false" update="false" />
Index: products/distribution-view/services/src/main/resources/META-INF/persistence/distribution-view/queries-order.ftl.xml
===================================================================
--- products/distribution-view/services/src/main/resources/META-INF/persistence/distribution-view/queries-order.ftl.xml	(revision 84474)
+++ products/distribution-view/services/src/main/resources/META-INF/persistence/distribution-view/queries-order.ftl.xml	(working copy)
@@ -29,9 +29,6 @@
 		<#if criteria.batchInOrderInError == true >
 		inner join (${batchInOrderInErrorQuery}) orderBatchInError on o.id = orderBatchInError.orderID
 		</#if>		
-		<#if criteria.batchInOrderRisky == true >
-		inner join (${batchInOrderRiskyQuery}) orderBatchRisky on o.id = orderBatchRisky.orderID
-		</#if>
 		<#if criteria.startDateFrom?? || criteria.startDateTo?? || criteria.endDateFrom?? || criteria.endDateTo?? >
 		inner join (${orderStartEndDateQuery}) orderStartEndDate on o.id = orderStartEndDate.orderID
 		</#if>		
@@ -162,27 +159,6 @@
 		]]> 
 	</sql-query>	
 	
-	<sql-query name="batchInOrderRisky">
-	<![CDATA[
-		select bpo2.order_id as orderID
-		from dst_partner_order bpo2
-		inner join dst_sync_instruction si2 on (bpo2.id = si2.partner_order_id)
-		inner join dst_batch b2 on (si2.batch_id = b2.id)
-		inner join rsk_batch_risk br2 on (b2.id = br2.batch_id)
-		where bpo2.order_status='PROCESSING'
-		and br2.risk in ('HIGH','MEDIUM')
-		UNION ALL
-		select bpo3.order_id as orderID
-		from dst_partner_order bpo3
-		inner join dst_sync_instr_partner_order sipo3 on (bpo3.id=sipo3.partner_order_id)
-		inner join dst_sync_instruction si3 on (sipo3.sync_instruction_id=si3.id)
-		inner join dst_batch b3 on (si3.batch_id = b3.id)
-		inner join rsk_batch_risk br3 on (b3.id = br3.batch_id)
-		where bpo3.order_status='PROCESSING'
-		and br3.risk in ('HIGH','MEDIUM')
-		]]> 
-	</sql-query>	
-	
 	<sql-query name="orderStartEndDate">
 	<![CDATA[
 		select orderID, min(batchStartDate) as orderStartDate, max(batchEndDate) as orderEndDate
@@ -375,27 +351,6 @@
 		]]> 
 	</sql-query>	
 	
-	<sql-query name="DBHibernateOrderViewRepository.getOrderIdsAtRisk()">
-	<![CDATA[	
-	select bpo2.order_id as orderID
-		from dst_partner_order bpo2
-		inner join dst_sync_instruction si2 on (bpo2.id = si2.partner_order_id)
-		inner join dst_batch b2 on (si2.batch_id = b2.id)
-		inner join rsk_batch_risk br2 on (b2.id = br2.batch_id)
-		where bpo2.order_id in (:orderIds)
-		and br2.risk in ('HIGH','MEDIUM')
-		UNION
-		select bpo3.order_id as orderID
-		from dst_partner_order bpo3
-		inner join dst_sync_instr_partner_order sipo3 on (bpo3.id=sipo3.partner_order_id)
-		inner join dst_sync_instruction si3 on (sipo3.sync_instruction_id=si3.id)
-		inner join dst_batch b3 on (si3.batch_id = b3.id)
-		inner join rsk_batch_risk br3 on (b3.id = br3.batch_id)
-		where bpo3.order_id in (:orderIds)
-		and br3.risk in ('HIGH','MEDIUM')	
-	]]>
-	</sql-query>
-	
 	<sql-query name="DBHibernateOrderViewRepository.getOrderIdsAtErrorFlag()">
 	<![CDATA[	
 	select distinct si.order_id as orderID
Index: products/distribution-view/services/src/main/resources/META-INF/persistence/distribution-view/queries-batch.ftl.xml
===================================================================
--- products/distribution-view/services/src/main/resources/META-INF/persistence/distribution-view/queries-batch.ftl.xml	(revision 84474)
+++ products/distribution-view/services/src/main/resources/META-INF/persistence/distribution-view/queries-batch.ftl.xml	(working copy)
@@ -140,9 +140,7 @@
 				b.high_visibility as B_H_VIS,
 				b.is_error as B_ERROR,
 				b.end_date as B_END_DATE,
-				br.risk as B_RISK
 			FROM dst_batch b
-			LEFT OUTER join rsk_batch_risk br on br.batch_id = b.id
 			<#if criteria.sqlScope??>
 				<#if criteria.sqlScope == 'MY'>
 				, cor_global_Config gc, cor_partner bp
@@ -192,7 +190,6 @@
               ucs.CREATION_DATE as B_UCS_AVAIL_DATE,
               batch.WEIGHT as B_WEIGHT,
               batch.ERROR_CODE as B_ERROR_CODE,
-              batchRisk.RISK as B_RISK,
               batch.IS_ERROR as IS_ERROR,
               batch.step as B_STEP,
               batchWeighting.BATCH_WEIGHTING as B_WEIGHTING,
@@ -247,7 +244,6 @@
         		from dst_sync_instruction ssi) tok on (si.id = tok.sync_instruction_id)
 	       </#if>
           
-                LEFT OUTER JOIN RSK_BATCH_RISK batchRisk ON batchRisk.BATCH_ID = batch.ID
                 LEFT OUTER JOIN RKG_BATCH_WEIGHTING batchWeighting ON batchWeighting.BATCH_ID = batch.ID
 				LEFT OUTER JOIN COR_GLOBAL_CONFIG globalConfig ON globalConfig.id = batch.PARTNER_CONFIG_ID
 				LEFT OUTER JOIN COR_PARTNER partner ON partner.code = globalConfig.partner_code
@@ -435,9 +431,6 @@
              <#if criteria.productRefList??>
                  AND si.product_ref IN (:criteria.productRefList)
              </#if>               
-            <#if criteria.riskLevelList??>
-              AND batchRisk.RISK IN (:criteria.riskLevelList)
-         	</#if>
          	
          	<#if criteria.currentDeliveryVersion?? && criteria.currentDeliveryVersion == false>
            		AND si.delivery_config_id NOT IN(SELECT delivery_config_id FROM cor_current_config)
Index: products/distribution-view/services/src/main/resources/META-INF/persistence/distribution-view/queries.ftl.xml
===================================================================
--- products/distribution-view/services/src/main/resources/META-INF/persistence/distribution-view/queries.ftl.xml	(revision 84474)
+++ products/distribution-view/services/src/main/resources/META-INF/persistence/distribution-view/queries.ftl.xml	(working copy)
@@ -362,7 +362,7 @@
 		<#if criteria.creationDateFrom?? || criteria.creationDateTo??>
 			/*+use_hash(o po)*/
 		</#if>
-		<#if criteria.sqlRisk?? || criteria.highVisibility == true || criteria.topPriority == true || criteria.endDateFrom?? || criteria.endDateTo??>
+		<#if criteria.highVisibility == true || criteria.topPriority == true || criteria.endDateFrom?? || criteria.endDateTo??>
 			DISTINCT
 		</#if> 
 			po.id as ID,
@@ -480,7 +480,7 @@
 		<#if criteria.creationDateFrom?? || criteria.creationDateTo??>
 			/*+use_hash(o po)*/
 		</#if>
-		<#if criteria.sqlRisk?? || criteria.highVisibility == true || criteria.topPriority == true || criteria.endDateFrom?? || criteria.endDateTo??>
+		<#if criteria.highVisibility == true || criteria.topPriority == true || criteria.endDateFrom?? || criteria.endDateTo??>
 			DISTINCT
 		</#if> 
 			po.id as ID,
@@ -498,10 +498,10 @@
       		o.end_date as DUE_DATE
 		FROM dst_partner_order po
 			 inner join dst_order o on ( o.id = po.order_id )
-		<#if criteria.sqlRisk?? || criteria.highVisibility == true || criteria.topPriority == true || criteria.upcs?? || criteria.endDateFrom?? || criteria.endDateTo??>
+		<#if criteria.highVisibility == true || criteria.topPriority == true || criteria.upcs?? || criteria.endDateFrom?? || criteria.endDateTo??>
 			 inner join dst_selected_product sp on ( sp.order_id = o.id )
 		</#if>
-		<#if criteria.sqlRisk?? || criteria.highVisibility == true || criteria.topPriority == true || (criteria.upcs?? && criteria.sqlUpcStatus == 'ACCEPTED') || criteria.endDateFrom?? || criteria.endDateTo??>
+		<#if criteria.highVisibility == true || criteria.topPriority == true || (criteria.upcs?? && criteria.sqlUpcStatus == 'ACCEPTED') || criteria.endDateFrom?? || criteria.endDateTo??>
 			 inner join dst_sync_instruction si on ( si.partner_order_id = po.id and si.product_ref = sp.product_ref  )
     		<#if criteria.highVisibility == true || criteria.topPriority == true || criteria.endDateFrom?? || criteria.endDateTo??>
     			inner join dst_batch b on ( b.id = si.batch_id )
@@ -509,9 +509,6 @@
     				inner join (select max(b2.end_date)as dueDate, b2.id from dst_batch b2 group by b2.id)ba on ba.id = b.id
     			</#if>
     		</#if>
-			<#if criteria.sqlRisk??>
-      			inner join rsk_batch_risk br on( si.batch_id = br.batch_id )
-      		</#if>	
 		</#if>
 		<#if criteria.myBps??>
 			inner join cor_partner bp on( bp.code = po.partner_code )
@@ -528,10 +525,7 @@
 			AND sp.product_ref in(:criteria.sqlProductrefs)
       		AND si.id is null
     	</#if>
-		<#if criteria.sqlRisk?? || criteria.highVisibility == true || criteria.topPriority == true || (criteria.upcs?? && criteria.sqlUpcStatus == 'ACCEPTED')>
-			<#if criteria.sqlRisk??>
-    			AND br.risk = :criteria.sqlRisk
-    		</#if>	
+		<#if criteria.highVisibility == true || criteria.topPriority == true || (criteria.upcs?? && criteria.sqlUpcStatus == 'ACCEPTED')>
     		<#if criteria.highVisibility == true>
     			AND b.high_visibility = 'Y'
     		</#if>
Index: products/distribution-view/services/src/main/java/com/dgp/anthologic/view/infrastructure/persistence/dao/BpOrderToolsDao.java
===================================================================
--- products/distribution-view/services/src/main/java/com/dgp/anthologic/view/infrastructure/persistence/dao/BpOrderToolsDao.java	(revision 84474)
+++ products/distribution-view/services/src/main/java/com/dgp/anthologic/view/infrastructure/persistence/dao/BpOrderToolsDao.java	(working copy)
@@ -10,8 +10,6 @@
 
     List<BpOrderDto> getSortedBpOrdersForUIWithBasicFields(List<Long> bpOrderIds);
 
-    Map<Long, String> getRisks(List<Long> bpOrderIds);
-
     Map<Long, List<Integer>> getBatchesCounts(List<Long> bpOrderIds);
 
     Map<Long, Long> getSICounts(List<Long> bpOrderIds);
Index: products/distribution-view/services/src/main/java/com/dgp/anthologic/view/infrastructure/persistence/dao/impl/DBHibernateBpOrderToolsDao.java
===================================================================
--- products/distribution-view/services/src/main/java/com/dgp/anthologic/view/infrastructure/persistence/dao/impl/DBHibernateBpOrderToolsDao.java	(revision 84474)
+++ products/distribution-view/services/src/main/java/com/dgp/anthologic/view/infrastructure/persistence/dao/impl/DBHibernateBpOrderToolsDao.java	(working copy)
@@ -13,7 +13,6 @@
 import com.dgp.anthologic.core.enums.EBatchStatus;
 import com.dgp.anthologic.distribution.bporder.BpOrderDto;
 import com.dgp.anthologic.distribution.infrastructure.persistence.hibernate.HibernateHelper;
-import com.dgp.anthologic.risk.domain.shared.ERisk;
 import com.dgp.anthologic.view.domain.bporder.BOrderOpsDTO;
 import com.dgp.anthologic.view.domain.order.OrderOpsSearchResultDTO;
 import com.dgp.anthologic.view.infrastructure.persistence.AbstractDistributionViewQueries;
@@ -132,38 +131,6 @@
                     }
                 }
             }
-        } while (indexFrom < bpOrderIds.size());
-
-        return result;
-    }
-
-    @SuppressWarnings("unchecked")
-    public Map<Long, String> getRisks(List<Long> bpOrderIds) {
-        Map<Long, String> result = new HashMap<Long, String>();
-
-        int indexFrom = 0;
-        int indexTo = 0;
-
-        // Limit the number of expressions in the 'IN' list (Oracle limitation) (See JIRA AB-13372)
-        do {
-            indexTo = (indexFrom + MAX_LIST_SIZE < bpOrderIds.size()) ? indexFrom + MAX_LIST_SIZE : bpOrderIds.size();
-            List<Long> bpOrderIdsSubList = bpOrderIds.subList(indexFrom, indexTo);
-            indexFrom = indexFrom + MAX_LIST_SIZE;
-
-            List<Object[]> results = getSession()
-                    .createSQLQuery(
-                            "SELECT DISTINCT si.partner_order_id, br.risk FROM rsk_batch_risk br, dst_sync_instruction si WHERE br.batch_id = si.batch_id AND si.partner_order_id in("
-                                    + longsToSqlListFrom(bpOrderIdsSubList) + ")").list();
-            if (results != null && !results.isEmpty()) {
-                for (Object[] row : results) {
-                    // if there is no record in the map for this bpOrder
-                    // or if the risk in the map is less important than the new risk
-                    if (result.get(row[0]) == null
-                            || ERisk.valueOf(result.get(row[0])).ordinal() > ERisk.valueOf((String) row[1]).ordinal()) {
-                        result.put(HibernateHelper.toLong(row[0]), (String) row[1]);
-                    }
-                }
-            }
         } while (indexFrom < bpOrderIds.size());
 
         return result;
Index: products/distribution-view/services/src/main/java/com/dgp/anthologic/view/infrastructure/persistence/repository/bporder/DBHibernateBpOrderViewRepository.java
===================================================================
--- products/distribution-view/services/src/main/java/com/dgp/anthologic/view/infrastructure/persistence/repository/bporder/DBHibernateBpOrderViewRepository.java	(revision 84474)
+++ products/distribution-view/services/src/main/java/com/dgp/anthologic/view/infrastructure/persistence/repository/bporder/DBHibernateBpOrderViewRepository.java	(working copy)
@@ -73,14 +73,11 @@
     public SearchResultsDto<BOrderOpsDTO> searchOpsBpOrders(BpOrderOpsRequestDto searchCriteria, PaginatedRequest paginatedRequest) {
         SearchResultsDto<BOrderOpsDTO> result = new SearchResultsDto<BOrderOpsDTO>();
 
-        if (searchCriteria.getRisks() != null && searchCriteria.getRisks().isEmpty()) {
-            searchCriteria.setRisks(null);
-        }
         if (searchCriteria.getUpcs() != null) {
             searchCriteria.setSqlProductrefs(productToolsDao.getProductRefs(searchCriteria.getUpcs(), true));
         }
         // if we search failed upcs with risk or top priority or high visibility the result is always null
-        if ((searchCriteria.getRisks() != null || searchCriteria.isHighVisibility() || searchCriteria.isTopPriority())
+        if ((searchCriteria.isHighVisibility() || searchCriteria.isTopPriority())
                 && searchCriteria.getUpcStatus().equals(EUPCsStatus.FAILED)) {
             result.setTotalRowsNumber(0);
             return result;
@@ -101,7 +98,6 @@
             orderIds.add(bpOrderDto.getOrderId());
         }
         Map<String, String> bps = bpToolsDao.getBpNames(bpCodes);
-        Map<Long, String> risks = bpOrderToolsDao.getRisks(bpOrderIds);
         Map<Long, List<Integer>> batchesCounts = bpOrderToolsDao.getBatchesCounts(bpOrderIds);
         Map<Long, Long> siCounts = bpOrderToolsDao.getSICountsForOps(bpOrderIds);
         Map<Long, Long> spCounts = orderToolsDao.getSPCounts(orderIds);
@@ -109,7 +105,6 @@
 
         for (BOrderOpsDTO bpOrderDto : tempResult) {
             bpOrderDto.setBpCode(bps.get(bpOrderDto.getBpCode()));
-            bpOrderDto.setRisk(risks.get(bpOrderDto.getId()));
             bpOrderDto.setDueDate(endDates.get(bpOrderDto.getOrderId()));
             if (batchesCounts.get(bpOrderDto.getId()) == null) {
                 bpOrderDto.setBatches(0);
@@ -177,7 +172,6 @@
             orderIds.add(bpOrderDto.getOrderId());
         }
         Map<String, String> bps = bpToolsDao.getBpNames(bpCodes);
-        //Map<Long, String> risks = bpOrderToolsDao.getRisks(bpOrderIds);
         Map<Long, List<Integer>> batchesCounts = bpOrderToolsDao.getBatchesCounts(bpOrderIds);
         Map<Long, Long> siCounts = bpOrderToolsDao.getSICountsForOps(bpOrderIds);
         Map<Long, Long> spCounts = orderToolsDao.getSPCounts(orderIds);
@@ -185,7 +179,6 @@
 
         for (BOrderOpsDTO bpOrderDto : tempResult) {
             bpOrderDto.setBpCode(bps.get(bpOrderDto.getBpCode()));
-            //    bpOrderDto.setRisk(risks.get(bpOrderDto.getId()));
             //  bpOrderDto.setDueDate(endDates.get(bpOrderDto.getOrderId()));
             if (batchesCounts.get(bpOrderDto.getId()) == null) {
                 bpOrderDto.setBatches(0);
Index: products/distribution-view/services/src/main/java/com/dgp/anthologic/view/infrastructure/persistence/repository/batch/DBHibernateBatchOverviewRepository.java
===================================================================
--- products/distribution-view/services/src/main/java/com/dgp/anthologic/view/infrastructure/persistence/repository/batch/DBHibernateBatchOverviewRepository.java	(revision 84474)
+++ products/distribution-view/services/src/main/java/com/dgp/anthologic/view/infrastructure/persistence/repository/batch/DBHibernateBatchOverviewRepository.java	(working copy)
@@ -98,9 +98,6 @@
 
     private void updateResult(BatchesOverviewDetailDTO dto, BatchForOpsOverviewDto batch, Date now) {
         dto.setPriority(EBatchPriority.valueOf(batch.getPriority()));
-        if (batch.getRisk() != null && (batch.getRisk().equals("MEDIUM") || batch.getRisk().equals("HIGH"))) {
-            dto.setIssues(dto.getIssues() + 1);
-        }
         if (batch.isHighVisibility()) {
             dto.setHighVis(dto.getHighVis() + 1);
         }
Index: products/distribution-view/services/src/main/java/com/dgp/anthologic/view/infrastructure/persistence/repository/batch/DBHibernateBatchResultRepository.java
===================================================================
--- products/distribution-view/services/src/main/java/com/dgp/anthologic/view/infrastructure/persistence/repository/batch/DBHibernateBatchResultRepository.java	(revision 84474)
+++ products/distribution-view/services/src/main/java/com/dgp/anthologic/view/infrastructure/persistence/repository/batch/DBHibernateBatchResultRepository.java	(working copy)
@@ -34,7 +34,6 @@
 import com.dgp.anthologic.distribution.order.bulk.BatchActionDTO;
 import com.dgp.anthologic.distribution.order.bulk.BatchResultDto;
 import com.dgp.anthologic.distribution.order.bulk.SearchBatchesRequestDto;
-import com.dgp.anthologic.risk.domain.shared.ERisk;
 import com.dgp.anthologic.view.domain.batch.BatchResultRepository;
 import com.dgp.anthologic.view.domain.batch.SearchBatchSqlCriteria;
 import com.dgp.anthologic.view.domain.batch.SearchBatchSqlResult;
@@ -709,7 +708,6 @@
         batchResultDto.setPackagingStatus(packagingWorkflowStatus);
         batchResultDto.setDeliveryResumable(EBatchStatus.DELIVERY_ON_HOLD.equals(batchResult.getStatus()));
         batchResultDto.setDeliveryStatus(deliveryStatus);
-        batchResultDto.setRisk(batchResult.getRisk() == null ? ERisk.LOW : batchResult.getRisk());
         batchResultDto.setOnTopOfTheQueue(batchResult.isOnTopOfTheQueue());
 
         if (batchResult.getBpRanking() != null) {
@@ -1126,27 +1124,6 @@
             sqlCriteria.setBusinessPartnerCodes(businessPartnerCodes);
         }
 
-        // Risk
-        final List<String> riskAsStringList1 = new ArrayList<String>();
-        final List<String> riskAsStringList2 = new ArrayList<String>();
-
-        if (searchBatchesRequestDto.getRiskLevelList() != null && !searchBatchesRequestDto.getRiskLevelList().isEmpty()) {
-            for (ERisk risk : searchBatchesRequestDto.getRiskLevelList()) {
-                riskAsStringList1.add(risk.name().toUpperCase());
-            }
-        }
-        if (searchBatchesRequestDto.getHaveIssues() != null && Boolean.TRUE.equals(searchBatchesRequestDto.getHaveIssues())) {
-            riskAsStringList2.add(ERisk.HIGH.name().toUpperCase());
-            riskAsStringList2.add(ERisk.MEDIUM.name().toUpperCase());
-        }
-
-        Collection<?> riskListAsStringTmp = intersection(riskAsStringList1, riskAsStringList2);
-        List<String> riskListAsString = convertToStringList(riskListAsStringTmp);
-
-        if (riskListAsString != null && !riskListAsString.isEmpty()) {
-            sqlCriteria.setRiskLevelList(riskListAsString);
-        }
-
         // UPC and DGP code
         List<String> upcList = null;
         List<String> dgpCodeList = null;
Index: products/distribution-view/services/src/main/java/com/dgp/anthologic/view/domain/bporder/BpOrderOpsRequestDto.java
===================================================================
--- products/distribution-view/services/src/main/java/com/dgp/anthologic/view/domain/bporder/BpOrderOpsRequestDto.java	(revision 84474)
+++ products/distribution-view/services/src/main/java/com/dgp/anthologic/view/domain/bporder/BpOrderOpsRequestDto.java	(working copy)
@@ -5,7 +5,6 @@
 import java.util.List;
 
 import com.dgp.anthologic.distribution.bporder.BpOrder;
-import com.dgp.anthologic.risk.domain.shared.ERisk;
 
 public class BpOrderOpsRequestDto {
 
@@ -26,7 +25,6 @@
     private Date startDateTo;
     private Date endDateFrom;
     private Date endDateTo;
-    private List<ERisk> risks;
     private Long user;
 
     private boolean error;
@@ -59,17 +57,6 @@
         return result;
     }
 
-    public List<String> getSqlRisk() {
-        List<String> sqlRisks = null;
-        if (risks != null) {
-            sqlRisks = new ArrayList<String>();
-            for (ERisk risk : risks) {
-                sqlRisks.add(risk.name());
-            }
-        }
-        return sqlRisks;
-    }
-
     public List<String> getSqlFinishedStatuses() {
         List<String> result = null;
         if (finishedStatuses != null) {
@@ -232,14 +219,6 @@
         return endDateTo;
     }
 
-    public List<ERisk> getRisks() {
-        return risks;
-    }
-
-    public void setRisks(List<ERisk> risks) {
-        this.risks = risks;
-    }
-
     public boolean isError() {
         return error;
     }
Index: products/distribution-view/services/src/main/java/com/dgp/anthologic/view/domain/bporder/BOrderOpsDTO.java
===================================================================
--- products/distribution-view/services/src/main/java/com/dgp/anthologic/view/domain/bporder/BOrderOpsDTO.java	(revision 84474)
+++ products/distribution-view/services/src/main/java/com/dgp/anthologic/view/domain/bporder/BOrderOpsDTO.java	(working copy)
@@ -16,7 +16,6 @@
     private Date dueDate;
     private String status;
     private BpOrder.FinishedStatus finishedStatus;
-    private String risk;
     private int productOrdered;
     private int productReallyOrdered;
     private int batches;
@@ -122,10 +121,6 @@
         return status;
     }
 
-    public String getRisk() {
-        return risk;
-    }
-
     public int getProductOrdered() {
         return productOrdered;
     }
@@ -166,10 +161,6 @@
         this.status = status;
     }
 
-    public void setRisk(String risk) {
-        this.risk = risk;
-    }
-
     public void setProductOrdered(int productOrdered) {
         this.productOrdered = productOrdered;
     }
Index: products/distribution-view/services/src/main/java/com/dgp/anthologic/view/domain/batch/BatchForOpsOverviewDto.java
===================================================================
--- products/distribution-view/services/src/main/java/com/dgp/anthologic/view/domain/batch/BatchForOpsOverviewDto.java	(revision 84474)
+++ products/distribution-view/services/src/main/java/com/dgp/anthologic/view/domain/batch/BatchForOpsOverviewDto.java	(working copy)
@@ -10,17 +10,8 @@
     private boolean highVisibility;
     private boolean error;
     private Date endDate;
-    private String risk;
     private Integer numberOfAttempts;
 
-    public String getRisk() {
-        return risk;
-    }
-
-    public void setRisk(String risk) {
-        this.risk = risk;
-    }
-
     public Date getEndDate() {
         return endDate;
     }
Index: products/distribution-view/services/src/main/java/com/dgp/anthologic/view/domain/batch/SearchBatchSqlCriteria.java
===================================================================
--- products/distribution-view/services/src/main/java/com/dgp/anthologic/view/domain/batch/SearchBatchSqlCriteria.java	(revision 84474)
+++ products/distribution-view/services/src/main/java/com/dgp/anthologic/view/domain/batch/SearchBatchSqlCriteria.java	(working copy)
@@ -63,9 +63,6 @@
     private Boolean isCallFromOpsDefinedAndTrue;
     private Boolean isOpsScopeDefinedAndEqualsToMy;
 
-    // Risk
-    private List<String> riskLevelList;
-
     // Relative issues
     private Boolean haveIssues;
 
@@ -383,14 +380,6 @@
         this.userId = inUserId;
     }
 
-    public List<String> getRiskLevelList() {
-        return riskLevelList;
-    }
-
-    public void setRiskLevelList(List<String> inRiskLevelList) {
-        this.riskLevelList = inRiskLevelList;
-    }
-
     public Boolean getHaveIssues() {
         return haveIssues;
     }
Index: products/distribution-view/services/src/main/java/com/dgp/anthologic/view/domain/batch/misc/ERiskType.java
===================================================================
--- products/distribution-view/services/src/main/java/com/dgp/anthologic/view/domain/batch/misc/ERiskType.java	(revision 84474)
+++ products/distribution-view/services/src/main/java/com/dgp/anthologic/view/domain/batch/misc/ERiskType.java	(working copy)
@@ -1,11 +0,0 @@
-package com.dgp.anthologic.view.domain.batch.misc;
-
-import com.dgp.anthologic.risk.domain.shared.ERisk;
-import com.dgp.util.hibernate.AbstractEnumUserType;
-
-public class ERiskType extends AbstractEnumUserType {
-
-    public ERiskType() {
-        super(ERisk.class, "getName", "valueOfByName");
-    }
-}
Index: products/distribution-view/services/src/main/java/com/dgp/anthologic/view/domain/batch/SearchBatchSqlResultForOps.java
===================================================================
--- products/distribution-view/services/src/main/java/com/dgp/anthologic/view/domain/batch/SearchBatchSqlResultForOps.java	(revision 84474)
+++ products/distribution-view/services/src/main/java/com/dgp/anthologic/view/domain/batch/SearchBatchSqlResultForOps.java	(working copy)
@@ -7,7 +7,6 @@
 import com.dgp.anthologic.core.enums.EBatchDeliveryQaStatus;
 import com.dgp.anthologic.core.enums.EBatchStep;
 import com.dgp.anthologic.distribution.order.bulk.BatchActionDTO;
-import com.dgp.anthologic.risk.domain.shared.ERisk;
 
 public class SearchBatchSqlResultForOps extends SearchBatchSqlResult {
 
@@ -34,7 +33,6 @@
     private Long weight;
     private String errorCode;
 
-    private ERisk risk;
     private Long bpConfigId;
     private Integer weighting;
     private Integer bpRanking;
@@ -194,14 +192,6 @@
         this.errorCode = inErrorCode;
     }
 
-    public void setRisk(ERisk inRisk) {
-        this.risk = inRisk;
-    }
-
-    public ERisk getRisk() {
-        return risk;
-    }
-
     public EBatchCategory getCategory() {
         return category;
     }
Index: products/asset-management/integration-tests/pom.xml
===================================================================
--- products/asset-management/integration-tests/pom.xml	(revision 84474)
+++ products/asset-management/integration-tests/pom.xml	(working copy)
@@ -122,11 +122,6 @@
             <artifactId>anthologic-integration-tests-platforms</artifactId>
             <version>${pom.version}</version>
         </dependency>
-        <dependency>
-            <groupId>com.dgp.anthologic</groupId>
-            <artifactId>anthologic-products-risk-management-services</artifactId>
-            <version>${pom.version}</version>
-        </dependency>
 
         <dependency>
             <groupId>com.dgp.anthologic</groupId>
Index: products/pom.xml
===================================================================
--- products/pom.xml	(revision 84474)
+++ products/pom.xml	(working copy)
@@ -24,7 +24,6 @@
 		<module>price-management</module>
 		<module>reporting</module>
 		<module>bp-config</module>
-		<module>risk-management</module>
 		<module>ranking-management</module>
 		<module>distribution</module>
 		<module>distribution-view</module>
Index: products/ranking-management/integration-tests/src/test/resources/application-config.xml
===================================================================
--- products/ranking-management/integration-tests/src/test/resources/application-config.xml	(revision 84474)
+++ products/ranking-management/integration-tests/src/test/resources/application-config.xml	(working copy)
@@ -25,12 +25,10 @@
    <import resource="classpath:META-INF/spring/transfert/beans.xml"/>
    <import resource="classpath:META-INF/spring/cache/beans.xml"/>
    
-	<!-- risk management beans -->
-	<import resource="classpath:META-INF/spring/risk-mngt-beans.xml"/>
-	
+
 	<!-- Internal Test services -->
 	<!-- import resource="classpath:com/dgp/anthologic/distribution/internal-test-services.xml"/-->
-	
+
 	<!-- You may choose stub or real services, depending on you want to test with real services or fake ones (mocks). -->
 	<!--  Stub external services -->
 	<!--import resource="classpath:com/dgp/anthologic/distribution/external-stub-services.xml"/-->
Index: products/ranking-management/integration-tests/src/test/resources/log4j.xml
===================================================================
--- products/ranking-management/integration-tests/src/test/resources/log4j.xml	(revision 84474)
+++ products/ranking-management/integration-tests/src/test/resources/log4j.xml	(working copy)
@@ -32,7 +32,7 @@
             <param name="ConversionPattern" value="%d %x %-5p -${mgnt.cluster.node.id}- [%c] - %m%n"/>
         </layout>
     </appender>
-    
+
     <appender name="ROLL" class="org.apache.log4j.RollingFileAppender">
         <param name="File" value="umgi.log"/>
         <param name="MaxFileSize" value="50000KB"/>
@@ -43,7 +43,7 @@
             <param name="ConversionPattern" value="%d %x -${mgnt.cluster.node.id}- %-5p [%c] - %m%n"/>
         </layout>
     </appender>
-    
+
     <appender name="ROLLSDK" class="org.apache.log4j.RollingFileAppender">
         <param name="File" value="sdk.log"/>
         <param name="MaxFileSize" value="50000KB"/>
@@ -53,8 +53,8 @@
             <!-- <param name="ConversionPattern" value="%d{ABSOLUTE} %-5p [%c{1}] %m%n"/> -->
             <param name="ConversionPattern" value="%d %x -${mgnt.cluster.node.id}- %-5p [%c] - %m%n"/>
         </layout>
-    </appender>    
-    
+    </appender>
+
     <appender name="ROLL-SQL" class="org.apache.log4j.RollingFileAppender">
         <param name="File" value="umgi-sql.log"/>
         <param name="MaxFileSize" value="50000KB"/>
@@ -65,25 +65,25 @@
             <param name="ConversionPattern" value="%d -${mgnt.cluster.node.id}- %m%n"/>
         </layout>
     </appender>
-    
+
     <category name="msg.poll" additivity="false">
     	<priority value="DEBUG"/>
     	<appender-ref ref="ROLLSDK"/>
     </category>
-    
+
     <category name="msg.exec" additivity="false">
     	<priority value="DEBUG"/>
     	<appender-ref ref="ROLLSDK"/>
     </category>
-    
+
     <category name="org.springframework">
         <priority value="FATAL"/>
     </category>
-    
+
     <category name="org.springframework.web">
         <priority value="FATAL"/>
     </category>
-    
+
     <category name="org.acegisecurity">
         <priority value="FATAL"/>
     </category>
@@ -120,33 +120,15 @@
     <category name="org.mortbay">
         <priority value="FATAL"/>
     </category>
-    
+
     <category name="mon.tech">
         <priority value="FATAL"/>
     </category>
-    
+
     <category name="Sigar">
         <priority value="FATAL"/>
     </category>
-    
-    <category name="riskmanagement.riskMngtServiceLogger"  additivity="false">
-        <priority value="INFO"/>
-        <appender-ref ref="ROLL"/>
-        <appender-ref ref="CONSOLE"/>
-    </category>    
-    
-    <category name="riskmanagement.riskMngtApplicationLogger"  additivity="false">
-        <priority value="INFO"/>
-        <appender-ref ref="ROLL"/>
-        <appender-ref ref="CONSOLE"/>
-    </category>
-    
-    <category name="riskmanagement.riskMngtJobLogger"  additivity="false">
-        <priority value="INFO"/>
-        <appender-ref ref="ROLL"/>
-        <appender-ref ref="CONSOLE"/>
-    </category>        
-    
+
     <root>
         <priority value="DEBUG"/>
         <appender-ref ref="ROLLSDK"/>
Index: products/ranking-management/integration-tests/pom.xml
===================================================================
--- products/ranking-management/integration-tests/pom.xml	(revision 84474)
+++ products/ranking-management/integration-tests/pom.xml	(working copy)
@@ -1,21 +1,23 @@
-<?xml version="1.0"?><project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">
-  <parent>
+<?xml version="1.0"?>
+<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
+	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">
+	<parent>
 		<groupId>com.dgp.anthologic</groupId>
 		<artifactId>anthologic-ranking-management</artifactId>
 		<version>2.74.0-SNAPSHOT</version>
 	</parent>
-  <modelVersion>4.0.0</modelVersion>
-  <groupId>com.dgp.anthologic</groupId>
-  <artifactId>anthologic-entities-ranking-management-integration-tests</artifactId>
-  <name>Anthologic Entities Ranking Management Integration Tests</name>
-  <description>Anthologic Entities Ranking Management Integration Tests</description>
+	<modelVersion>4.0.0</modelVersion>
+	<groupId>com.dgp.anthologic</groupId>
+	<artifactId>anthologic-entities-ranking-management-integration-tests</artifactId>
+	<name>Anthologic Entities Ranking Management Integration Tests</name>
+	<description>Anthologic Entities Ranking Management Integration Tests</description>
 
 	<properties>
-               <custom.filtering.active>true</custom.filtering.active>
-               <common.resources.active>true</common.resources.active>
-  </properties>
+		<custom.filtering.active>true</custom.filtering.active>
+		<common.resources.active>true</common.resources.active>
+	</properties>
+
 
-  
 	<profiles>
 		<profile>
 			<id>integration-tests</id>
@@ -25,7 +27,7 @@
 						<groupId>org.apache.maven.plugins</groupId>
 						<artifactId>maven-surefire-plugin</artifactId>
 						<configuration>
-						    <argLine>-Xmx512m -XX:PermSize=256m -XX:MaxPermSize=512m</argLine>
+							<argLine>-Xmx512m -XX:PermSize=256m -XX:MaxPermSize=512m</argLine>
 							<skip>false</skip>
 						</configuration>
 					</plugin>
@@ -33,23 +35,23 @@
 			</build>
 		</profile>
 	</profiles>
-  
-  
-  <build>
-	 	<plugins>
-	      <plugin>
-	        <artifactId>maven-deploy-plugin</artifactId>
-	        <configuration>
-	          <skip>true</skip>
-	        </configuration>
-	      </plugin>
-	      <plugin>
-	        <groupId>org.apache.maven.plugins</groupId>
-	        <artifactId>maven-surefire-plugin</artifactId>
-	        <configuration>
-	          <skip>true</skip>
-	        </configuration>
-	      </plugin>
+
+
+	<build>
+		<plugins>
+			<plugin>
+				<artifactId>maven-deploy-plugin</artifactId>
+				<configuration>
+					<skip>true</skip>
+				</configuration>
+			</plugin>
+			<plugin>
+				<groupId>org.apache.maven.plugins</groupId>
+				<artifactId>maven-surefire-plugin</artifactId>
+				<configuration>
+					<skip>true</skip>
+				</configuration>
+			</plugin>
 			<plugin>
 				<groupId>com.atlassian.maven.plugins</groupId>
 				<artifactId>maven-clover2-plugin</artifactId>
@@ -57,20 +59,15 @@
 					<skip>true</skip>
 				</configuration>
 			</plugin>
-	     </plugins>
-  </build>
-  
-  <dependencies>
+		</plugins>
+	</build>
+
+	<dependencies>
 		<dependency>
 			<groupId>com.dgp.anthologic</groupId>
 			<artifactId>anthologic-integration-tests-platforms</artifactId>
 			<version>${pom.version}</version>
 		</dependency>
-		<dependency>
-			<groupId>com.dgp.anthologic</groupId>
-			<artifactId>anthologic-products-risk-management-services</artifactId>
-			<version>${pom.version}</version>
-		</dependency>
-  </dependencies>
-  
+	</dependencies>
+
 </project>
Index: platforms/products/src/main/resources/META-INF/spring/anthologic-products-platform.xml
===================================================================
--- platforms/products/src/main/resources/META-INF/spring/anthologic-products-platform.xml	(revision 84474)
+++ platforms/products/src/main/resources/META-INF/spring/anthologic-products-platform.xml	(working copy)
@@ -8,21 +8,19 @@
     <import resource="classpath*:META-INF/spring/core-model-daos.xml" />
 
     <import resource="classpath*:META-INF/spring/core-beans.xml"/>
-    
-    <import resource="classpath*:META-INF/spring/risk/beans.xml"/>
-    
-    <import resource="classpath*:META-INF/spring/rank/beans.xml"/>
+
+
 
     <import resource="classpath*:META-INF/spring/assetmgt-beans.xml"/>
-    
+
     <import resource="classpath*:META-INF/spring/prdordering-beans.xml"/>
 
     <import resource="classpath:META-INF/spring/provisioning/beans.xml"/>
     <import resource="classpath:META-INF/spring/provisioning-beans.xml"/>
     <import resource="classpath:META-INF/spring/provisioning/ui/beans.xml" />
-    
+
     <import resource="classpath:META-INF/spring/distribution/batch/provisioning/beans.xml" />
-        
+
     <import resource="classpath:META-INF/spring/ingestion/beans.xml"/>
     <import resource="classpath:META-INF/spring/media/beans.xml"/>
     <import resource="classpath:META-INF/spring/media/plugin/imagemagick.xml" />
@@ -30,20 +28,20 @@
     <import resource="classpath:META-INF/spring/media/plugin/midi.xml" />
 	<import resource="classpath:META-INF/spring/media/plugin/mediainfo.xml" />
 
-    <import resource="classpath*:META-INF/spring/bpconfig-beans.xml" />	    
+    <import resource="classpath*:META-INF/spring/bpconfig-beans.xml" />
 
     <import resource="classpath*:META-INF/spring/servicesfacade-beans.xml" />
 
     <import resource="classpath*:META-INF/spring/usermgt-beans.xml"/>
-	
+
 	<!-- Price Management -->
     <import resource="classpath*:META-INF/spring/price-management-beans.xml" />
-    
+
     <import resource="classpath*:META-INF/spring/distribution-beans.xml" />
     <import resource="classpath*:META-INF/spring/distribution-view/beans.xml"/>
-    
+
 	<import resource="classpath*:META-INF/spring/orderprocess-beans.xml" />
-	
+
     <import resource="classpath*:META-INF/spring/amt-beans.xml"/>
 
     <import resource="classpath*:META-INF/spring/notifications-beans.xml"/>
Index: platforms/base/src/main/resources/META-INF/spring/simple-platform.xml
===================================================================
--- platforms/base/src/main/resources/META-INF/spring/simple-platform.xml	(revision 84474)
+++ platforms/base/src/main/resources/META-INF/spring/simple-platform.xml	(working copy)
@@ -130,7 +130,6 @@
 				 <value>classpath:META-INF/persistence/ntf/hibernate.cfg.xml</value>
             	 
             	 <value>classpath:META-INF/persistence/distribution/hibernate.cfg.xml</value>
-                 <value>classpath:META-INF/persistence/risk/hibernate.cfg.xml</value>
 			     <value>classpath:META-INF/persistence/distribution-view/hibernate.cfg.xml</value>
 		         <value>classpath*:META-INF/persistence/hibernate.cfg.xml</value>
             </list>
Index: platforms/base/src/main/resources/META-INF/spring/base-platform.xml
===================================================================
--- platforms/base/src/main/resources/META-INF/spring/base-platform.xml	(revision 84474)
+++ platforms/base/src/main/resources/META-INF/spring/base-platform.xml	(working copy)
@@ -111,7 +111,6 @@
 				 <value>classpath:META-INF/persistence/ntf/hibernate.cfg.xml</value>
 
             	 <value>classpath:META-INF/persistence/distribution/hibernate.cfg.xml</value>
-              	 <value>classpath:META-INF/persistence/risk/hibernate.cfg.xml</value>
 			  	 <value>classpath:META-INF/persistence/distribution-view/hibernate.cfg.xml</value>
 
               	 <value>classpath*:META-INF/persistence/hibernate.cfg.xml</value>
Index: customization/UMGI/integration/integration-tests/src/test/resources/com/dgp/integration/mei/translation/utils/snapshotDBBeforeIntegrationTest.xml
===================================================================
--- customization/UMGI/integration/integration-tests/src/test/resources/com/dgp/integration/mei/translation/utils/snapshotDBBeforeIntegrationTest.xml	(revision 84474)
+++ customization/UMGI/integration/integration-tests/src/test/resources/com/dgp/integration/mei/translation/utils/snapshotDBBeforeIntegrationTest.xml	(working copy)
@@ -75,6 +75,4 @@
 	<DST_DELIVERY_ITEM/>
 	<DST_DELIVERY_TRANSACTION/>
 	<DST_AUDIT_TRAIL/>
-	<RSK_BATCH_RISK/>
-	<RSK_REQUEST/>
-</dataset>
\ No newline at end of file
+</dataset>
Index: customization/UMGI/integration/integration-tests/pom.xml
===================================================================
--- customization/UMGI/integration/integration-tests/pom.xml	(revision 84474)
+++ customization/UMGI/integration/integration-tests/pom.xml	(working copy)
@@ -70,13 +70,13 @@
 				<artifactId>maven-jaxb-plugin</artifactId>
 				<version>1.1</version>
 				<executions>
-					<execution> 
-						<id>releaseStatusService</id> 
-						<phase>generate-sources</phase> 
-						<goals> 
+					<execution>
+						<id>releaseStatusService</id>
+						<phase>generate-sources</phase>
+						<goals>
 							<goal>generate</goal>
-						</goals> 
-						<configuration> 
+						</goals>
+						<configuration>
 							<generateDirectory>${basedir}/target/generated/</generateDirectory>
 							<schemaDirectory>src/main/resources/</schemaDirectory>
 							<includeSchemas>
@@ -188,17 +188,12 @@
 			<!-- TODO VBE move this to IT-platform and version to parent pom -->
 			<version>1.5.0</version>
 		</dependency>
-		<dependency>
-          <groupId>com.dgp.anthologic</groupId>
-        <artifactId>anthologic-products-risk-management-services</artifactId>
-        <version>${pom.version}</version>
-        </dependency>
-        
+
        <dependency>
           <groupId>com.dgp.anthologic</groupId>
         <artifactId>anthologic-products-distribution-view-services</artifactId>
         <version>${pom.version}</version>
         </dependency>
-		
+
 	</dependencies>
 </project>
Index: environment-contexts/common-resources/src/main/resources/persistence.cfg.properties
===================================================================
--- environment-contexts/common-resources/src/main/resources/persistence.cfg.properties	(revision 84474)
+++ environment-contexts/common-resources/src/main/resources/persistence.cfg.properties	(working copy)
@@ -24,7 +24,6 @@
 classpath:META-INF/persistence/cdn/hibernate.cfg.xml,\
 classpath:META-INF/persistence/custom/hibernate.cfg.xml,\
 classpath:META-INF/persistence/distribution/hibernate.cfg.xml,\
-classpath:META-INF/persistence/risk/hibernate.cfg.xml,\
 classpath:META-INF/persistence/distribution-view/hibernate.cfg.xml,\
 classpath*:META-INF/persistence/hibernate.cfg.xml
 
Index: environment-contexts/properties-contexts/src/main/resources/digiplug/development/gdaniel.properties
===================================================================
--- environment-contexts/properties-contexts/src/main/resources/digiplug/development/gdaniel.properties	(revision 0)
+++ environment-contexts/properties-contexts/src/main/resources/digiplug/development/gdaniel.properties	(revision 0)
@@ -0,0 +1,157 @@
+# This is the main config file.
+
+config.home.dir=/home/kranius/dsc/workspace
+config.ip.address=10.1.22.43
+config.server.port=8081
+config.repository.server.port=4747
+config.bdd.user=DEV_GDA
+config.bdd.password=yafegung
+
+provisioning.scheduling.autostartup=false
+provisioning.batch.ordering.cron=*/6 * * * * ?
+
+# #########################################################################
+
+### Metadata base path
+metadata.home.dir.path=${config.home.dir}/dgp.config
+
+### Repository path
+anthologic.repository.home.dir.path=${config.home.dir}/anthologic
+repository.file.home.url=file:${anthologic.repository.home.dir.path}
+repository.server.http.url=http://${config.ip.address}:${config.repository.server.port}
+repository.client.http.url=http://${config.ip.address}:${config.repository.server.port}
+repository.client.http.externe.url=${repository.client.http.url}
+
+### Database connection
+#base-platform.jdbc.url=jdbc:oracle:thin:@localhost:1521:XE
+base-platform.jdbc.url=jdbc:oracle:thin:@srv-ora-1.int.digiplug.com:1521:ATLCDEV
+base-platform.jdbc.user=${config.bdd.user}
+base-platform.jdbc.passwd=${config.bdd.password}
+base-platform.hibernate.default.schema=${config.bdd.user}
+hibernate.show.sql=true
+
+### Delivery
+delivery.ucs.httpserver.url=http://10.1.22.43:8081/anthologic/webTeleporter/
+delivery.ftp.external_acces.url=ftp://umvideo.umgi.digiplug.net/
+delivery.fileServer.home.dir.path=${config.home.dir}/delivery
+
+delivery.itunes.transporter.path=${config.home.dir}/Transporter/fakeTransporter.CMD
+delivery.itunes.transporter.log.dir=${config.home.dir}/Transporter/log
+
+### Provisioning
+provisioning.devicemanagement.home.dir.path=${anthologic.repository.home.dir.path}
+provisioning.manufacturing.property.asynchHost.address=${config.ip.address}
+provisioning.manufacturing.property.asynchHost.port=${config.server.port}
+provisioning.bulk.tempFolder=${config.home.dir}/provisioning/extract
+provisioning.transferManager.validator.mediainfo.programWin32FilePath=${config.home.dir}/bin/MediaInfo/win32/MediaInfo.exe --Inform={0};file://"{1}" "{2}"
+provisioning.transferManager.validator.mediainfo.programUnixFilePath=${config.home.dir}/bin/MediaInfo/unix/mediainfo --Inform={0}\;file://{1} {2}
+
+######### Integration
+integration-integration.oracle.userid=${config.bdd.user}
+integration-integration.oracle.password=${config.bdd.password}
+integration-integration.oracle.sid=CMSUMGI
+
+### Active Directory
+integration-AD.integration.activeDIRIngestion.root=${config.home.dir}/ftp/umusic/UMGIIntegration/ActiveDirectory
+integration-AD.integration.activeDIRIngestion.oracle.sqlldrLocation=${config.bdd.oracle.home}/bin/sqlldr
+
+### AMPS
+integration-AMPS.integration.amps.upload.home.dir.path=${config.home.dir}/ftp/umusic/UMGIIntegration/AMPS
+integration.contizer.wsdl.host=http://pukebier.int.paris.digiplug.com:8081/contizer2/Service.asmx
+
+### R2 
+integration-R2.integration.r2Ingestion.home.dir.path=${config.home.dir}/umgiinteg/r2
+integration-R2.file.scheduler.cron=*/20 * * * * ?
+
+
+### RMS
+integration-RMS.integration.rmsIngestion.home.dir.path=${config.home.dir}/umgiinteg/rms
+integration-RMS.integration.rmsIngestion.pdshared.home.dir.path=${config.home.dir}/umgiinteg/rms
+integration-RMS.integration.rmsIngestion.oracle.sqlldrLocation=${config.bdd.oracle.home}/bin/sqlldr
+integration-RMS.file.scheduler.cron=*/20 * * * * ?
+
+
+### Redbox
+integration-RB.integration.redbox.home.dir.path=${config.home.dir}/umgiinteg/redBox
+
+integration-RB.integration.redbox.jdbc.url=${base-platform.jdbc.url}
+integration-RB.integration.redbox.jdbc.user=${config.bdd.user}
+integration-RB.integration.redbox.jdbc.passwd=${config.bdd.password}
+
+### HAL
+integration-HALBundleIngest.integration.hal.bundle.home.dir.path=${config.home.dir}/ftp/umusic
+
+### Saavis
+integration-saavis.integration.saavis.home.dir.path=${config.home.dir}/umgiinteg/saavis
+
+### PROXY
+integration-downloadFile.integration.proxy.home.dir.path=${config.home.dir}/ftp/umusic/UMGIIntegration/PROXY
+
+### Muver
+integration-muver.muver.transfermgr.home.dir.path=${config.home.dir}/ftp/umusic/UMGIIntegration
+integration-muver.muver.ftp.home.dir.path=${config.home.dir}/ftp/umusic/UMGIIntegration/Muver
+integration-muver.muver.deliverynotif.sFTP.root=${config.home.dir}/provisioning/extract
+
+integration-muver.muver.provisioning.service.url=/wsdl/transferManager.wsdl
+
+### CPRS
+#Temp File path for generating XML and ZIP files for translations
+integration-EventEndPoint.translations.temp.filepath=${config.home.dir}/umgiinteg/CPRS/translations
+
+integration-webservicesclients.webmencoder.webservice.wsdl.location=file://${metadata.home.dir.path}/wsdl/WebMencoder.wsdl
+integration-webservicesclients.ampsingest.webservice.wsdl.location=file://${metadata.home.dir.path}/wsdl/IngestionNotificationService.wsdl
+
+integration-webservicesclients.manufacturingstatus.recprocedure.directory=${config.home.dir}/umgiinteg/CPRS/recoveryProcedure
+integration-webservicesclients.manufacturingstatus.wsdl=file://${metadata.home.dir.path}/wsdl/gatewayinboundservice.wsdl
+#AUTOSHARE
+integration-HALBundleIngest.integration.autoshare.hal.download.url=http://${config.ip.address}:${config.server.port}/anthologic/integration/autoshare?system=HAL&asset_id=
+integration-HALBundleIngest.integration.autoshare.proxy.download.url=http://${config.ip.address}:${config.server.port}/anthologic/integration/autoshare?system=PROXY&asset_id=
+integration-HALBundleIngest.integration.autoshare.qname.localpart=Service
+integration-HALBundleIngest.integration.autoshare.wsdl.location=file://${metadata.home.dir.path}/wsdl/AutoShareRulesManager.wsdl
+integration-HALBundleIngest.integration.hal.autoshare.qname.tns=https://hal.umusic.com/webservices/
+integration-HALBundleIngest.integration.proxy.autoshare.qname.tns=https://hal.umusic.com/webservices/
+integration-HALBundleIngest.integration.autoshare.response.url=http://${config.ip.address}:${config.server.port}/anthologic/ws/ResponseHandlerService
+
+
+rms.webservice.wsdl.location.assetMaintenance=file:/D:/umgi/WSAssetMaintenance.wsdl
+rms.webservice.qname.tns.assetMaintenance=http://dml.ws.rms.umusic.com
+rms.webservice.qname.localpart.assetMaintenance=WSAssetMaintenanceService
+
+rms.webservice.wsdl.location.assetSearch=file:/D:/umgi/WSAssetSearch.wsdl
+rms.webservice.qname.tns.assetSearch=http://dml.ws.rms.umusic.com
+rms.webservice.qname.localpart.assetSearch=WSAssetSearchService
+
+rms.webservice.wsdl.location.productSearch=file:/D:/umgi/WSProductSearch.wsdl
+rms.webservice.qname.tns.productSearch=http://search.ws.rms.umusic.com
+rms.webservice.qname.localpart.productSearch=WSProductSearchService
+##################################################################
+sdk.repository.client.http.home=http://127.0.0.1:8081/transcoder-benchmark-isilon-mock/repos/
+sdk.repository.client.ftp.home=ftp://127.0.0.1:4242
+sdk.repository.client.local.home=${repository.file.home.url}
+#transcoder.alchemy.command.path=D:/Hat/Hat.exe
+sdk.transfert.local.rootdir=D:/tmp/transfert
+
+
+#sprint 1.14
+
+#### Transcoder properties
+transcoder.local.work.rootdir=${config.home.dir}/transcoder/tmp
+transcoder.alchemy.command.path=${config.home.dir}/transcoder/Hat.exe
+transcoder.dummy.dummydir=${config.home.dir}/anthologic/dummy
+### Repository
+repository.sessionFactory.name=nativeFs
+repository.client.isilon.http.home=file:///
+repository.client.isilon.ftp.home=file:///
+repository.client.isilon.ftp.user=
+repository.client.isilon.ftp.passwd=
+
+### Base platform
+base-platform.hibernate.c3p0.max_size=50
+base-platform.hibernate.c3p0.min_size=1
+base-platform.c3p0.initialPoolSize=1
+# en seconde
+base-platform.c3p0.checkoutTimeout=5
+base-platform.hibernate.c3p0.timeout=1800
+
+distribution.batch.scheduling.update.slot.cron=*/5 * * * * ? 
+distribution.batch.scheduling.top.update.slot.cron=*/5 * * * * ? 
Index: commons/error-logging/services/src/main/java/com/dgp/anthologic/exception/functional/risk/computation/RiskRequestComputationException.java
===================================================================
